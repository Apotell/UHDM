/*
 Do not modify, auto-generated by script

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   UhdmListener.cpp
 * Author: hs
 *
 * Created on March 11, 2022, 00:00 AM
 */
#include <uhdm/UhdmListener.h>
#include <uhdm/uhdm.h>

// System headers
#include <map>

namespace uhdm {
ScopedVpiHandle::ScopedVpiHandle(const Any* any)
    : handle(NewVpiHandle(any)) {}

ScopedVpiHandle::~ScopedVpiHandle() {
  if (handle != nullptr) {
    vpi_release_handle(handle);
  }
}

bool UhdmListener::didVisitAll(const Serializer& serializer) const {
  std::set<const Any*> allVisited;
  std::copy(m_visited.begin(), m_visited.end(),
            std::inserter(allVisited, allVisited.begin()));

  const Serializer::IdMap idMap = serializer.getAllObjects();
  std::set<const Any*> allObjects;
  std::transform(
      idMap.cbegin(), idMap.cend(),
      std::inserter(allObjects, allObjects.begin()),
      [](std::map<const BaseClass*, uint32_t>::const_reference entry) {
        return entry.first;
      });

  std::set<const Any*> diffObjects;
  std::set_difference(allObjects.begin(), allObjects.end(), allVisited.begin(),
                      allVisited.end(),
                      std::inserter(diffObjects, diffObjects.begin()));

  return diffObjects.empty();
}

void UhdmListener::listenAny_(const Any* object) {
  // NOTE(HS): Don't walk upwards. When initiating calls from non-design
  // objects, the intended behavior is to walk the subtree but enabling
  // this walks the entire deisgn.
  // if (const Any* const parent = object->getParent()) {
  //   listenAny(parent, vpiParent);
  // }
}

<UHDM_PRIVATE_LISTEN_IMPLEMENTATIONS>
<UHDM_PUBLIC_LISTEN_IMPLEMENTATIONS>
void UhdmListener::listenAny(const Any* object, uint32_t vpiRelation) {
  if (m_abortRequested) return;
  enterAny(object, vpiRelation);
  switch (object->getUhdmType()) {
<UHDM_LISTENANY_IMPLEMENTATION>
  default: break;
  }
  leaveAny(object, vpiRelation);
}

} // namespace uhdm
