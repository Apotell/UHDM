// -*- c++ -*-

/*
 Do not modify, auto-generated by cloner.py

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Cloner.h
 * Author: hs
 *
 * Created on July 14, 2023, 00:00 AM
 */
#ifndef UHDM_CLONER_H
#define UHDM_CLONER_H

#include <uhdm/containers.h>
#include <uhdm/RTTI.h>

#include <map>
#include <vector>


namespace UHDM {
class Serializer;
class Cloner : public RTTI {
  UHDM_IMPLEMENT_RTTI(Cloner, RTTI)

 public:
  typedef std::map<any *, const any *> cloned_map_t;
  typedef std::vector<const any *> any_stack_t;

 public:
  explicit Cloner(Serializer *serializer) : m_serializer(serializer) {}
  virtual ~Cloner() = default;

 public:
  const cloned_map_t &getClonedMap() const { return m_clonedMap; }
  const any_stack_t &getCallstack() const { return m_callstack; }

  virtual any* cloneAny(const any* source, any* parent);

 protected:
  const design *currentDesign() const;
  bool inCallstackOfType(UHDM_OBJECT_TYPE type) const;
  const any *closestObjectOfTypeOnCallstack(UHDM_OBJECT_TYPE type) const;

//<CLONER_DECLARATIONS>

 public:
  Serializer *const m_serializer;

 private:
  cloned_map_t m_clonedMap;
  any_stack_t m_callstack;

 private:
  Cloner(const Cloner &rhs) = delete;
  Cloner &operator=(const Cloner &rhs) = delete;
};
UHDM_IMPLEMENT_RTTI_CAST_FUNCTIONS(cloner_cast, UHDM::Cloner)

any *clone_tree(const any *root, Cloner *cloner);
}  // namespace UHDM


#endif  // UHDM_CLONER_H
