/*
 Do not modify, auto-generated by script

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   UhdmComparer.cpp
 * Author: hs
 *
 * Created on August 31, 2025, 00:00 AM
 */

#include <uhdm/UhdmComparer.h>
#include <uhdm/uhdm.h>
#include <uhdm/uhdm_types.h>

namespace uhdm {
bool UhdmComparer::setFailed(const Any *lhs, const Any *rhs, uint32_t relation,
                             bool force /* = false */) {
  if (((m_failedLhs == nullptr) && (m_failedRhs == nullptr)) || force) {
    m_failedLhs = lhs;
    m_failedRhs = rhs;
    m_relation = relation;
    return true;
  }
  return false;
}

int32_t UhdmComparer::compare(const Any *plhs, bool lhs, const Any *prhs,
                              bool rhs, uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  if ((r = (lhs == rhs) ? 0 : (lhs ? 1 : -1)) != 0) {
    setFailed(plhs, prhs, relation);
  }
  return r;
}

int32_t UhdmComparer::compare(const Any *plhs, int16_t lhs, const Any *prhs,
                              int16_t rhs, uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  if ((r = (lhs - rhs)) != 0) {
    setFailed(plhs, prhs, relation);
  }
  return r;
}

int32_t UhdmComparer::compare(const Any *plhs, uint16_t lhs, const Any *prhs,
                              uint16_t rhs, uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  if ((r = (lhs - rhs)) != 0) {
    setFailed(plhs, prhs, relation);
  }
  return r;
}

int32_t UhdmComparer::compare(const Any *plhs, int32_t lhs, const Any *prhs,
                              int32_t rhs, uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  if ((r = (lhs - rhs)) != 0) {
    setFailed(plhs, prhs, relation);
  }
  return r;
}

int32_t UhdmComparer::compare(const Any *plhs, uint32_t lhs, const Any *prhs,
                              uint32_t rhs, uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  if ((r = (lhs - rhs)) != 0) {
    setFailed(plhs, prhs, relation);
  }
  return r;
}

int32_t UhdmComparer::compare(const Any *plhs, int64_t lhs, const Any *prhs,
                              int64_t rhs, uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  if ((r = (lhs - rhs)) != 0) {
    setFailed(plhs, prhs, relation);
  }
  return r;
}

int32_t UhdmComparer::compare(const Any *plhs, uint64_t lhs, const Any *prhs,
                              uint64_t rhs, uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  if ((r = (lhs - rhs)) != 0) {
    setFailed(plhs, prhs, relation);
  }
  return r;
}

int32_t UhdmComparer::compare(const Any *plhs, std::string_view lhs,
                              const Any *prhs, std::string_view rhs,
                              uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  if ((r = lhs.compare(rhs)) != 0) {
    setFailed(plhs, prhs, relation);
  }
  return r;
}

int32_t UhdmComparer::compare(const Any *plhs, const Any *lhs, const Any *prhs,
                              const Any *rhs, uint32_t relation, int32_t r) {
  if (isRelationIgnored(relation)) return r;
  return compare(lhs, rhs, relation, r);
}

bool UhdmComparer::isRelationIgnored(uint32_t relation) {
  return (m_ignoredRelations.find(relation) != m_ignoredRelations.end());
}

template <typename T>
int32_t UhdmComparer::compareT(const Any *plhs, const std::vector<T *> *lhs,
                               const Any *prhs, const std::vector<T *> *rhs,
                               uint32_t relation, int32_t r) {
  if ((plhs == prhs) && (lhs == rhs)) return 0;
  if (isRelationIgnored(relation)) return r;
  if ((lhs != nullptr) && (rhs != nullptr)) {
    if ((r = static_cast<int32_t>(lhs->size() - rhs->size())) != 0) {
      setFailed(plhs, prhs, relation);
      return 1;
    }
    for (size_t i = 0, n = lhs->size(); i < n; ++i) {
      if ((r = compare(static_cast<const Any *>(lhs->at(i)),
                       static_cast<const Any *>(rhs->at(i)), relation, r)) !=
          0) {
        return r;
      }
    }
  } else if ((lhs != nullptr) && !lhs->empty() && (rhs == nullptr)) {
    setFailed(plhs, prhs, relation);
    return 1;
  } else if ((lhs == nullptr) && (rhs != nullptr) && !rhs->empty()) {
    setFailed(plhs, prhs, relation);
    return -1;
  }
  return r;
}

// clang-format off
// <UHDM_COMPARER_COLLECTION_IMPLEMENTATIONS>
// clang-format on

int32_t UhdmComparer::compare(const Any *lhs, const Any *rhs,
                              uint32_t relation /* = 0 */,
                              int32_t r /* = 0 */) {
  if (lhs == rhs) return 0;
  if (isRelationIgnored(relation)) return r;

  cache_t::const_iterator it = m_cache.find({lhs, rhs});
  if (it != m_cache.cend()) return it->second;

  // If the input lhs/rhs pair is already on the stack,
  // then assume equal.
  if (!m_callstack.emplace(lhs, rhs).second) return 0;

  UhdmType uhdmType = UhdmType::Any;
  if ((lhs != nullptr) && (rhs != nullptr)) {
    const UhdmType lhsType = lhs->getUhdmType();
    const UhdmType rhsType = rhs->getUhdmType();
    uhdmType = lhsType;
    if (r == 0) {
      r = static_cast<uint32_t>(lhsType) - static_cast<uint32_t>(rhsType);
    }
    if (r == 0) {
      r = lhs->compare(rhs, this);
    }
  } else if ((lhs != nullptr) && (rhs == nullptr)) {
    uhdmType = lhs->getUhdmType();
    r = 1;
  } else if ((lhs == nullptr) && (rhs != nullptr)) {
    uhdmType = rhs->getUhdmType();
    r = -1;
  }

  // clang-format off
  switch (uhdmType) {
// <UHDM_COMPARER_CASE_STATEMENTS>
    default: break;
  }
  // clang-format on

  m_cache.emplace(std::make_pair(lhs, rhs), r);
  if (r != 0) setFailed(lhs, rhs, relation);

  m_callstack.erase({lhs, rhs});
  return r;
}
}  // namespace uhdm
