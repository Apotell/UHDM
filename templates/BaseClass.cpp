/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   BaseClass.cpp
 * Author:
 *
 * Created on January 04, 2021, 01:01 AM
 */
#include <uhdm/BaseClass.h>
#include <uhdm/Serializer.h>

namespace UHDM {
std::string_view BaseClass::VpiFile() const {
  return vpiFile_ ? serializer_->symbolMaker.GetSymbol(vpiFile_) : kEmpty;
}

bool BaseClass::VpiFile(std::string_view data) {
  vpiFile_ = serializer_->symbolMaker.Make(data);
  return true;
}

const BaseClass* BaseClass::GetByVpiName(std::string_view name) const {
  return nullptr;
}

std::tuple<const BaseClass*, UHDM_OBJECT_TYPE,
           const std::vector<const BaseClass*>*>
BaseClass::GetByVpiType(int32_t type) const {
  switch (type) {
    case vpiParent:
      return std::make_tuple(vpiParent_, static_cast<UHDM_OBJECT_TYPE>(0), nullptr);
    default:
      return std::make_tuple(nullptr, static_cast<UHDM_OBJECT_TYPE>(0), nullptr);
  };
}

BaseClass::vpi_property_value_t BaseClass::GetVpiPropertyValue(
    int32_t property) const {
  switch (property) {
    case vpiLineNo:
      return vpi_property_value_t(vpiLineNo_);
    case vpiColumnNo:
      return vpi_property_value_t(vpiColumnNo_);
    case vpiEndLineNo:
      return vpi_property_value_t(vpiEndLineNo_);
    case vpiEndColumnNo:
      return vpi_property_value_t(vpiEndColumnNo_);
    case vpiType:
      return vpi_property_value_t(VpiType());
    case vpiFile: {
      const std::string_view file = VpiFile();
      if (!file.empty()) {
        return vpi_property_value_t(file.data());
      }
    } break;
    case vpiName: {
      const std::string_view name = VpiName();
      if (!name.empty()) {
        return vpi_property_value_t(name.data());
      }
    } break;
    case vpiDefName: {
      const std::string_view defname = VpiDefName();
      if (!defname.empty()) {
        return vpi_property_value_t(defname.data());
      }
    } break;
  }
  return vpi_property_value_t();
}

BaseClass* BaseClass::DeepClone(Serializer* serializer,
                                ElaboratorListener* elaborator,
                                BaseClass* parent) const {
  return nullptr;
}

void BaseClass::DeepCopy(BaseClass* clone, Serializer* serializer,
                         ElaboratorListener* elaborator,
                         BaseClass* parent) const {
  clone->VpiParent(parent);
}

int32_t BaseClass::Compare(const BaseClass* const other,
                           AnySet& visited) const {
  int32_t r = 0;

  if ((r = VpiType() - other->VpiType()) != 0) return r;
  if ((r = VpiName().compare(other->VpiName())) != 0) return r;
  if ((r = VpiDefName().compare(other->VpiDefName())) != 0) return r;

  return r;
}

int32_t BaseClass::Compare(const BaseClass* const other) const {
  AnySet visited;
  return Compare(other, visited);
}

}  // namespace UHDM
