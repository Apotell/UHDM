/*
 Do not modify, auto-generated by script

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   UhdmComparer.h
 * Author: hs
 *
 * Created on August 31, 2025, 00:00 AM
 */

#ifndef UHDM_UHDMCOMPARER_H
#define UHDM_UHDMCOMPARER_H
#pragma once

#include <uhdm/RTTI.h>
#include <uhdm/containers.h>
#include <uhdm/uhdm_types.h>
#include <uhdm/vpi_user.h>
#include <uhdm/sv_vpi_user.h>

#include <map>
#include <set>
#include <string_view>
#include <vector>

namespace uhdm {
class UhdmComparer : public RTTI {
  UHDM_IMPLEMENT_RTTI(UhdmComparer, RTTI)

 public:
  using callstack_t = std::set<std::pair<const Any*, const Any*>>;
  using cache_t = std::map<std::pair<const Any*, const Any*>, int32_t>;

 public:
  virtual int32_t compare(const Any* plhs, bool lhs, const Any* prhs, bool rhs,
                          uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* plhs, int16_t lhs, const Any* prhs,
                          int16_t rhs, uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* plhs, uint16_t lhs, const Any* prhs,
                          uint16_t rhs, uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* plhs, int32_t lhs, const Any* prhs,
                          int32_t rhs, uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* plhs, uint32_t lhs, const Any* prhs,
                          uint32_t rhs, uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* plhs, int64_t lhs, const Any* prhs,
                          int64_t rhs, uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* plhs, uint64_t lhs, const Any* prhs,
                          uint64_t rhs, uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* plhs, std::string_view lhs,
                          const Any* prhs, std::string_view rhs,
                          uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* plhs, const Any* lhs, const Any* prhs,
                          const Any* rhs, uint32_t relation, int32_t r);
  virtual int32_t compare(const Any* lhs, const Any* rhs, uint32_t relation = 0,
                          int32_t r = 0);

  virtual bool isRelationIgnored(uint32_t relation);

  cache_t& getCache() { return m_cache; }
  const cache_t& getCache() const { return m_cache; }

  const Any* getFailedLhs() const { return m_failedLhs; }
  const Any* getFailedRhs() const { return m_failedRhs; }
  uint32_t getFailedRelation() const { return m_relation; }

 private:
  template <typename T>
  int32_t compareT(const Any* plhs, const std::vector<T*>* lhs, const Any* prhs,
                   const std::vector<T*>* rhs, uint32_t relation, int32_t r);

 protected:
  bool setFailed(const Any* lhs, const Any* rhs, uint32_t relation,
                 bool force = false);

  // clang-format off
// <UHDM_COMPARER_OBJECT_IMPLEMENTATIONS>
  // clang-format on

 public:
  // clang-format off
// <UHDM_COMPARER_COLLECTION_DECLARATIONS>
  // clang-format on

 public:
  UhdmComparer() = default;
  virtual ~UhdmComparer() = default;
  UhdmComparer(const UhdmComparer& rhs) = delete;
  UhdmComparer& operator=(const UhdmComparer& rhs) = delete;

 protected:
  cache_t m_cache;
  callstack_t m_callstack;
  std::set<uint32_t> m_ignoredRelations{vpiType,
                                        vpiBodyStartColumn,
                                        vpiDefFile,
                                        vpiDefLineNo,
                                        vpiEndColumn,
                                        vpiEndLine,
                                        vpiFile,
                                        vpiFullName,
                                        vpiNameStartColumn,
                                        vpiSectionEndColumn,
                                        vpiSectionEndLine,
                                        vpiSectionStartColumn,
                                        vpiSectionStartLine,
                                        vpiSourceEndColumn,
                                        vpiSourceEndLine,
                                        vpiSourceStartColumn,
                                        vpiSourceStartLine,
                                        vpiStartColumn,
                                        vpiStartLine};
  const Any* m_failedLhs = nullptr;
  const Any* m_failedRhs = nullptr;
  uint32_t m_relation = 0;
};
}  // namespace uhdm

UHDM_IMPLEMENT_RTTI_CAST_FUNCTIONS(UhdmComparer_cast, uhdm::UhdmComparer)

#endif  // UHDM_UHDMCOMPARER_H
