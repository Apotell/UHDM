
/*
 Do not modify, auto-generated by script

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   vpi_visitor.cpp
 * Author: alain
 *
 * Created on December 14, 2019, 10:03 PM
 */
#include <uhdm/UhdmVisitor.h>

// Uhdm headers
#include <uhdm/Serializer.h>
#include <uhdm/UhdmListener.h>
#include <uhdm/containers.h>
#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm.h>
#include <uhdm/uhdm_types.h>

// System headers
#include <algorithm>
#include <set>
#include <string>
#include <vector>

namespace uhdm {
constexpr int32_t kLevelIndent = 2;

inline bool UhdmVisitor::isValid(std::string_view s) const {
  return !s.empty() && (s != SymbolFactory::getBadSymbol());
}

std::ostream& UhdmVisitor::appendIndent(uint32_t indent) const {
  return m_out << std::string(indent, ' ');
}

std::ostream& UhdmVisitor::appendObject(const Any* const object,
                                        std::string_view separator) const {
  if (object == nullptr) return m_out;

  m_out << UhdmName(object->getUhdmType()) << separator;
  separator = "";

  if (m_showIds) {
    m_out << separator << "id:" << object->getUhdmId();
    separator = ", ";
  }

  if (std::string_view name = object->getName(); isValid(name)) {
    m_out << separator << name;
    separator = ", ";
  }

  const uint32_t sl = object->getStartLine();
  const uint16_t sc = object->getStartColumn();
  if ((sl != 0) || (sc != 0)) {
    m_out << separator << "sl:(" << sl << "," << sc << ")";
    separator = ", ";
  }

  const uint32_t el = object->getEndLine();
  const uint16_t ec = object->getEndColumn();
  if ((el != 0) || (ec != 0)) {
    m_out << separator << "el:(" << el << "," << ec << ")";
    separator = ", ";
  }

  if ((any_cast<Scope>(object) != nullptr) ||
      (object->getUhdmType() == UhdmType::SourceFile) ||
      (object->getUhdmType() == UhdmType::Udp) ||
      (object->getUhdmType() == UhdmType::PreprocMacroDefinition) ||
      (object->getUhdmType() == UhdmType::PreprocMacroInstance)) {
    if (std::string_view file = object->getFile(); isValid(file)) {
      m_out << separator << "file:" << file;
      separator = ", ";
    }
  }

  return m_out;
}

void UhdmVisitor::visitBaseClass(const Any* const object, uint32_t indent) const {
  appendIndent(indent) << "- ";
  appendObject(object, ": ") << "\n";
  if (const Any *const p = object->getParent()) {
    appendIndent(indent + kLevelIndent) << "parent: ";
    appendObject(p, ", ") << "\n";
  }
}

//<VISITOR_PRIVATE_IMPLEMENTATIONS>

void UhdmVisitor::visitAny(const Any* const object, uint32_t indent) const {
  if (object == nullptr) return;

  switch (object->getUhdmType()) {
//<VISITOR_CASE_STATEMENTS>
  }
}

void UhdmVisitor::visit(const Any* const object) const {
  UhdmListener* const listener = new UhdmListener();
  listener->listenAny(object);

  std::vector<const Any*> visited(listener->getVisited().begin(),
                                  listener->getVisited().end());
  delete listener;

  std::sort(visited.begin(), visited.end(),
            [](const Any* const lhs, const Any* const rhs) {
              int32_t r = static_cast<int32_t>(lhs->getUhdmType()) -
                          static_cast<int32_t>(rhs->getUhdmType());
              if (r == 0) {
                r = static_cast<int32_t>(lhs->getUhdmId()) -
                    static_cast<int32_t>(rhs->getUhdmId());
              }
              return r < 0;
            });

  for (const Any* object : visited) {
    visitAny(object, 0);
  }
}
}  // namespace uhdm
