/*
 Do not modify, auto-generated by cloner.py

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Cloner.cpp
 * Author: hs
 *
 * Created on July 14, 2023, 00:00 AM
 */
#include <uhdm/Cloner.h>
#include <uhdm/uhdm.h>

namespace UHDM {
const any* Cloner::closestObjectOfTypeOnCallstack(UHDM_OBJECT_TYPE type) const {
  for (any_stack_t::const_reverse_iterator it = m_callstack.rbegin(),
                                           end = m_callstack.rend();
       it != end; ++it) {
    if ((*it)->UhdmType() == type) {
      return *it;
    }
  }
  return nullptr;
}

bool Cloner::inCallstackOfType(UHDM_OBJECT_TYPE type) const {
  return (closestObjectOfTypeOnCallstack(type) != nullptr);
}

const design* Cloner::currentDesign() const {
  return static_cast<const design*>(closestObjectOfTypeOnCallstack(uhdmdesign));
}

//<CLONER_IMPLEMENTATIONS>
any* Cloner::cloneAny(const any* source, any* parent) {
  m_callstack.emplace_back(source);
  any* clone = nullptr;
  switch (source->UhdmType()) {
//<CLONER_CLONEANY_CASE_STATEMENTS>
    default:
      break;
  }
  m_callstack.pop_back();
  if (clone != nullptr) m_clonedMap.emplace(clone, source);
  return clone;
}

any* clone_tree(const any* root, Cloner* cloner) {
  return root ? cloner->cloneAny(root, nullptr) : nullptr;
}
}  // namespace UHDM
