/*
 Do not modify, auto-generated by script

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Serializer.cpp
 * Author:
 *
 * Created on October 4, 2021, 10:53 PM
 */
#include <uhdm/Serializer.h>
#include <uhdm/UhdmListener.h>
#include <uhdm/uhdm.h>
#include <uhdm/vpi_visitor.h>

#include <algorithm>
#include <iomanip>
#include <iostream>
#include <map>
#include <string>
#include <vector>

namespace UHDM {

const uint32_t Serializer::kVersion = 1;

void Serializer::GarbageCollect() {
  if (!m_enableGC) return;

  UhdmListener* const listener = new UhdmListener();
  for (auto d : designMaker.objects_) {
    listener->listenDesign(d);
  }

  const AnySet visited(listener->getVisited().begin(),
                       listener->getVisited().end());
  delete listener;

<FACTORY_GC>
}

void DefaultErrorHandler(ErrorType errType, const std::string& errorMsg,
                         const any* object1, const any* object2) {
  std::cerr << errorMsg << std::endl;
}

SymbolId Serializer::MakeSymbol(std::string_view symbol) {
  return symbolMaker.Make(symbol);
}

std::string_view Serializer::GetSymbol(SymbolId id) const {
  return symbolMaker.GetSymbol(id);
}

SymbolId Serializer::GetSymbolId(std::string_view symbol) const {
  return symbolMaker.GetId(symbol);
}

vpiHandle Serializer::MakeUhdmHandle(UHDM_OBJECT_TYPE type,
                                     const void* object) {
  return uhdm_handleMaker.Make(type, object);
}

Serializer::IdMap Serializer::AllObjects() const {
  IdMap idMap;
<CAPNP_ID>
  return idMap;
}

std::string UhdmName(UHDM_OBJECT_TYPE type) {
  switch (type) {
<UHDM_NAME_MAP>
    default: return "NO TYPE";
  }
}

// From uhdm_types.h
std::string VpiTypeName(vpiHandle h) {
  uhdm_handle* handle = (uhdm_handle*)h;
  BaseClass* obj = (BaseClass*)handle->object;
  return UhdmName(obj->UhdmType());
}

std::map<std::string, uint32_t, std::less<>> Serializer::ObjectStats() const {
  std::map<std::string, uint32_t, std::less<>> stats;
<FACTORY_STATS>
  return stats;
}

void Serializer::PrintStats(std::ostream& strm,
                            std::string_view infoText) const {
  strm << "=== UHDM Object Stats Begin (" << infoText << ") ===" << std::endl;
  auto stats = ObjectStats();
  std::vector<std::string_view> names;
  names.reserve(stats.size());
  std::transform(stats.begin(), stats.end(), std::back_inserter(names),
                 [](decltype(stats)::value_type const& pair) {
                   return std::string_view(pair.first);
                 });
  std::sort(names.begin(), names.end());
  for (std::string_view name : names) {
    auto it = stats.find(name);
    if (it->second > 0) {
      // The longest model name is
      // "enum_struct_union_packed_array_typespec_group"
      strm << std::setw(48) << std::left << name << std::setw(8) << std::right
           << it->second << std::endl;
    }
  }
  strm << "=== UHDM Object Stats End ===" << std::endl;
}

bool Serializer::Erase(const BaseClass* p) {
  if (p == nullptr) {
    return true;
  }

  switch (p->UhdmType()) {
<FACTORY_ERASE_OBJECT>
    default: return false;
  }
}

Serializer::~Serializer() { Purge(); }

void Serializer::Purge() {
  anyVectMaker.Purge();
  symbolMaker.Purge();
  uhdm_handleMaker.Purge();
<FACTORY_PURGE>
}

#ifndef SWIG
void Serializer::PushScope(scope* s) { m_scopeStack.emplace_back(s); }
bool Serializer::PopScope(scope* s) {
  if (!m_scopeStack.empty() && (m_scopeStack.back() == s)) {
    m_scopeStack.pop_back();
    return true;
  }
  return false;
}

ScopedScope::ScopedScope(scope* s) : m_scope(s) {
  m_scope->GetSerializer()->PushScope(s);
}

ScopedScope::~ScopedScope() { m_scope->GetSerializer()->PopScope(m_scope); }
#endif

bool BaseClass::SetVpiParent(any* parent, bool force /* = false */) {
#define PARENT_SETTER(type, typedObject, getset, maker)           \
  if ((parentScope != nullptr) && (VpiParent() != parentScope)) { \
    auto* collection = parentScope->getset();                     \
    if (collection == nullptr) {                                  \
      collection = serializer->maker();                           \
      parentScope->getset(collection);                            \
    }                                                             \
    collection->emplace_back(typedObject);                        \
    VpiParent(parentScope);                                       \
  }

  if (this == parent) return false;
  if (VpiParent() == parent) return true;

  Serializer* const serializer = GetSerializer();
  scope* parentScope = any_cast<scope>(parent);
  if (parentScope == nullptr) parentScope = serializer->TopScope();
  if (this == parentScope) return false;

  if ((VpiParent() == nullptr) || force) {
    BaseClass* const obj = this;
    if (property_decl* const objPropertyDecl =
                   any_cast<property_decl>(obj)) {
      PARENT_SETTER(property_decl, objPropertyDecl, Property_decls,
                    MakeProperty_declVec);
    } else if (sequence_decl* const objSequenceDecl =
                   any_cast<sequence_decl>(obj)) {
      PARENT_SETTER(sequence_decl, objSequenceDecl, Sequence_decls,
                    MakeSequence_declVec);
    } else if (concurrent_assertions* const objConcurrentAssertions =
                   any_cast<concurrent_assertions>(obj)) {
      PARENT_SETTER(concurrent_assertions, objConcurrentAssertions,
                    Concurrent_assertions, MakeConcurrent_assertionsVec);
    } else if (named_event* const objNamedEvent = any_cast<named_event>(obj)) {
      PARENT_SETTER(named_event, objNamedEvent, Named_events,
                    MakeNamed_eventVec);
    } else if (named_event_array* const objNamedEventArray =
                   any_cast<named_event_array>(obj)) {
      PARENT_SETTER(named_event_array, objNamedEventArray, Named_event_arrays,
                    MakeNamed_event_arrayVec);
    } else if (variables* const objVariables = any_cast<variables>(obj)) {
      if ((parentScope != nullptr) && (VpiParent() != parentScope)) {
        auto* collection1 = parentScope->Variables();
        if (collection1 == nullptr) {
          collection1 = serializer->MakeVariablesVec();
          parentScope->Variables(collection1);
        }
        collection1->emplace_back(objVariables);

        if (logic_var* const objLogicVar =
                any_cast<logic_var>(objVariables)) {
          auto* collection2 = parentScope->Logic_vars();
          if (collection2 == nullptr) {
            collection2 = serializer->MakeLogic_varVec();
            parentScope->Logic_vars(collection2);
          }
          collection2->emplace_back(objLogicVar);
        }

        if (array_var* const objArrayVar =
                any_cast<array_var>(objVariables)) {
          auto* collection3 = parentScope->Array_vars();
          if (collection3 == nullptr) {
            collection3 = serializer->MakeArray_varVec();
            parentScope->Array_vars(collection3);
          }
          collection3->emplace_back(objArrayVar);
        }

        VpiParent(parentScope);
      }
    } else if (virtual_interface_var* const objVirtualInterfaceVar =
                   any_cast<virtual_interface_var>(obj)) {
      PARENT_SETTER(virtual_interface_var, objVirtualInterfaceVar,
                    Virtual_interface_vars, MakeVirtual_interface_varVec);
    } else if (parameter* const objParameter = any_cast<parameter>(obj)) {
      PARENT_SETTER(parameter, objParameter, Parameters, MakeAnyVec);
    } else if (param_assign* const objParamAssign =
                   any_cast<param_assign>(obj)) {
      PARENT_SETTER(param_assign, objParamAssign, Param_assigns,
                    MakeParam_assignVec);
    } else if (scope* const objScope = any_cast<scope>(obj)) {
      VpiParent(parent);
      if (parentScope != nullptr) {
        auto* collection = parentScope->Scopes();
        if (collection == nullptr) {
          collection = serializer->MakeScopeVec();
          parentScope->Scopes(collection);
        }
        collection->emplace_back(objScope);
      }
    } else if (typespec* const objTypespec = any_cast<typespec>(obj)) {
      PARENT_SETTER(typespec, objTypespec, Typespecs, MakeTypespecVec);
    } else if (let_decl* const objLetdecl = any_cast<let_decl>(obj)) {
      PARENT_SETTER(let_decl, objLetdecl, Let_decls, MakeLet_declVec);
    } else {
      VpiParent(parent);
    }
  }

#undef PARENT_SETTER
  return true;
}
}  // namespace UHDM
