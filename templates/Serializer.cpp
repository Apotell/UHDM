/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Serializer.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#include <vector>
#include <map>
#include "headers/uhdm.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include "UHDM.capnp.h"
#include <capnp/message.h>
#include <capnp/serialize-packed.h>
#include <iostream>


using namespace UHDM;

std::vector<uhdm_handle*> uhdm_handleFactory::objects_;

std::map<BaseClass*, unsigned long> allIds;

Id2SymbolMap id2SymbolMap;

Symbol2IdMap symbol2IdMap;

unsigned long SymbolFactory::idCounter_ = 1;

unsigned long SymbolFactory::make(const std::string& symbol) {
  Symbol2IdMap::iterator itr = symbol2IdMap.find(symbol);
  if (itr == symbol2IdMap.end()) {
    symbol2IdMap.insert(std::make_pair(symbol, idCounter_));
    id2SymbolMap.push_back(symbol);
    idCounter_++;
    unsigned long  tmp = idCounter_ - 1;
    return (tmp);
  } else {
    unsigned long tmp = (*itr).second;
    return tmp;
  }
}

static std::string bad_symbol = "@@BAD_SYMBOL@@";
const std::string& SymbolFactory::getSymbol(unsigned long id) {
   if (id >= id2SymbolMap.size())
    return bad_symbol;
  return id2SymbolMap[id];
}

unsigned long SymbolFactory::getId(const std::string& symbol) {
   Symbol2IdMap::iterator itr = symbol2IdMap.find(symbol);
  if (itr == symbol2IdMap.end()) {
    return 0;
  } else {
    unsigned long tmp = (*itr).second;
    return tmp;
  }
}
 

void setId(BaseClass* p, unsigned long id) {
  allIds.insert(std::make_pair(p, id));
}

static unsigned long incrId = 0;
unsigned long getId(BaseClass* p) {
  std::map<BaseClass*, unsigned long>::iterator itr = allIds.find(p);
  if (itr == allIds.end()) {
    unsigned long tmp = incrId;
    allIds.insert(std::make_pair(p, incrId));
    incrId++;
    return tmp;		  
  } else {
    return (*itr).second;
  }
}

<FACTORIES>

BaseClass* Serializer::getObject(unsigned int objectType, unsigned int index) {
  switch (objectType) {
<FACTORY_OBJECT_TYPE_MAP>
  default:
    return NULL;
  }
  return NULL;
}

void Serializer::purge() {
<FACTORY_PURGE>
}

void Serializer::save(std::string file) {
  int fileid = open(file.c_str(), O_CREAT | O_WRONLY , S_IRWXU);
  ::capnp::MallocMessageBuilder message;
  UhdmRoot::Builder cap_root = message.initRoot<UhdmRoot>();
  unsigned long index = 0;

<CAPNP_ID>
  
  ::capnp::List<Design>::Builder designs = cap_root.initDesigns(designFactory::objects_.size());
  index = 0;
  for (auto design : designFactory::objects_) {
    designs[index].setVpiName(design->get_vpiName());
    index++;
  }
  
<CAPNP_SAVE>
  
  writePackedMessageToFd(fileid, message);   
  close(fileid);
}

const std::vector<vpiHandle> Serializer::restore(std::string file) {
  purge();
  std::vector<vpiHandle> designs;
  int fileid = open(file.c_str(), O_RDONLY);
  ::capnp::PackedFdMessageReader message(fileid);
  UhdmRoot::Reader cap_root = message.getRoot<UhdmRoot>();
  unsigned long index = 0;

<CAPNP_INIT_FACTORIES>  
  
<CAPNP_RESTORE_FACTORIES>  
  
   for (auto d : designFactory::objects_) {
    vpiHandle designH = uhdm_handleFactory::make(uhdmdesign, d);
    designs.push_back(designH);
  }
   
  close(fileid); 
  return designs;
}
