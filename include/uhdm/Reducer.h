// -*- c++ -*-

/*
 Do not modify, auto-generated by cloner.py

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Reducer.h
 * Author: hs
 *
 * Created on November 07, 2024, 00:00 AM
 */
#ifndef UHDM_REDUCER_H
#define UHDM_REDUCER_H

#include <uhdm/Serializer.h>
#include <uhdm/containers.h>
#include <uhdm/Constant.h>
#include <uhdm/uhdm_types.h>
#include <uhdm/UhdmFinder.h>
#include <string>
#include <string_view>

namespace uhdm {
class Serializer;

class Reducer final {
 public:
  explicit Reducer(Serializer* serializer) : m_serializer(serializer) {}
  ~Reducer() = default;
  Reducer(const Reducer& rhs) = delete;
  Reducer& operator=(const Reducer& rhs) = delete;

  void reduce();

 protected:
  void reduce(const ArrayExpr* const object);
  void reduce(const Operation* const object);
  void reduce(const SysFuncCall* const object);

 public:
  Serializer* const m_serializer;
  UHDM::UhdmFinder finder;
  Expr* reduceExpr(const Any* expr, bool& invalidValue, uint32_t lineNumber,
                   const Any* pexpr, bool muteErrors = false);

  const Any* getValue(std::string_view name, uint32_t lineNumber,
                      const Any* pexpr, bool muteErrors = false);

  std::pair<const TaskFunc*, const Scope*> getTaskFunc(std::string_view name,
                                                       const Any* pexpr);

  const Any* getObject(std::string_view name, const Any* pexpr);

  void setRange(const Constant* c, uint16_t lr, uint16_t rr);

 private:
  const Design* getDesign(std::string_view name) const;
  const Package* getPackage(std::string_view name) const;

  bool loopDetected(uint32_t lineNumber);
  const Expr* getComplexValue(const Any* any, std::string_view name) const;

  Module* m_exprEvalPlaceHolder = nullptr;
  std::map<const Any*, Any*> m_swaps;
  Design* m_design = nullptr;
  bool m_unwind = false;
  bool m_checkForLoops = false;
  uint32_t m_stackLevel = 0;
};
}  // namespace uhdm

#endif  // UHDM_REDUCER_H
