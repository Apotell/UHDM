name: 'main'

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
    - master

jobs:
  build:
    name: "${{ matrix.config.artifact-tag }} | ${{ matrix.config.build-type }}"
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: ubuntu-24.04, artifact-tag: ubuntu-gcc, build-type: debug }
        - { os: ubuntu-24.04, artifact-tag: ubuntu-gcc, build-type: release }
        - { os: windows-2022, artifact-tag: windows-cl, build-type: debug }
        - { os: windows-2022, artifact-tag: windows-cl, build-type: release }

    env:
      artifact-name: UHDM_${{ matrix.config.artifact-tag }}_${{ matrix.config.build-type }}_${{ github.run_number }}

    steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        architecture: 'x64'

    - name: Install Core Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qq
        sudo apt install -y g++-11
        sudo apt install -y build-essential
        sudo apt install -y cmake
        sudo apt install -y ninja-build

        python -m pip install orderedmultidict

    - name: Install Core Dependencies
      if: runner.os == 'Windows'
      run: python -m pip install orderedmultidict

    - name: Git pull
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build on Linux
      if: runner.os == 'Linux'
      shell: bash
      env:
        CC: gcc-11
        CXX: g++-11
      run: |
        env
        which cmake && cmake --version
        which ninja && ninja --version
        which $CC && $CC --version
        which $CXX && $CXX --version
        which python && python --version

        if [[ "${{ matrix.config.build-type }}" == "debug" ]]; then
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=out/install -S . -B out/build
        else
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=out/install -S . -B out/build
        fi

        cmake --build out/build -j `nproc`
        cmake --install out/build
        cmake --build out/build --target UHDMUnitTests -j `nproc`
        cmake --build out/build --target test_inst -j `nproc`

        find out/build/bin -name test_inst* -exec {} \;
        cd out/build && ctest -C ${{ matrix.config.build-type }} --output-on-failure

    - name: Build on Windows
      if: runner.os == 'Windows'
      shell: cmd
      env:
        CC: cl
        CXX: cl
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        if %errorlevel% neq 0 exit /b %errorlevel%

        set
        where cmake && cmake --version
        where ninja && ninja --version
        where %CC% && %CC%
        where %CXX% && %CXX%
        where python && python --version

        if "${{ matrix.config.build-type }}" EQU "debug" (
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=out/install -S . -B out/build
        ) else (
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=out/install -S . -B out/build
        )
        if %errorlevel% neq 0 exit /b %errorlevel%

        cmake --build out/build -j %NUMBER_OF_PROCESSORS%
        if %errorlevel% neq 0 exit /b %errorlevel%
        cmake --install out/build
        if %errorlevel% neq 0 exit /b %errorlevel%
        cmake --build out/build --target UHDMUnitTests -j %NUMBER_OF_PROCESSORS%
        if %errorlevel% neq 0 exit /b %errorlevel%
        cmake --build out/build --target test_inst -j %NUMBER_OF_PROCESSORS%
        if %errorlevel% neq 0 exit /b %errorlevel%

        out\\build\\bin\\test_inst.exe
        cd out/build && ctest -C ${{ matrix.config.build-type }} --output-on-failure

    - name: Build compressed artifacts
      if: always()
      shell: bash
      run: |
        cd out
        mv install ${{ env.artifact-name }}
        tar czfp ${{ env.artifact-name }}.tar.gz ${{ env.artifact-name }}

    - name: Archive artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact-name }}
        path: out/${{ env.artifact-name }}.tar.gz
