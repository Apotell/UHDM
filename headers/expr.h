/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   expr.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef EXPR_H
#define EXPR_H

namespace UHDM {

  class expr : public expr_dist {
  public:
    // Implicit constructor used to initialize all members,
    // comment: expr();
    ~expr()  {}
    
    std::string get_vpiDecompile() const { return SymbolFactory::getSymbol(vpiDecompile_); }

    void set_vpiDecompile(std::string data) { vpiDecompile_ = SymbolFactory::make(data); }

    int get_vpiSize() const { return vpiSize_; }

    void set_vpiSize(int data) { vpiSize_ = data; }

    virtual unsigned int getUhdmType() { return uhdmexpr; }   
  private:
    
    unsigned int vpiDecompile_;

    int vpiSize_;

  };

  class exprFactory {
  friend Serializer;
  public:
  static expr* make() {
    expr* obj = new expr();
    objects_.push_back(obj);
    return obj;
  }
  private:
    static std::vector<expr*> objects_;
  };
 	      
  class VectorOfexprFactory {
  friend Serializer;
  public:
  static std::vector<expr*>* make() {
    std::vector<expr*>* obj = new std::vector<expr*>();
    objects_.push_back(obj);
    return obj;
  }
  private:
  static std::vector<std::vector<expr*>*> objects_;
  };

};

#endif

