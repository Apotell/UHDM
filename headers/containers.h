/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   containers.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#include <vector>
#include <unordered_map>

#ifndef CONTAINERS_H
#define CONTAINERS_H

namespace UHDM {
  typedef std::vector<std::string> Id2SymbolMap;
  typedef std::unordered_map<std::string, unsigned long> Symbol2IdMap;

  class interface_tf_decl;
typedef std::vector<interface_tf_decl*> VectorOfinterface_tf_decl;
typedef std::vector<interface_tf_decl*>::iterator VectorOfinterface_tf_declItr;
class modport;
typedef std::vector<modport*> VectorOfmodport;
typedef std::vector<modport*>::iterator VectorOfmodportItr;
class scope;
typedef std::vector<scope*> VectorOfscope;
typedef std::vector<scope*>::iterator VectorOfscopeItr;
class process;
typedef std::vector<process*> VectorOfprocess;
typedef std::vector<process*>::iterator VectorOfprocessItr;
class primitive;
typedef std::vector<primitive*> VectorOfprimitive;
typedef std::vector<primitive*>::iterator VectorOfprimitiveItr;
class primitive_array;
typedef std::vector<primitive_array*> VectorOfprimitive_array;
typedef std::vector<primitive_array*>::iterator VectorOfprimitive_arrayItr;
class port;
typedef std::vector<port*> VectorOfport;
typedef std::vector<port*>::iterator VectorOfportItr;
class interface;
typedef std::vector<interface*> VectorOfinterface;
typedef std::vector<interface*>::iterator VectorOfinterfaceItr;
class interface_array;
typedef std::vector<interface_array*> VectorOfinterface_array;
typedef std::vector<interface_array*>::iterator VectorOfinterface_arrayItr;
class cont_assign;
typedef std::vector<cont_assign*> VectorOfcont_assign;
typedef std::vector<cont_assign*>::iterator VectorOfcont_assignItr;
class module;
typedef std::vector<module*> VectorOfmodule;
typedef std::vector<module*>::iterator VectorOfmoduleItr;
class module_array;
typedef std::vector<module_array*> VectorOfmodule_array;
typedef std::vector<module_array*>::iterator VectorOfmodule_arrayItr;
class mod_path;
typedef std::vector<mod_path*> VectorOfmod_path;
typedef std::vector<mod_path*>::iterator VectorOfmod_pathItr;
class tchk;
typedef std::vector<tchk*> VectorOftchk;
typedef std::vector<tchk*>::iterator VectorOftchkItr;
class def_param;
typedef std::vector<def_param*> VectorOfdef_param;
typedef std::vector<def_param*>::iterator VectorOfdef_paramItr;
class io_decl;
typedef std::vector<io_decl*> VectorOfio_decl;
typedef std::vector<io_decl*>::iterator VectorOfio_declItr;
class alias_stmt;
typedef std::vector<alias_stmt*> VectorOfalias_stmt;
typedef std::vector<alias_stmt*>::iterator VectorOfalias_stmtItr;
class clocking_block;
typedef std::vector<clocking_block*> VectorOfclocking_block;
typedef std::vector<clocking_block*>::iterator VectorOfclocking_blockItr;

};

#endif

