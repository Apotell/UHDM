/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   io_decl.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef IO_DECL_H
#define IO_DECL_H

namespace UHDM {

  class io_decl : public BaseClass {
  public:
    // Implicit constructor used to initialize all members,
    // comment: io_decl();
    ~io_decl() final {}
    
    BaseClass* get_vpiParent() const { return vpiParent_; }

    bool set_vpiParent(BaseClass* data) { vpiParent_ = data; return true;}

    unsigned int get_uhdmParentType() const { return uhdmParentType_; }

    bool set_uhdmParentType(unsigned int data) { uhdmParentType_ = data; return true;}

    std::string get_vpiFile() const { return SymbolFactory::getSymbol(vpiFile_); }

    bool set_vpiFile(std::string data) { vpiFile_ = SymbolFactory::make(data); return true; }

    unsigned int get_vpiLineNo() const { return vpiLineNo_; }

    bool set_vpiLineNo(unsigned int data) { vpiLineNo_ = data; return true;}

    unsigned int get_vpiType() { return vpiIODecl; }

    int get_vpiDirection() const { return vpiDirection_; }

    bool set_vpiDirection(int data) { vpiDirection_ = data; return true;}

    std::string get_vpiName() const { return SymbolFactory::getSymbol(vpiName_); }

    bool set_vpiName(std::string data) { vpiName_ = SymbolFactory::make(data); return true; }

    bool get_vpiScalar() const { return vpiScalar_; }

    bool set_vpiScalar(bool data) { vpiScalar_ = data; return true;}

    bool get_vpiSigned() const { return vpiSigned_; }

    bool set_vpiSigned(bool data) { vpiSigned_ = data; return true;}

    int get_vpiSize() const { return vpiSize_; }

    bool set_vpiSize(int data) { vpiSize_ = data; return true;}

    bool get_vpiVector() const { return vpiVector_; }

    bool set_vpiVector(bool data) { vpiVector_ = data; return true;}

    expr* get_left_expr() const { return left_expr_; }

    bool set_left_expr(expr* data) { left_expr_ = data; return true;}

    expr* get_right_expr() const { return right_expr_; }

    bool set_right_expr(expr* data) { right_expr_ = data; return true;}

    typespec* get_typespecs() const { return typespecs_; }

    bool set_typespecs(typespec* data) { typespecs_ = data; return true;}

    instance* get_instance() const { return instance_; }

    bool set_instance(instance* data) { instance_ = data; return true;}

    task_func* get_task_func() const { return task_func_; }

    bool set_task_func(task_func* data) { task_func_ = data; return true;}

    VectorOfrange* get_ranges() const { return ranges_; }

    bool set_ranges(VectorOfrange* data) { ranges_ = data; return true;}

    udp_defn* get_udp_defn() const { return udp_defn_; }

    bool set_udp_defn(udp_defn* data) { udp_defn_ = data; return true;}

    module* get_module() const { return module_; }

    bool set_module(module* data) { module_ = data; return true;}

    any* get_expr() const { return expr_; }

    bool set_expr(any* data) {if (!ref_obj_interf_net_var_groupGroupCompliant(data)) return false; expr_ = data; return true;}

    virtual unsigned int getUhdmType() { return uhdmio_decl; }   
  private:
    
    BaseClass* vpiParent_;

    unsigned int uhdmParentType_;

    unsigned int vpiFile_;

    unsigned int vpiLineNo_;

    int vpiDirection_;

    unsigned int vpiName_;

    bool vpiScalar_;

    bool vpiSigned_;

    int vpiSize_;

    bool vpiVector_;

    expr* left_expr_;

    expr* right_expr_;

    typespec* typespecs_;

    instance* instance_;

    task_func* task_func_;

    VectorOfrange* ranges_;

    udp_defn* udp_defn_;

    module* module_;

    any* expr_;

  };

  class io_declFactory {
  friend Serializer;
  public:
  static io_decl* make() {
    io_decl* obj = new io_decl();
    objects_.push_back(obj);
    return obj;
  }
  private:
    static std::vector<io_decl*> objects_;
  };
 	      
  class VectorOfio_declFactory {
  friend Serializer;
  public:
  static std::vector<io_decl*>* make() {
    std::vector<io_decl*>* obj = new std::vector<io_decl*>();
    objects_.push_back(obj);
    return obj;
  }
  private:
  static std::vector<std::vector<io_decl*>*> objects_;
  };

};

#endif

