/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   task_func.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef TASK_FUNC_H
#define TASK_FUNC_H

namespace UHDM {

  class task_func : public scope {
  public:
    // Implicit constructor used to initialize all members,
    // comment: task_func();
    ~task_func()  {}
    
    bool get_vpiMethod() const { return vpiMethod_; }

    bool set_vpiMethod(bool data) { vpiMethod_ = data; return true;}

    int get_vpiAccessType() const { return vpiAccessType_; }

    bool set_vpiAccessType(int data) { vpiAccessType_ = data; return true;}

    int get_vpiVisibility() const { return vpiVisibility_; }

    bool set_vpiVisibility(int data) { vpiVisibility_ = data; return true;}

    bool get_vpiVirtual() const { return vpiVirtual_; }

    bool set_vpiVirtual(bool data) { vpiVirtual_ = data; return true;}

    bool get_vpiAutomatic() const { return vpiAutomatic_; }

    bool set_vpiAutomatic(bool data) { vpiAutomatic_ = data; return true;}

    bool get_vpiDPIContext() const { return vpiDPIContext_; }

    bool set_vpiDPIContext(bool data) { vpiDPIContext_ = data; return true;}

    int get_vpiDPICStr() const { return vpiDPICStr_; }

    bool set_vpiDPICStr(int data) { vpiDPICStr_ = data; return true;}

    std::string get_vpiDPICIdentifier() const { return SymbolFactory::getSymbol(vpiDPICIdentifier_); }

    bool set_vpiDPICIdentifier(std::string data) { vpiDPICIdentifier_ = SymbolFactory::make(data); return true; }

    expr* get_left_expr() const { return left_expr_; }

    bool set_left_expr(expr* data) { left_expr_ = data; return true;}

    expr* get_right_expr() const { return right_expr_; }

    bool set_right_expr(expr* data) { right_expr_ = data; return true;}

    stmt* get_stmt() const { return stmt_; }

    bool set_stmt(stmt* data) { stmt_ = data; return true;}

    clocking_block* get_class_defn() const { return class_defn_; }

    bool set_class_defn(clocking_block* data) { class_defn_ = data; return true;}

    ref_obj* get_ref_obj() const { return ref_obj_; }

    bool set_ref_obj(ref_obj* data) { ref_obj_ = data; return true;}

    io_decl* get_io_decl() const { return io_decl_; }

    bool set_io_decl(io_decl* data) { io_decl_ = data; return true;}

    virtual unsigned int getUhdmType() { return uhdmtask_func; }   
  private:
    
    bool vpiMethod_;

    int vpiAccessType_;

    int vpiVisibility_;

    bool vpiVirtual_;

    bool vpiAutomatic_;

    bool vpiDPIContext_;

    int vpiDPICStr_;

    unsigned int vpiDPICIdentifier_;

    expr* left_expr_;

    expr* right_expr_;

    stmt* stmt_;

    clocking_block* class_defn_;

    ref_obj* ref_obj_;

    io_decl* io_decl_;

  };

  class task_funcFactory {
  friend Serializer;
  public:
  static task_func* make() {
    task_func* obj = new task_func();
    objects_.push_back(obj);
    return obj;
  }
  private:
    static std::vector<task_func*> objects_;
  };
 	      
  class VectorOftask_funcFactory {
  friend Serializer;
  public:
  static std::vector<task_func*>* make() {
    std::vector<task_func*>* obj = new std::vector<task_func*>();
    objects_.push_back(obj);
    return obj;
  }
  private:
  static std::vector<std::vector<task_func*>*> objects_;
  };

};

#endif

