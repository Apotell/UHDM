/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   interface.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef INTERFACE_H
#define INTERFACE_H

namespace UHDM {

  class interface : public BaseClass {
  public:
    interface(){}
    ~interface() final {}
    
    BaseClass* get_vpiParent() const { return vpiParent_; }

    void set_vpiParent(BaseClass* data) { vpiParent_ = data; }

    unsigned int get_uhdmParentType() const { return uhdmParentType_; }

    void set_uhdmParentType(unsigned int data) { uhdmParentType_ = data; }

    std::string get_vpiFile() const { return SymbolFactory::getSymbol(vpiFile_); }

    void set_vpiFile(std::string data) { vpiFile_ = SymbolFactory::make(data); }

    unsigned int get_vpiLineNo() const { return vpiLineNo_; }

    void set_vpiLineNo(unsigned int data) { vpiLineNo_ = data; }

    unsigned int get_vpiType() { return vpiInterface; }

    const VectorOfinterface_tf_decl* get_interface_tf_decl() const { return interface_tf_decl_; }

    void set_interface_tf_decl(VectorOfinterface_tf_decl* data) { interface_tf_decl_ = data; }

    const VectorOfmodport* get_modport() const { return modport_; }

    void set_modport(VectorOfmodport* data) { modport_ = data; }

    clocking_block* get_global_clocking() const { return global_clocking_; }

    void set_global_clocking(clocking_block* data) { global_clocking_ = data; }

    clocking_block* get_default_clocking() const { return default_clocking_; }

    void set_default_clocking(clocking_block* data) { default_clocking_ = data; }

  private:
    
    BaseClass* vpiParent_;

    unsigned int uhdmParentType_;

    unsigned int vpiFile_;

    unsigned int vpiLineNo_;

    VectorOfinterface_tf_decl* interface_tf_decl_;

    VectorOfmodport* modport_;

    clocking_block* global_clocking_;

    clocking_block* default_clocking_;

  };

  class interfaceFactory {
  friend Serializer;
  public:
  static interface* make() {
    interface* obj = new interface();
    objects_.push_back(obj);
    return obj;
  }
  private:
    static std::vector<interface*> objects_;
  };
 	      
  class VectorOfinterfaceFactory {
  friend Serializer;
  public:
  static std::vector<interface*>* make() {
    std::vector<interface*>* obj = new std::vector<interface*>();
    objects_.push_back(obj);
    return obj;
  }
  private:
  static std::vector<std::vector<interface*>*> objects_;
  };

};

#endif

