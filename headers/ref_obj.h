/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   ref_obj.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef REF_OBJ_H
#define REF_OBJ_H

namespace UHDM {

  class ref_obj : public BaseClass {
  public:
    // Implicit constructor used to initialize all members,
    // comment: ref_obj();
    ~ref_obj() final {}
    
    BaseClass* get_vpiParent() const { return vpiParent_; }

    bool set_vpiParent(BaseClass* data) { vpiParent_ = data; return true;}

    unsigned int get_uhdmParentType() const { return uhdmParentType_; }

    bool set_uhdmParentType(unsigned int data) { uhdmParentType_ = data; return true;}

    std::string get_vpiFile() const { return SymbolFactory::getSymbol(vpiFile_); }

    bool set_vpiFile(std::string data) { vpiFile_ = SymbolFactory::make(data); return true; }

    unsigned int get_vpiLineNo() const { return vpiLineNo_; }

    bool set_vpiLineNo(unsigned int data) { vpiLineNo_ = data; return true;}

    std::string get_vpiName() const { return SymbolFactory::getSymbol(vpiName_); }

    bool set_vpiName(std::string data) { vpiName_ = SymbolFactory::make(data); return true; }

    std::string get_vpiFullName() const { return SymbolFactory::getSymbol(vpiFullName_); }

    bool set_vpiFullName(std::string data) { vpiFullName_ = SymbolFactory::make(data); return true; }

    std::string get_vpiDefName() const { return SymbolFactory::getSymbol(vpiDefName_); }

    bool set_vpiDefName(std::string data) { vpiDefName_ = SymbolFactory::make(data); return true; }

    bool get_vpiGeneric() const { return vpiGeneric_; }

    bool set_vpiGeneric(bool data) { vpiGeneric_ = data; return true;}

    VectorOfports* get_ports() const { return ports_; }

    bool set_ports(VectorOfports* data) { ports_ = data; return true;}

    typespec* get_typespec() const { return typespec_; }

    bool set_typespec(typespec* data) { typespec_ = data; return true;}

    instance* get_instance() const { return instance_; }

    bool set_instance(instance* data) { instance_ = data; return true;}

    task_func* get_task_func() const { return task_func_; }

    bool set_task_func(task_func* data) { task_func_ = data; return true;}

    any* get_actual_group() const { return actual_group_; }

    bool set_actual_group(any* data) {if (!actual_groupGroupCompliant(data)) return false; actual_group_ = data; return true;}

    unsigned int get_vpiType() { return vpiRefObj; }

    virtual unsigned int getUhdmType() { return uhdmref_obj; }   
  private:
    
    BaseClass* vpiParent_;

    unsigned int uhdmParentType_;

    unsigned int vpiFile_;

    unsigned int vpiLineNo_;

    unsigned int vpiName_;

    unsigned int vpiFullName_;

    unsigned int vpiDefName_;

    bool vpiGeneric_;

    VectorOfports* ports_;

    typespec* typespec_;

    instance* instance_;

    task_func* task_func_;

    any* actual_group_;

  };

  class ref_objFactory {
  friend Serializer;
  public:
  static ref_obj* make() {
    ref_obj* obj = new ref_obj();
    objects_.push_back(obj);
    return obj;
  }
  private:
    static std::vector<ref_obj*> objects_;
  };
 	      
  class VectorOfref_objFactory {
  friend Serializer;
  public:
  static std::vector<ref_obj*>* make() {
    std::vector<ref_obj*>* obj = new std::vector<ref_obj*>();
    objects_.push_back(obj);
    return obj;
  }
  private:
  static std::vector<std::vector<ref_obj*>*> objects_;
  };

};

#endif

