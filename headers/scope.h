/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   scope.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef SCOPE_H
#define SCOPE_H

namespace UHDM {

  class scope : public BaseClass {
  public:
    // Implicit constructor used to initialize all members,
    // comment: scope();
    ~scope()  {}
    
    std::string get_vpiName() const { return SymbolFactory::getSymbol(vpiName_); }

    void set_vpiName(std::string data) { vpiName_ = SymbolFactory::make(data); }

    std::string get_vpiFullName() const { return SymbolFactory::getSymbol(vpiFullName_); }

    void set_vpiFullName(std::string data) { vpiFullName_ = SymbolFactory::make(data); }

    VectorOfconcurrent_assertion* get_concurrent_assertions() const { return concurrent_assertions_; }

    void set_concurrent_assertions(VectorOfconcurrent_assertion* data) { concurrent_assertions_ = data; }

    VectorOfvariables* get_variables() const { return variables_; }

    void set_variables(VectorOfvariables* data) { variables_ = data; }

    VectorOfparameters* get_parameters() const { return parameters_; }

    void set_parameters(VectorOfparameters* data) { parameters_ = data; }

    VectorOfscope* get_scopes() const { return scopes_; }

    void set_scopes(VectorOfscope* data) { scopes_ = data; }

    VectorOftypespec* get_typespecs() const { return typespecs_; }

    void set_typespecs(VectorOftypespec* data) { typespecs_ = data; }

    VectorOfproperty_decl* get_property_decls() const { return property_decls_; }

    void set_property_decls(VectorOfproperty_decl* data) { property_decls_ = data; }

    VectorOfsequence_decl* get_sequence_decls() const { return sequence_decls_; }

    void set_sequence_decls(VectorOfsequence_decl* data) { sequence_decls_ = data; }

    VectorOfnamed_event* get_named_events() const { return named_events_; }

    void set_named_events(VectorOfnamed_event* data) { named_events_ = data; }

    VectorOfnamed_event_array* get_named_event_arrays() const { return named_event_arrays_; }

    void set_named_event_arrays(VectorOfnamed_event_array* data) { named_event_arrays_ = data; }

    VectorOfvirtual_interface_var* get_virtual_interface_vars() const { return virtual_interface_vars_; }

    void set_virtual_interface_vars(VectorOfvirtual_interface_var* data) { virtual_interface_vars_ = data; }

    VectorOflogic_var* get_logic_var() const { return logic_var_; }

    void set_logic_var(VectorOflogic_var* data) { logic_var_ = data; }

    VectorOfarray_var* get_array_var() const { return array_var_; }

    void set_array_var(VectorOfarray_var* data) { array_var_ = data; }

    VectorOfarray_var* get_array_var_mem() const { return array_var_mem_; }

    void set_array_var_mem(VectorOfarray_var* data) { array_var_mem_ = data; }

    VectorOflet_decl* get_let_decls() const { return let_decls_; }

    void set_let_decls(VectorOflet_decl* data) { let_decls_ = data; }

    virtual unsigned int getUhdmType() { return uhdmscope; }   
  private:
    
    unsigned int vpiName_;

    unsigned int vpiFullName_;

    VectorOfconcurrent_assertion* concurrent_assertions_;

    VectorOfvariables* variables_;

    VectorOfparameters* parameters_;

    VectorOfscope* scopes_;

    VectorOftypespec* typespecs_;

    VectorOfproperty_decl* property_decls_;

    VectorOfsequence_decl* sequence_decls_;

    VectorOfnamed_event* named_events_;

    VectorOfnamed_event_array* named_event_arrays_;

    VectorOfvirtual_interface_var* virtual_interface_vars_;

    VectorOflogic_var* logic_var_;

    VectorOfarray_var* array_var_;

    VectorOfarray_var* array_var_mem_;

    VectorOflet_decl* let_decls_;

  };

  class scopeFactory {
  friend Serializer;
  public:
  static scope* make() {
    scope* obj = new scope();
    objects_.push_back(obj);
    return obj;
  }
  private:
    static std::vector<scope*> objects_;
  };
 	      
  class VectorOfscopeFactory {
  friend Serializer;
  public:
  static std::vector<scope*>* make() {
    std::vector<scope*>* obj = new std::vector<scope*>();
    objects_.push_back(obj);
    return obj;
  }
  private:
  static std::vector<std::vector<scope*>*> objects_;
  };

};

#endif

