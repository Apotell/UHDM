/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   program.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef PROGRAM_H
#define PROGRAM_H

namespace UHDM {

  class program : public instance {
  public:
    // Implicit constructor used to initialize all members,
    // comment: program();
    ~program() final {}
    
    BaseClass* get_vpiParent() const { return vpiParent_; }

    bool set_vpiParent(BaseClass* data) { vpiParent_ = data; return true;}

    unsigned int get_uhdmParentType() const { return uhdmParentType_; }

    bool set_uhdmParentType(unsigned int data) { uhdmParentType_ = data; return true;}

    std::string get_vpiFile() const { return SymbolFactory::getSymbol(vpiFile_); }

    bool set_vpiFile(std::string data) { vpiFile_ = SymbolFactory::make(data); return true; }

    unsigned int get_vpiLineNo() const { return vpiLineNo_; }

    bool set_vpiLineNo(unsigned int data) { vpiLineNo_ = data; return true;}

    unsigned int get_vpiIndex() const { return vpiIndex_; }

    bool set_vpiIndex(unsigned int data) { vpiIndex_ = data; return true;}

    unsigned int get_vpiType() { return vpiProgram; }

    instance_array* get_instance_array() const { return instance_array_; }

    bool set_instance_array(instance_array* data) { instance_array_ = data; return true;}

    expr_dist* get_expr_dist() const { return expr_dist_; }

    bool set_expr_dist(expr_dist* data) { expr_dist_ = data; return true;}

    VectorOfprocess* get_process() const { return process_; }

    bool set_process(VectorOfprocess* data) { process_ = data; return true;}

    clocking_block* get_default_clocking() const { return default_clocking_; }

    bool set_default_clocking(clocking_block* data) { default_clocking_ = data; return true;}

    VectorOfinterface* get_interfaces() const { return interfaces_; }

    bool set_interfaces(VectorOfinterface* data) { interfaces_ = data; return true;}

    VectorOfinterface_array* get_interface_arrays() const { return interface_arrays_; }

    bool set_interface_arrays(VectorOfinterface_array* data) { interface_arrays_ = data; return true;}

    VectorOfcont_assign* get_cont_assigns() const { return cont_assigns_; }

    bool set_cont_assigns(VectorOfcont_assign* data) { cont_assigns_ = data; return true;}

    VectorOfclocking_block* get_clocking_blocks() const { return clocking_blocks_; }

    bool set_clocking_blocks(VectorOfclocking_block* data) { clocking_blocks_ = data; return true;}

    virtual unsigned int getUhdmType() { return uhdmprogram; }   
  private:
    
    BaseClass* vpiParent_;

    unsigned int uhdmParentType_;

    unsigned int vpiFile_;

    unsigned int vpiLineNo_;

    unsigned int vpiIndex_;

    instance_array* instance_array_;

    expr_dist* expr_dist_;

    VectorOfprocess* process_;

    clocking_block* default_clocking_;

    VectorOfinterface* interfaces_;

    VectorOfinterface_array* interface_arrays_;

    VectorOfcont_assign* cont_assigns_;

    VectorOfclocking_block* clocking_blocks_;

  };

  class programFactory {
  friend Serializer;
  public:
  static program* make() {
    program* obj = new program();
    objects_.push_back(obj);
    return obj;
  }
  private:
    static std::vector<program*> objects_;
  };
 	      
  class VectorOfprogramFactory {
  friend Serializer;
  public:
  static std::vector<program*>* make() {
    std::vector<program*>* obj = new std::vector<program*>();
    objects_.push_back(obj);
    return obj;
  }
  private:
  static std::vector<std::vector<program*>*> objects_;
  };

};

#endif

