%module uhdm
/* 
Everithing in the %{ ... %} block is simply copied verbatim to the resulting wraper file created by swig.
It is not parsed or interpreted by swig
*/
%{
#include <stdarg.h>
#include "vpi_user.h"
#include "sv_vpi_user.h"
#include "uhdm_vpi_user.h"
#include "swig_main.h"
#include "Serializer.h"
#include "BaseClass.h"

#include "attribute.h"
#include "virtual_interface_var.h"
#include "let_decl.h"
#include "assertion.h"
#include "stmt.h"
#include "property_inst_spec_group.h"
#include "concurrent_assertions.h"
#include "process_stmt.h"
#include "always.h"
#include "final_stmt.h"
#include "initial.h"
#include "atomic_stmt.h"
#include "delay_control.h"
#include "delay_term.h"
#include "expr_sequence_inst_named_event_group.h"
#include "event_control.h"
#include "repeat_control.h"
#include "parameters.h"
#include "instance_item.h"
#include "scope.h"
#include "begin.h"
#include "named_begin.h"
#include "named_fork.h"
#include "fork_stmt.h"
#include "for_stmt.h"
#include "if_stmt.h"
#include "event_stmt.h"
#include "thread_obj.h"
#include "forever_stmt.h"
#include "expr_sequence_inst_group.h"
#include "waits.h"
#include "wait_stmt.h"
#include "wait_fork.h"
#include "ordered_wait.h"
#include "task_func_named_begin_fork_group.h"
#include "disables.h"
#include "disable.h"
#include "disable_fork.h"
#include "continue_stmt.h"
#include "break_stmt.h"
#include "return_stmt.h"
#include "while_stmt.h"
#include "repeat.h"
#include "do_while.h"
#include "if_else.h"
#include "case_stmt.h"
#include "force.h"
#include "assign_stmt.h"
#include "deassign.h"
#include "release.h"
#include "null_stmt.h"
#include "expect_stmt.h"
#include "variables_operation_group.h"
#include "foreach_stmt.h"
#include "interf_prog_mod_group.h"
#include "gen_scope.h"
#include "gen_var.h"
#include "gen_scope_array.h"
#include "expr_dist.h"
#include "assert_stmt.h"
#include "cover.h"
#include "assume.h"
#include "restrict.h"
#include "immediate_assert.h"
#include "immediate_assume.h"
#include "immediate_cover.h"
#include "expr.h"
#include "pattern.h"
#include "pattern_expr_group.h"
#include "case_item.h"
#include "interface_expr.h"
#include "expr_interf_expr_group.h"
#include "assignment.h"
#include "any_pattern.h"
#include "tagged_pattern.h"
#include "struct_pattern.h"
#include "unsupported_expr.h"
#include "unsupported_stmt.h"
#include "include_file_info.h"
#include "sequence_expr_group.h"
#include "sequence_expr_multiclock_group.h"
#include "named_event_sequence_expr_group.h"
#include "sequence_inst.h"
#include "seq_formal_decl.h"
#include "sequence_decl.h"
#include "property_expr_group.h"
#include "property_expr_named_event_group.h"
#include "prop_formal_decl.h"
#include "property_inst.h"
#include "property_spec.h"
#include "property_decl.h"
#include "clocked_property.h"
#include "case_property_item.h"
#include "case_property.h"
#include "multiclock_sequence_expr.h"
#include "clocked_seq.h"
#include "simple_expr_use_group.h"
#include "simple_expr.h"
#include "constant.h"
#include "let_expr.h"
#include "operand_group.h"
#include "operation.h"
#include "part_select.h"
#include "indexed_part_select.h"
#include "actual_group.h"
#include "ref_obj.h"
#include "var_select.h"
#include "bit_select.h"
#include "variable_drivers_group.h"
#include "variable_loads_group.h"
#include "variables.h"
#include "hier_path.h"
#include "ref_var.h"
#include "short_real_var.h"
#include "real_var.h"
#include "byte_var.h"
#include "short_int_var.h"
#include "int_var.h"
#include "long_int_var.h"
#include "integer_var.h"
#include "time_var.h"
#include "array_var.h"
#include "array_expr.h"
#include "reg_array.h"
#include "reg.h"
#include "enum_struct_union_packed_var_group.h"
#include "packed_array_var.h"
#include "bit_var.h"
#include "logic_var.h"
#include "struct_var.h"
#include "union_var.h"
#include "enum_var.h"
#include "string_var.h"
#include "chandle_var.h"
#include "var_bit.h"
#include "task_func.h"
#include "task.h"
#include "function.h"
#include "modport.h"
#include "interface_tf_decl.h"
#include "cont_assign.h"
#include "cont_assign_bit.h"
#include "expr_ref_obj_group.h"
#include "ports.h"
#include "port.h"
#include "port_bit.h"
#include "checker_port.h"
#include "checker_inst_port.h"
#include "primitive.h"
#include "gate.h"
#include "switch_tran.h"
#include "udp.h"
#include "mod_path.h"
#include "expr_tchk_term_group.h"
#include "tchk.h"
#include "range.h"
#include "udp_defn.h"
#include "table_entry.h"
#include "ref_obj_interf_net_var_group.h"
#include "io_decl.h"
#include "alias_stmt.h"
#include "clocking_block.h"
#include "nets_vars_ref_obj_group.h"
#include "clocking_io_decl.h"
#include "expr_typespec_group.h"
#include "param_assign.h"
#include "instance_array.h"
#include "interface_array.h"
#include "program_array.h"
#include "module_array.h"
#include "primitive_array.h"
#include "gate_array.h"
#include "switch_array.h"
#include "udp_array.h"
#include "typespec.h"
#include "net_drivers.h"
#include "net_loads.h"
#include "prim_term.h"
#include "path_term.h"
#include "tchk_term.h"
#include "nets.h"
#include "net_bit.h"
#include "net.h"
#include "struct_net.h"
#include "enum_net.h"
#include "integer_net.h"
#include "time_net.h"
#include "logic_net.h"
#include "array_net.h"
#include "enum_struct_packed_net_group.h"
#include "packed_array_net.h"
#include "event_typespec.h"
#include "named_event.h"
#include "named_event_array.h"
#include "parameter.h"
#include "def_param.h"
#include "spec_param.h"
#include "class_typespec.h"
#include "extends.h"
#include "class_defn.h"
#include "class_obj.h"
#include "class_var.h"
#include "instance.h"
#include "interface_inst.h"
#include "program.h"
#include "package.h"
#include "module_inst.h"
#include "checker_decl.h"
#include "checker_inst.h"
#include "short_real_typespec.h"
#include "real_typespec.h"
#include "byte_typespec.h"
#include "short_int_typespec.h"
#include "int_typespec.h"
#include "long_int_typespec.h"
#include "integer_typespec.h"
#include "time_typespec.h"
#include "enum_typespec.h"
#include "string_typespec.h"
#include "chandle_typespec.h"
#include "module_typespec.h"
#include "struct_typespec.h"
#include "union_typespec.h"
#include "logic_typespec.h"
#include "enum_struct_union_packed_array_typespec_group.h"
#include "packed_array_typespec.h"
#include "array_typespec.h"
#include "void_typespec.h"
#include "unsupported_typespec.h"
#include "sequence_typespec.h"
#include "property_typespec.h"
#include "interface_typespec.h"
#include "type_parameter.h"
#include "typespec_member.h"
#include "enum_const.h"
#include "bit_typespec.h"
#include "tf_call_args.h"
#include "tf_call.h"
#include "user_systf.h"
#include "sys_func_task_call_group.h"
#include "sys_func_call.h"
#include "sys_task_call.h"
#include "expr_constr_group.h"
#include "method_func_task_call_group.h"
#include "method_func_call.h"
#include "method_task_call.h"
#include "func_call.h"
#include "task_call.h"
#include "constraint_expr.h"
#include "constraint_ordering.h"
#include "constraint_item_group.h"
#include "constraint.h"
#include "import_typespec.h"
#include "expr_range_group.h"
#include "dist_item.h"
#include "distribution.h"
#include "implication.h"
#include "constr_if.h"
#include "constr_if_else.h"
#include "constr_foreach.h"
#include "design.h"



%}
%include "std_vector.i"
%include "std_string.i"

/* some api function using va_list are exclude using #ifndef SWIG/#endif */
%include "vpi_user.h"
%include "sv_vpi_user.h"
%include "uhdm_vpi_user.h"
/*
namespace UHDM {
  class Serializer{};
}
*/


%include "Serializer.h"
%include "BaseClass.i"

%include "uhdm_swig_type.i"


%include stl.i
namespace std {
  %template(vpiHandleVector) vector<vpiHandle>;
}

%insert("header") %{
using namespace UHDM;
%}

%include "swig_main.h"
