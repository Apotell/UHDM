/*
 Do not modify, auto-generated by cloner.py

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Reducer.cpp
 * Author: hs
 *
 * Created on November 07, 2024, 00:00 AM
 */

#include <uhdm/ExprEval.h>
#include <uhdm/Reducer.h>
#include <uhdm/uhdm.h>

#include <algorithm>
#include <deque>

namespace StringUtils {
// Tokenize "str" at "multichar_separator"; store in "result" array.
std::vector<std::string_view> &tokenizeMulti(
    std::string_view str, std::string_view multichar_separator,
    std::vector<std::string_view> &result) {
  if (str.empty()) return result;

  size_t start = 0;
  size_t end = 0;
  const size_t sepSize = multichar_separator.size();
  const size_t stringSize = str.size();
  for (size_t i = 0; i < stringSize; i++) {
    bool isSeparator = true;
    for (size_t j = 0; j < sepSize; j++) {
      if (i + j >= stringSize) break;
      if (str[i + j] != multichar_separator[j]) {
        isSeparator = false;
        break;
      }
    }
    if (isSeparator) {
      result.emplace_back(str.data() + start, end - start);
      start = end = end + sepSize;
      i = i + sepSize - 1;
    } else {
      ++end;
    }
  }
  result.emplace_back(str.data() + start, end - start);
  return result;
}

}  // namespace StringUtils

namespace uhdm {

template <typename T>
inline const T *getNamedObject(const Factory::objects_t &objects,
                               std::string_view name) {
  Factory::objects_t::const_iterator it = std::find_if(
      objects.cbegin(), objects.cend(),
      [&name](const Any *object) { return object->getName() == name; });
  return (it == objects.cend()) ? nullptr : any_cast<T>(*it);
}

template <typename T>
inline const T *getParentOfType(const Any *object) {
  const Any *p = object;
  while (p != nullptr) {
    if (const T *const tp = any_cast<T>(p)) {
      return tp;
    }
    p = p->getParent();
  }
  return nullptr;
}

void Reducer::reduce(const ArrayExpr *const object) {
  // Create ExprEval object
  // Evaluate input object
  // If succeeded, replace the input object with a constant object
}

void Reducer::reduce(const Operation *const object) {
  bool bIsInvalid = false;
  if (Any *const updatedExpr =
          reduceExpr(object, bIsInvalid, object->getStartLine(),
                     object->getParent(), false)) {
    if (!bIsInvalid) m_swaps.emplace(object, updatedExpr);
  }
}

std::pair<const TaskFunc *, const Scope *> Reducer::getTaskFunc(
    std::string_view name, const Any *pexpr) {
  std::pair<const TaskFunc *, const Scope *> result = {nullptr, nullptr};
  return result;
}

const Any *Reducer::getObject(std::string_view name, const Any *pexpr) {
  const Any *result = nullptr;
  return result;
}

Expr *Reducer::reduceExpr(const Any *result, bool &invalidValue,
                          uint32_t lineNumber, const Any *pexpr,
                          bool muteErrors) {
  GetObjectFunctor getObjectFunctor =
      [&](std::string_view name, const Any *inst, const Any *pexpr) -> Any * {
    return const_cast<Any *>(getObject(name, pexpr));
  };
  GetObjectFunctor getValueFunctor = [&](std::string_view name, const Any *inst,
                                         const Any *pexpr) -> Any * {
    return (Expr *)getValue(name, lineNumber, (Any *)pexpr, muteErrors);
  };
  GetTaskFuncFunctor getTaskFuncFunctor = [&](std::string_view name,
                                              const Any *inst) -> TaskFunc * {
    auto ret = getTaskFunc(name, pexpr);
    return const_cast<TaskFunc *>(ret.first);
  };

  ExprEval eval(muteErrors);
  eval.setGetObjectFunctor(getObjectFunctor);
  eval.setGetValueFunctor(getValueFunctor);
  eval.setGetTaskFuncFunctor(getTaskFuncFunctor);
  if (m_exprEvalPlaceHolder == nullptr) {
    m_exprEvalPlaceHolder = m_serializer->make<Module>();
    m_exprEvalPlaceHolder->setParamAssigns(
        m_serializer->makeCollection<ParamAssign>());
  } else {
    m_exprEvalPlaceHolder->getParamAssigns()->erase(
        m_exprEvalPlaceHolder->getParamAssigns()->begin(),
        m_exprEvalPlaceHolder->getParamAssigns()->end());
  }
  Expr *res = eval.reduceExpr(result, invalidValue, m_exprEvalPlaceHolder,
                              pexpr, muteErrors);
  // If loop was detected, drop the partially constructed new value!
  return m_unwind ? nullptr : res;
}

void Reducer::setRange(const Constant *c, uint16_t lr, uint16_t rr) {
  if (!c) return;

  // uint16_t lr = val->getLRange();
  // uint16_t rr = val->getRRange();
  if (lr || rr) {
    LogicTypespec *tps = m_serializer->make<LogicTypespec>();
    RefTypespec *tpsRef = m_serializer->make<RefTypespec>();
    tpsRef->setParent(const_cast<Constant *>(c));
    tpsRef->setActual(tps);
    const_cast<Constant *>(c)->setTypespec(tpsRef);
    Range *r = m_serializer->make<Range>();
    r->setParent(tps);
    RangeCollection *ranges = m_serializer->makeCollection<Range>();
    ranges->push_back(r);
    tps->setRanges(ranges);
    Constant *lc = m_serializer->make<Constant>();
    lc->setValue("UINT:" + std::to_string(lr));
    r->setLeftExpr(lc);
    Constant *rc = m_serializer->make<Constant>();
    rc->setValue("UINT:" + std::to_string(rr));
    r->setRightExpr(rc);
  }
}

bool Reducer::loopDetected(uint32_t lineNumber) {
  // @todo: Need to implement loop detection in different way. Currently
  // returning false.
  return false;
}

const Design *Reducer::getDesign(std::string_view name) const {
  Factory *const factory = m_serializer->getFactory<Design>();
  const Factory::objects_t &designs = factory->getObjects();
  if (name.empty() && (designs.size() == 1)) {
    return any_cast<Design>(designs.back());
  }
  return getNamedObject<Design>(designs, name);
}

const Package *Reducer::getPackage(std::string_view name) const {
  Factory *const factory = m_serializer->getFactory<Package>();
  const Factory::objects_t &packages = factory->getObjects();
  return getNamedObject<Package>(packages, name);
}

// getComplexValue(
// map<Scope*, name, expr*>
// iterate thriough scope and it know all the trees and get aal the expression
// then if it is complex then fill the ,map and utilize the lookup form built
// map

const Expr *Reducer::getComplexValue(const Any *any,
                                     std::string_view name) const {
  const Any *p = any;
  while (p != nullptr) {
    if (const Scope *const s = any_cast<Scope>(p)) {
      if (const ParamAssignCollection *param_assigns = s->getParamAssigns()) {
        for (const ParamAssign *param : *param_assigns) {
          if (param && param->getLhs()) {
            if (param->getLhs()->getName() == name) {
              if (const Expr *exp = param->getRhs<Expr>()) {
                return exp;
              }
            }
          }
        }
      }
    }
    p = p->getParent();
  }
  return nullptr;
}

// on the fly just get the expr using name
const Any *Reducer::getValue(std::string_view name, uint32_t lineNumber,
                             const Any *pexpr, bool muteErrors) {
  // Value *sval = nullptr;
  const Any *result = nullptr;
  if (loopDetected(lineNumber)) {
    return nullptr;
  }
  if (m_checkForLoops) {
    m_stackLevel++;
  }
  if (name.find("::") != std::string::npos) {
    std::vector<std::string_view> res;
    StringUtils::tokenizeMulti(name, "::", res);
    if (res.size() > 1) {
      const std::string_view packName = res[0];
      const std::string_view varName = res[1];
      if (const Package *pack = getPackage(packName)) {
        if (const Expr *val = getComplexValue(pack, varName)) {
          result = val;
          if (result->getUhdmType() == UhdmType::Operation) {
            Operation *op = (Operation *)result;
            const Typespec *opts = nullptr;
            if (RefTypespec *rt = op->getTypespec()) {
              opts = rt->getActual();
            }
            /*
            ExprEval eval;
            if (expr *res = eval.flattenPatternAssignments(
                    s, opts, (expr *)result)) {
              if (res->getUhdmType() == uhdmoperation) {
                op->Operands(((operation *)res)->Operands());
              }
            }
            */
          }
        }
        if (result == nullptr) {
          // Need to get input about Value
          // if (Value *sval = pack->getValue(varName)) {
          //  constant *c = s.MakeConstant();
          //  c->VpiValue(sval->uhdmValue());
          //  setRange(c, sval, compileDesign);
          //  c->VpiDecompile(sval->decompiledValue());
          //  c->VpiConstType(sval->vpiValType());
          //  c->VpiSize(sval->getSize());
          //  result = c;
          //}
        }
      }
    }
  }

  if (result == nullptr) {
    if (const Expr *val = getComplexValue(pexpr, name)) {
      result = val;
      if (result->getUhdmType() == UhdmType::Constant) {
        // sval = instance->getValue(name);
        // if (sval && sval->isValid()) {
        //   setRange((constant *)result, sval);
        // }
      }
    }
    if (result == nullptr) {
      // sval = instance->getValue(name);
      // if (sval && sval->isValid()) {
      //   constant *c = s.MakeConstant();
      //   c->VpiValue(sval->uhdmValue());
      //   setRange(c, sval, compileDesign);
      //   c->VpiDecompile(sval->decompiledValue());
      //   c->VpiConstType(sval->vpiValType());
      //   c->VpiSize(sval->getSize());
      //   result = c;
      // }
    }
  }

  if (result) {
    UhdmType resultType = result->getUhdmType();
    if (resultType == UhdmType::Constant) {
    } else if (resultType == UhdmType::RefObj) {
      if (result->getName() != name) {
        if (const Any *tmp =
                getValue(result->getName(), lineNumber, pexpr, muteErrors)) {
          result = tmp;
        }
      }
    } else if (resultType == UhdmType::Operation ||
               resultType == UhdmType::HierPath ||
               resultType == UhdmType::BitSelect ||
               resultType == UhdmType::SysFuncCall) {
      bool invalidValue = false;
      if (const Any *tmp =
              reduceExpr(result, invalidValue, lineNumber, pexpr, muteErrors)) {
        result = tmp;
      }
    } else {
      int32_t setBreakpointHere = 1;
      setBreakpointHere++;
    }
  }
  if (m_checkForLoops) {
    m_stackLevel--;
  }
  return result;
}

void Reducer::reduce() {
  if (Factory *const factory = m_serializer->getFactory<Operation>()) {
    for (const Any *object : factory->getObjects()) {
      reduce(static_cast<const Operation *>(object));
    }
  }

  if (Factory *const factory = m_serializer->getFactory<Design>()) {
    for (Any *object : factory->getObjects()) {
      object->swap(m_swaps);
    }
  }
}

}  // namespace uhdm
