/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Serializer.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#include <vector>
#include <map>
typedef void any;
#include "headers/containers.h"
#include "headers/uhdm.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include "UHDM.capnp.h"
#include <capnp/message.h>
#include <capnp/serialize-packed.h>
#include <iostream>

using namespace UHDM;

const std::vector<vpiHandle> Serializer::restore(std::string file) {
  purge();
  std::vector<vpiHandle> designs;
  int fileid = open(file.c_str(), O_RDONLY);
  ::capnp::PackedFdMessageReader message(fileid);
  UhdmRoot::Reader cap_root = message.getRoot<UhdmRoot>();
  unsigned long index = 0;

  ::capnp::List<::capnp::Text>::Reader symbols = cap_root.getSymbols();
  for (auto symbol : symbols) {
    SymbolFactory::make(symbol);
  }
 

 ::capnp::List<Process>::Reader Processs = cap_root.getFactoryProcess();
 for (unsigned ind = 0; ind < Processs.size(); ind++) {
   setId(processFactory::make(), ind);
 }

 ::capnp::List<Propertydecl>::Reader Propertydecls = cap_root.getFactoryPropertydecl();
 for (unsigned ind = 0; ind < Propertydecls.size(); ind++) {
   setId(property_declFactory::make(), ind);
 }

 ::capnp::List<Sequencedecl>::Reader Sequencedecls = cap_root.getFactorySequencedecl();
 for (unsigned ind = 0; ind < Sequencedecls.size(); ind++) {
   setId(sequence_declFactory::make(), ind);
 }

 ::capnp::List<Virtualinterfacevar>::Reader Virtualinterfacevars = cap_root.getFactoryVirtualinterfacevar();
 for (unsigned ind = 0; ind < Virtualinterfacevars.size(); ind++) {
   setId(virtual_interface_varFactory::make(), ind);
 }

 ::capnp::List<Letdecl>::Reader Letdecls = cap_root.getFactoryLetdecl();
 for (unsigned ind = 0; ind < Letdecls.size(); ind++) {
   setId(let_declFactory::make(), ind);
 }

 ::capnp::List<Begin>::Reader Begins = cap_root.getFactoryBegin();
 for (unsigned ind = 0; ind < Begins.size(); ind++) {
   setId(beginFactory::make(), ind);
 }

 ::capnp::List<Namedbegin>::Reader Namedbegins = cap_root.getFactoryNamedbegin();
 for (unsigned ind = 0; ind < Namedbegins.size(); ind++) {
   setId(named_beginFactory::make(), ind);
 }

 ::capnp::List<Namedfork>::Reader Namedforks = cap_root.getFactoryNamedfork();
 for (unsigned ind = 0; ind < Namedforks.size(); ind++) {
   setId(named_forkFactory::make(), ind);
 }

 ::capnp::List<Forkstmt>::Reader Forkstmts = cap_root.getFactoryForkstmt();
 for (unsigned ind = 0; ind < Forkstmts.size(); ind++) {
   setId(fork_stmtFactory::make(), ind);
 }

 ::capnp::List<Forstmt>::Reader Forstmts = cap_root.getFactoryForstmt();
 for (unsigned ind = 0; ind < Forstmts.size(); ind++) {
   setId(for_stmtFactory::make(), ind);
 }

 ::capnp::List<Foreachstmt>::Reader Foreachstmts = cap_root.getFactoryForeachstmt();
 for (unsigned ind = 0; ind < Foreachstmts.size(); ind++) {
   setId(foreach_stmtFactory::make(), ind);
 }

 ::capnp::List<Genscope>::Reader Genscopes = cap_root.getFactoryGenscope();
 for (unsigned ind = 0; ind < Genscopes.size(); ind++) {
   setId(gen_scopeFactory::make(), ind);
 }

 ::capnp::List<Distribution>::Reader Distributions = cap_root.getFactoryDistribution();
 for (unsigned ind = 0; ind < Distributions.size(); ind++) {
   setId(distributionFactory::make(), ind);
 }

 ::capnp::List<Operation>::Reader Operations = cap_root.getFactoryOperation();
 for (unsigned ind = 0; ind < Operations.size(); ind++) {
   setId(operationFactory::make(), ind);
 }

 ::capnp::List<Refobj>::Reader Refobjs = cap_root.getFactoryRefobj();
 for (unsigned ind = 0; ind < Refobjs.size(); ind++) {
   setId(ref_objFactory::make(), ind);
 }

 ::capnp::List<Task>::Reader Tasks = cap_root.getFactoryTask();
 for (unsigned ind = 0; ind < Tasks.size(); ind++) {
   setId(taskFactory::make(), ind);
 }

 ::capnp::List<Function>::Reader Functions = cap_root.getFactoryFunction();
 for (unsigned ind = 0; ind < Functions.size(); ind++) {
   setId(functionFactory::make(), ind);
 }

 ::capnp::List<Modport>::Reader Modports = cap_root.getFactoryModport();
 for (unsigned ind = 0; ind < Modports.size(); ind++) {
   setId(modportFactory::make(), ind);
 }

 ::capnp::List<Interfacetfdecl>::Reader Interfacetfdecls = cap_root.getFactoryInterfacetfdecl();
 for (unsigned ind = 0; ind < Interfacetfdecls.size(); ind++) {
   setId(interface_tf_declFactory::make(), ind);
 }

 ::capnp::List<Contassign>::Reader Contassigns = cap_root.getFactoryContassign();
 for (unsigned ind = 0; ind < Contassigns.size(); ind++) {
   setId(cont_assignFactory::make(), ind);
 }

 ::capnp::List<Port>::Reader Ports = cap_root.getFactoryPort();
 for (unsigned ind = 0; ind < Ports.size(); ind++) {
   setId(portFactory::make(), ind);
 }

 ::capnp::List<Primitive>::Reader Primitives = cap_root.getFactoryPrimitive();
 for (unsigned ind = 0; ind < Primitives.size(); ind++) {
   setId(primitiveFactory::make(), ind);
 }

 ::capnp::List<Modpath>::Reader Modpaths = cap_root.getFactoryModpath();
 for (unsigned ind = 0; ind < Modpaths.size(); ind++) {
   setId(mod_pathFactory::make(), ind);
 }

 ::capnp::List<Tchk>::Reader Tchks = cap_root.getFactoryTchk();
 for (unsigned ind = 0; ind < Tchks.size(); ind++) {
   setId(tchkFactory::make(), ind);
 }

 ::capnp::List<Defparam>::Reader Defparams = cap_root.getFactoryDefparam();
 for (unsigned ind = 0; ind < Defparams.size(); ind++) {
   setId(def_paramFactory::make(), ind);
 }

 ::capnp::List<Range>::Reader Ranges = cap_root.getFactoryRange();
 for (unsigned ind = 0; ind < Ranges.size(); ind++) {
   setId(rangeFactory::make(), ind);
 }

 ::capnp::List<Udpdefn>::Reader Udpdefns = cap_root.getFactoryUdpdefn();
 for (unsigned ind = 0; ind < Udpdefns.size(); ind++) {
   setId(udp_defnFactory::make(), ind);
 }

 ::capnp::List<Iodecl>::Reader Iodecls = cap_root.getFactoryIodecl();
 for (unsigned ind = 0; ind < Iodecls.size(); ind++) {
   setId(io_declFactory::make(), ind);
 }

 ::capnp::List<Aliasstmt>::Reader Aliasstmts = cap_root.getFactoryAliasstmt();
 for (unsigned ind = 0; ind < Aliasstmts.size(); ind++) {
   setId(alias_stmtFactory::make(), ind);
 }

 ::capnp::List<Clockingblock>::Reader Clockingblocks = cap_root.getFactoryClockingblock();
 for (unsigned ind = 0; ind < Clockingblocks.size(); ind++) {
   setId(clocking_blockFactory::make(), ind);
 }

 ::capnp::List<Paramassign>::Reader Paramassigns = cap_root.getFactoryParamassign();
 for (unsigned ind = 0; ind < Paramassigns.size(); ind++) {
   setId(param_assignFactory::make(), ind);
 }

 ::capnp::List<Interfacearray>::Reader Interfacearrays = cap_root.getFactoryInterfacearray();
 for (unsigned ind = 0; ind < Interfacearrays.size(); ind++) {
   setId(interface_arrayFactory::make(), ind);
 }

 ::capnp::List<Programarray>::Reader Programarrays = cap_root.getFactoryProgramarray();
 for (unsigned ind = 0; ind < Programarrays.size(); ind++) {
   setId(program_arrayFactory::make(), ind);
 }

 ::capnp::List<Modulearray>::Reader Modulearrays = cap_root.getFactoryModulearray();
 for (unsigned ind = 0; ind < Modulearrays.size(); ind++) {
   setId(module_arrayFactory::make(), ind);
 }

 ::capnp::List<Gatearray>::Reader Gatearrays = cap_root.getFactoryGatearray();
 for (unsigned ind = 0; ind < Gatearrays.size(); ind++) {
   setId(gate_arrayFactory::make(), ind);
 }

 ::capnp::List<Switcharray>::Reader Switcharrays = cap_root.getFactorySwitcharray();
 for (unsigned ind = 0; ind < Switcharrays.size(); ind++) {
   setId(switch_arrayFactory::make(), ind);
 }

 ::capnp::List<Udparray>::Reader Udparrays = cap_root.getFactoryUdparray();
 for (unsigned ind = 0; ind < Udparrays.size(); ind++) {
   setId(udp_arrayFactory::make(), ind);
 }

 ::capnp::List<Arraynet>::Reader Arraynets = cap_root.getFactoryArraynet();
 for (unsigned ind = 0; ind < Arraynets.size(); ind++) {
   setId(array_netFactory::make(), ind);
 }

 ::capnp::List<Logicvar>::Reader Logicvars = cap_root.getFactoryLogicvar();
 for (unsigned ind = 0; ind < Logicvars.size(); ind++) {
   setId(logic_varFactory::make(), ind);
 }

 ::capnp::List<Arrayvar>::Reader Arrayvars = cap_root.getFactoryArrayvar();
 for (unsigned ind = 0; ind < Arrayvars.size(); ind++) {
   setId(array_varFactory::make(), ind);
 }

 ::capnp::List<Namedevent>::Reader Namedevents = cap_root.getFactoryNamedevent();
 for (unsigned ind = 0; ind < Namedevents.size(); ind++) {
   setId(named_eventFactory::make(), ind);
 }

 ::capnp::List<Namedeventarray>::Reader Namedeventarrays = cap_root.getFactoryNamedeventarray();
 for (unsigned ind = 0; ind < Namedeventarrays.size(); ind++) {
   setId(named_event_arrayFactory::make(), ind);
 }

 ::capnp::List<Specparam>::Reader Specparams = cap_root.getFactorySpecparam();
 for (unsigned ind = 0; ind < Specparams.size(); ind++) {
   setId(spec_paramFactory::make(), ind);
 }

 ::capnp::List<Classdefn>::Reader Classdefns = cap_root.getFactoryClassdefn();
 for (unsigned ind = 0; ind < Classdefns.size(); ind++) {
   setId(class_defnFactory::make(), ind);
 }

 ::capnp::List<Classtypespec>::Reader Classtypespecs = cap_root.getFactoryClasstypespec();
 for (unsigned ind = 0; ind < Classtypespecs.size(); ind++) {
   setId(class_typespecFactory::make(), ind);
 }

 ::capnp::List<Classobj>::Reader Classobjs = cap_root.getFactoryClassobj();
 for (unsigned ind = 0; ind < Classobjs.size(); ind++) {
   setId(class_objFactory::make(), ind);
 }

 ::capnp::List<Interface>::Reader Interfaces = cap_root.getFactoryInterface();
 for (unsigned ind = 0; ind < Interfaces.size(); ind++) {
   setId(interfaceFactory::make(), ind);
 }

 ::capnp::List<Program>::Reader Programs = cap_root.getFactoryProgram();
 for (unsigned ind = 0; ind < Programs.size(); ind++) {
   setId(programFactory::make(), ind);
 }

 ::capnp::List<Package>::Reader Packages = cap_root.getFactoryPackage();
 for (unsigned ind = 0; ind < Packages.size(); ind++) {
   setId(packageFactory::make(), ind);
 }

 ::capnp::List<Module>::Reader Modules = cap_root.getFactoryModule();
 for (unsigned ind = 0; ind < Modules.size(); ind++) {
   setId(moduleFactory::make(), ind);
 }

 ::capnp::List<Design>::Reader Designs = cap_root.getFactoryDesign();
 for (unsigned ind = 0; ind < Designs.size(); ind++) {
   setId(designFactory::make(), ind);
 }
  
  

 index = 0;
 for (Process::Reader obj : Processs) {
   processFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   processFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   processFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   processFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Propertydecl::Reader obj : Propertydecls) {
   property_declFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   property_declFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   property_declFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   property_declFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Sequencedecl::Reader obj : Sequencedecls) {
   sequence_declFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   sequence_declFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   sequence_declFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   sequence_declFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Virtualinterfacevar::Reader obj : Virtualinterfacevars) {
   virtual_interface_varFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   virtual_interface_varFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   virtual_interface_varFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   virtual_interface_varFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Letdecl::Reader obj : Letdecls) {
   let_declFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   let_declFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   let_declFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   let_declFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Begin::Reader obj : Begins) {
   beginFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   beginFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   beginFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   beginFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    
    if (obj.getStmts().size()) { 
      std::vector<stmt*>* vect = VectorOfstmtFactory::make();
      for (unsigned int ind = 0; ind < obj.getStmts().size(); ind++) {
 	vect->push_back((stmt*)getObject(obj.getStmts()[ind].getType(),obj.getStmts()[ind].getIndex()-1));
    }
      beginFactory::objects_[index]->set_stmts(vect);
    }
    beginFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    beginFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      beginFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      beginFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      beginFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      beginFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      beginFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      beginFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      beginFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      beginFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      beginFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      beginFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      beginFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      beginFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      beginFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      beginFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      beginFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Namedbegin::Reader obj : Namedbegins) {
   named_beginFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   named_beginFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   named_beginFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   named_beginFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    
    if (obj.getStmts().size()) { 
      std::vector<stmt*>* vect = VectorOfstmtFactory::make();
      for (unsigned int ind = 0; ind < obj.getStmts().size(); ind++) {
 	vect->push_back((stmt*)getObject(obj.getStmts()[ind].getType(),obj.getStmts()[ind].getIndex()-1));
    }
      named_beginFactory::objects_[index]->set_stmts(vect);
    }
    named_beginFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    named_beginFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      named_beginFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      named_beginFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      named_beginFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      named_beginFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      named_beginFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      named_beginFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      named_beginFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Namedfork::Reader obj : Namedforks) {
   named_forkFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   named_forkFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   named_forkFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   named_forkFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    named_forkFactory::objects_[index]->set_vpiJoinType(obj.getVpiJoinType());
    
    if (obj.getStmts().size()) { 
      std::vector<stmt*>* vect = VectorOfstmtFactory::make();
      for (unsigned int ind = 0; ind < obj.getStmts().size(); ind++) {
 	vect->push_back((stmt*)getObject(obj.getStmts()[ind].getType(),obj.getStmts()[ind].getIndex()-1));
    }
      named_forkFactory::objects_[index]->set_stmts(vect);
    }
    named_forkFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    named_forkFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      named_forkFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      named_forkFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      named_forkFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      named_forkFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      named_forkFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      named_forkFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      named_forkFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Forkstmt::Reader obj : Forkstmts) {
   fork_stmtFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   fork_stmtFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   fork_stmtFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   fork_stmtFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    fork_stmtFactory::objects_[index]->set_vpiJoinType(obj.getVpiJoinType());
    
    if (obj.getStmts().size()) { 
      std::vector<stmt*>* vect = VectorOfstmtFactory::make();
      for (unsigned int ind = 0; ind < obj.getStmts().size(); ind++) {
 	vect->push_back((stmt*)getObject(obj.getStmts()[ind].getType(),obj.getStmts()[ind].getIndex()-1));
    }
      fork_stmtFactory::objects_[index]->set_stmts(vect);
    }
    fork_stmtFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    fork_stmtFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      fork_stmtFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      fork_stmtFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      fork_stmtFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      fork_stmtFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      fork_stmtFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      fork_stmtFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      fork_stmtFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Forstmt::Reader obj : Forstmts) {
   for_stmtFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   for_stmtFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   for_stmtFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   for_stmtFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    for_stmtFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    for_stmtFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      for_stmtFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      for_stmtFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      for_stmtFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      for_stmtFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      for_stmtFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      for_stmtFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      for_stmtFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Foreachstmt::Reader obj : Foreachstmts) {
   foreach_stmtFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   foreach_stmtFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   foreach_stmtFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   foreach_stmtFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    foreach_stmtFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    foreach_stmtFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      foreach_stmtFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      foreach_stmtFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      foreach_stmtFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      foreach_stmtFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      foreach_stmtFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      foreach_stmtFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      foreach_stmtFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Genscope::Reader obj : Genscopes) {
   gen_scopeFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   gen_scopeFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   gen_scopeFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   gen_scopeFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    gen_scopeFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    gen_scopeFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      gen_scopeFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      gen_scopeFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      gen_scopeFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      gen_scopeFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      gen_scopeFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      gen_scopeFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      gen_scopeFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Distribution::Reader obj : Distributions) {
   distributionFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   distributionFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   distributionFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   distributionFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Operation::Reader obj : Operations) {
   operationFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   operationFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   operationFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   operationFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    operationFactory::objects_[index]->set_vpiOpType(obj.getVpiOpType());
    
    if (obj.getOperands().size()) { 
      std::vector<operand_group*>* vect = VectorOfoperand_groupFactory::make();
      for (unsigned int ind = 0; ind < obj.getOperands().size(); ind++) {
 	vect->push_back((operand_group*)getObject(obj.getOperands()[ind].getType(),obj.getOperands()[ind].getIndex()-1));
    }
      operationFactory::objects_[index]->set_operands(vect);
    }
    operationFactory::objects_[index]->set_vpiDecompile(SymbolFactory::getSymbol(obj.getVpiDecompile()));
    operationFactory::objects_[index]->set_vpiSize(obj.getVpiSize());

   index++;
 }

 index = 0;
 for (Refobj::Reader obj : Refobjs) {
   ref_objFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   ref_objFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   ref_objFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   ref_objFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Task::Reader obj : Tasks) {
   taskFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   taskFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   taskFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   taskFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    taskFactory::objects_[index]->set_vpiMethod(obj.getVpiMethod());
    taskFactory::objects_[index]->set_vpiAccessType(obj.getVpiAccessType());
    taskFactory::objects_[index]->set_vpiVisibility(obj.getVpiVisibility());
    taskFactory::objects_[index]->set_vpiVirtual(obj.getVpiVirtual());
    taskFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    taskFactory::objects_[index]->set_vpiDPIContext(obj.getVpiDPIContext());
    taskFactory::objects_[index]->set_vpiDPICStr(obj.getVpiDPICStr());
    taskFactory::objects_[index]->set_vpiDPICIdentifier(SymbolFactory::getSymbol(obj.getVpiDPICIdentifier()));
     taskFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     taskFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
     taskFactory::objects_[index]->set_stmt((stmt*)getObject(obj.getStmt().getType(),obj.getStmt().getIndex()-1));
   if (obj.getClassdefn()) 
     taskFactory::objects_[index]->set_class_defn(clocking_blockFactory::objects_[obj.getClassdefn()-1]);
   if (obj.getRefobj()) 
     taskFactory::objects_[index]->set_ref_obj(ref_objFactory::objects_[obj.getRefobj()-1]);
   if (obj.getIodecl()) 
     taskFactory::objects_[index]->set_io_decl(io_declFactory::objects_[obj.getIodecl()-1]);
    taskFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    taskFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      taskFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      taskFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      taskFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      taskFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      taskFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      taskFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      taskFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      taskFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      taskFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_instance_items(vect);
    }
    taskFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    taskFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      taskFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      taskFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      taskFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      taskFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      taskFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      taskFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      taskFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      taskFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      taskFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      taskFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Function::Reader obj : Functions) {
   functionFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   functionFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   functionFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   functionFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    functionFactory::objects_[index]->set_vpiSigned(obj.getVpiSigned());
    functionFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
    functionFactory::objects_[index]->set_vpiFuncType(obj.getVpiFuncType());
    functionFactory::objects_[index]->set_vpiMethod(obj.getVpiMethod());
    functionFactory::objects_[index]->set_vpiAccessType(obj.getVpiAccessType());
    functionFactory::objects_[index]->set_vpiVisibility(obj.getVpiVisibility());
    functionFactory::objects_[index]->set_vpiVirtual(obj.getVpiVirtual());
    functionFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    functionFactory::objects_[index]->set_vpiDPIContext(obj.getVpiDPIContext());
    functionFactory::objects_[index]->set_vpiDPICStr(obj.getVpiDPICStr());
    functionFactory::objects_[index]->set_vpiDPICIdentifier(SymbolFactory::getSymbol(obj.getVpiDPICIdentifier()));
     functionFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     functionFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
     functionFactory::objects_[index]->set_stmt((stmt*)getObject(obj.getStmt().getType(),obj.getStmt().getIndex()-1));
   if (obj.getClassdefn()) 
     functionFactory::objects_[index]->set_class_defn(clocking_blockFactory::objects_[obj.getClassdefn()-1]);
   if (obj.getRefobj()) 
     functionFactory::objects_[index]->set_ref_obj(ref_objFactory::objects_[obj.getRefobj()-1]);
   if (obj.getIodecl()) 
     functionFactory::objects_[index]->set_io_decl(io_declFactory::objects_[obj.getIodecl()-1]);
    functionFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    functionFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      functionFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      functionFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      functionFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      functionFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      functionFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      functionFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      functionFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      functionFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      functionFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_instance_items(vect);
    }
    functionFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    functionFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      functionFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      functionFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      functionFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      functionFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      functionFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      functionFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      functionFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      functionFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      functionFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      functionFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Modport::Reader obj : Modports) {
   modportFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   modportFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   modportFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   modportFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    modportFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    
    if (obj.getIodecls().size()) { 
      std::vector<io_decl*>* vect = VectorOfio_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getIodecls().size(); ind++) {
 	vect->push_back(io_declFactory::objects_[obj.getIodecls()[ind]-1]);
    }
      modportFactory::objects_[index]->set_io_decls(vect);
    }
   if (obj.getInterface()) 
     modportFactory::objects_[index]->set_interface(interfaceFactory::objects_[obj.getInterface()-1]);

   index++;
 }

 index = 0;
 for (Interfacetfdecl::Reader obj : Interfacetfdecls) {
   interface_tf_declFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   interface_tf_declFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   interface_tf_declFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   interface_tf_declFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    interface_tf_declFactory::objects_[index]->set_vpiAccessType(obj.getVpiAccessType());
    
    if (obj.getTasks().size()) { 
      std::vector<task*>* vect = VectorOftaskFactory::make();
      for (unsigned int ind = 0; ind < obj.getTasks().size(); ind++) {
 	vect->push_back(taskFactory::objects_[obj.getTasks()[ind]-1]);
    }
      interface_tf_declFactory::objects_[index]->set_tasks(vect);
    }
    
    if (obj.getFunctions().size()) { 
      std::vector<function*>* vect = VectorOffunctionFactory::make();
      for (unsigned int ind = 0; ind < obj.getFunctions().size(); ind++) {
 	vect->push_back(functionFactory::objects_[obj.getFunctions()[ind]-1]);
    }
      interface_tf_declFactory::objects_[index]->set_functions(vect);
    }

   index++;
 }

 index = 0;
 for (Contassign::Reader obj : Contassigns) {
   cont_assignFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   cont_assignFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   cont_assignFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   cont_assignFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Port::Reader obj : Ports) {
   portFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   portFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   portFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   portFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Primitive::Reader obj : Primitives) {
   primitiveFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   primitiveFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   primitiveFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   primitiveFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Modpath::Reader obj : Modpaths) {
   mod_pathFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   mod_pathFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   mod_pathFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   mod_pathFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Tchk::Reader obj : Tchks) {
   tchkFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   tchkFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   tchkFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   tchkFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Defparam::Reader obj : Defparams) {
   def_paramFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   def_paramFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   def_paramFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   def_paramFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Range::Reader obj : Ranges) {
   rangeFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   rangeFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   rangeFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   rangeFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Udpdefn::Reader obj : Udpdefns) {
   udp_defnFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   udp_defnFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   udp_defnFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   udp_defnFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Iodecl::Reader obj : Iodecls) {
   io_declFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   io_declFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   io_declFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   io_declFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    io_declFactory::objects_[index]->set_vpiDirection(obj.getVpiDirection());
    io_declFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    io_declFactory::objects_[index]->set_vpiScalar(obj.getVpiScalar());
    io_declFactory::objects_[index]->set_vpiSigned(obj.getVpiSigned());
    io_declFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
    io_declFactory::objects_[index]->set_vpiVector(obj.getVpiVector());
     io_declFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     io_declFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
     io_declFactory::objects_[index]->set_typespecs((typespec*)getObject(obj.getTypespecs().getType(),obj.getTypespecs().getIndex()-1));
     io_declFactory::objects_[index]->set_instance((instance*)getObject(obj.getInstance().getType(),obj.getInstance().getIndex()-1));
     io_declFactory::objects_[index]->set_task_func((task_func*)getObject(obj.getTaskfunc().getType(),obj.getTaskfunc().getIndex()-1));
    
    if (obj.getRanges().size()) { 
      std::vector<range*>* vect = VectorOfrangeFactory::make();
      for (unsigned int ind = 0; ind < obj.getRanges().size(); ind++) {
 	vect->push_back(rangeFactory::objects_[obj.getRanges()[ind]-1]);
    }
      io_declFactory::objects_[index]->set_ranges(vect);
    }
   if (obj.getUdpdefn()) 
     io_declFactory::objects_[index]->set_udp_defn(udp_defnFactory::objects_[obj.getUdpdefn()-1]);
   if (obj.getModule()) 
     io_declFactory::objects_[index]->set_module(moduleFactory::objects_[obj.getModule()-1]);
    
    if (obj.getRefobjinterfnetvargroup().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getRefobjinterfnetvargroup().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getRefobjinterfnetvargroup()[ind].getType(),obj.getRefobjinterfnetvargroup()[ind].getIndex()-1));
    }
      io_declFactory::objects_[index]->set_ref_obj_interf_net_var_group(vect);
    }

   index++;
 }

 index = 0;
 for (Aliasstmt::Reader obj : Aliasstmts) {
   alias_stmtFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   alias_stmtFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   alias_stmtFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   alias_stmtFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Clockingblock::Reader obj : Clockingblocks) {
   clocking_blockFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   clocking_blockFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   clocking_blockFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   clocking_blockFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    clocking_blockFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    clocking_blockFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      clocking_blockFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      clocking_blockFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      clocking_blockFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      clocking_blockFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      clocking_blockFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      clocking_blockFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      clocking_blockFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Paramassign::Reader obj : Paramassigns) {
   param_assignFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   param_assignFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   param_assignFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   param_assignFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Interfacearray::Reader obj : Interfacearrays) {
   interface_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   interface_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   interface_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   interface_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    
    if (obj.getParamassigns().size()) { 
      std::vector<param_assign*>* vect = VectorOfparam_assignFactory::make();
      for (unsigned int ind = 0; ind < obj.getParamassigns().size(); ind++) {
 	vect->push_back(param_assignFactory::objects_[obj.getParamassigns()[ind]-1]);
    }
      interface_arrayFactory::objects_[index]->set_param_assigns(vect);
    }
    interface_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    interface_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    interface_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     interface_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     interface_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     interface_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      interface_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     interface_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      interface_arrayFactory::objects_[index]->set_modules(vect);
    }

   index++;
 }

 index = 0;
 for (Programarray::Reader obj : Programarrays) {
   program_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   program_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   program_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   program_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    program_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    program_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    program_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     program_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     program_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     program_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      program_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     program_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      program_arrayFactory::objects_[index]->set_modules(vect);
    }

   index++;
 }

 index = 0;
 for (Modulearray::Reader obj : Modulearrays) {
   module_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   module_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   module_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   module_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    
    if (obj.getParamassigns().size()) { 
      std::vector<param_assign*>* vect = VectorOfparam_assignFactory::make();
      for (unsigned int ind = 0; ind < obj.getParamassigns().size(); ind++) {
 	vect->push_back(param_assignFactory::objects_[obj.getParamassigns()[ind]-1]);
    }
      module_arrayFactory::objects_[index]->set_param_assigns(vect);
    }
    module_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    module_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    module_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     module_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     module_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     module_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      module_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     module_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      module_arrayFactory::objects_[index]->set_modules(vect);
    }

   index++;
 }

 index = 0;
 for (Gatearray::Reader obj : Gatearrays) {
   gate_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   gate_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   gate_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   gate_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
     gate_arrayFactory::objects_[index]->set_delay((expr*)getObject(obj.getDelay().getType(),obj.getDelay().getIndex()-1));
    
    if (obj.getPrimitives().size()) { 
      std::vector<primitive*>* vect = VectorOfprimitiveFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrimitives().size(); ind++) {
 	vect->push_back((primitive*)getObject(obj.getPrimitives()[ind].getType(),obj.getPrimitives()[ind].getIndex()-1));
    }
      gate_arrayFactory::objects_[index]->set_primitives(vect);
    }
    gate_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    gate_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    gate_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     gate_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     gate_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     gate_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      gate_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     gate_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      gate_arrayFactory::objects_[index]->set_modules(vect);
    }
    gate_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    gate_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    gate_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     gate_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     gate_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     gate_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      gate_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     gate_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      gate_arrayFactory::objects_[index]->set_modules(vect);
    }

   index++;
 }

 index = 0;
 for (Switcharray::Reader obj : Switcharrays) {
   switch_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   switch_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   switch_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   switch_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
     switch_arrayFactory::objects_[index]->set_delay((expr*)getObject(obj.getDelay().getType(),obj.getDelay().getIndex()-1));
    
    if (obj.getPrimitives().size()) { 
      std::vector<primitive*>* vect = VectorOfprimitiveFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrimitives().size(); ind++) {
 	vect->push_back((primitive*)getObject(obj.getPrimitives()[ind].getType(),obj.getPrimitives()[ind].getIndex()-1));
    }
      switch_arrayFactory::objects_[index]->set_primitives(vect);
    }
    switch_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    switch_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    switch_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     switch_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     switch_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     switch_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      switch_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     switch_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      switch_arrayFactory::objects_[index]->set_modules(vect);
    }
    switch_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    switch_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    switch_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     switch_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     switch_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     switch_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      switch_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     switch_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      switch_arrayFactory::objects_[index]->set_modules(vect);
    }

   index++;
 }

 index = 0;
 for (Udparray::Reader obj : Udparrays) {
   udp_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   udp_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   udp_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   udp_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
     udp_arrayFactory::objects_[index]->set_delay((expr*)getObject(obj.getDelay().getType(),obj.getDelay().getIndex()-1));
    
    if (obj.getPrimitives().size()) { 
      std::vector<primitive*>* vect = VectorOfprimitiveFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrimitives().size(); ind++) {
 	vect->push_back((primitive*)getObject(obj.getPrimitives()[ind].getType(),obj.getPrimitives()[ind].getIndex()-1));
    }
      udp_arrayFactory::objects_[index]->set_primitives(vect);
    }
    udp_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    udp_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    udp_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     udp_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     udp_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     udp_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      udp_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     udp_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      udp_arrayFactory::objects_[index]->set_modules(vect);
    }
    udp_arrayFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    udp_arrayFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    udp_arrayFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
     udp_arrayFactory::objects_[index]->set_expr((expr*)getObject(obj.getExpr().getType(),obj.getExpr().getIndex()-1));
     udp_arrayFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     udp_arrayFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
    
    if (obj.getInstances().size()) { 
      std::vector<instance*>* vect = VectorOfinstanceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstances().size(); ind++) {
 	vect->push_back((instance*)getObject(obj.getInstances()[ind].getType(),obj.getInstances()[ind].getIndex()-1));
    }
      udp_arrayFactory::objects_[index]->set_instances(vect);
    }
   if (obj.getRange()) 
     udp_arrayFactory::objects_[index]->set_range(rangeFactory::objects_[obj.getRange()-1]);
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      udp_arrayFactory::objects_[index]->set_modules(vect);
    }

   index++;
 }

 index = 0;
 for (Arraynet::Reader obj : Arraynets) {
   array_netFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   array_netFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   array_netFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   array_netFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Logicvar::Reader obj : Logicvars) {
   logic_varFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   logic_varFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   logic_varFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   logic_varFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Arrayvar::Reader obj : Arrayvars) {
   array_varFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   array_varFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   array_varFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   array_varFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Namedevent::Reader obj : Namedevents) {
   named_eventFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   named_eventFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   named_eventFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   named_eventFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Namedeventarray::Reader obj : Namedeventarrays) {
   named_event_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   named_event_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   named_event_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   named_event_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Specparam::Reader obj : Specparams) {
   spec_paramFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   spec_paramFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   spec_paramFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   spec_paramFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Classdefn::Reader obj : Classdefns) {
   class_defnFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   class_defnFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   class_defnFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   class_defnFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    class_defnFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    class_defnFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      class_defnFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      class_defnFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      class_defnFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      class_defnFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      class_defnFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      class_defnFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      class_defnFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Classtypespec::Reader obj : Classtypespecs) {
   class_typespecFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   class_typespecFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   class_typespecFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   class_typespecFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    class_typespecFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    class_typespecFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      class_typespecFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      class_typespecFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      class_typespecFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      class_typespecFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      class_typespecFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      class_typespecFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      class_typespecFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Classobj::Reader obj : Classobjs) {
   class_objFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   class_objFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   class_objFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   class_objFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    class_objFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    class_objFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      class_objFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      class_objFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      class_objFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      class_objFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      class_objFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      class_objFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      class_objFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Interface::Reader obj : Interfaces) {
   interfaceFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   interfaceFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   interfaceFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   interfaceFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    interfaceFactory::objects_[index]->set_vpiIndex(obj.getVpiIndex());
     interfaceFactory::objects_[index]->set_expr_dist((expr_dist*)getObject(obj.getExprdist().getType(),obj.getExprdist().getIndex()-1));
     interfaceFactory::objects_[index]->set_instance_array((instance_array*)getObject(obj.getInstancearray().getType(),obj.getInstancearray().getIndex()-1));
    
    if (obj.getProcess().size()) { 
      std::vector<process*>* vect = VectorOfprocessFactory::make();
      for (unsigned int ind = 0; ind < obj.getProcess().size(); ind++) {
 	vect->push_back((process*)getObject(obj.getProcess()[ind].getType(),obj.getProcess()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_process(vect);
    }
    
    if (obj.getInterfacetfdecls().size()) { 
      std::vector<interface_tf_decl*>* vect = VectorOfinterface_tf_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfacetfdecls().size(); ind++) {
 	vect->push_back(interface_tf_declFactory::objects_[obj.getInterfacetfdecls()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_interface_tf_decls(vect);
    }
    
    if (obj.getModports().size()) { 
      std::vector<modport*>* vect = VectorOfmodportFactory::make();
      for (unsigned int ind = 0; ind < obj.getModports().size(); ind++) {
 	vect->push_back(modportFactory::objects_[obj.getModports()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_modports(vect);
    }
   if (obj.getGlobalclocking()) 
     interfaceFactory::objects_[index]->set_global_clocking(clocking_blockFactory::objects_[obj.getGlobalclocking()-1]);
   if (obj.getDefaultclocking()) 
     interfaceFactory::objects_[index]->set_default_clocking(clocking_blockFactory::objects_[obj.getDefaultclocking()-1]);
    
    if (obj.getModpaths().size()) { 
      std::vector<mod_path*>* vect = VectorOfmod_pathFactory::make();
      for (unsigned int ind = 0; ind < obj.getModpaths().size(); ind++) {
 	vect->push_back(mod_pathFactory::objects_[obj.getModpaths()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_mod_paths(vect);
    }
    
    if (obj.getContassigns().size()) { 
      std::vector<cont_assign*>* vect = VectorOfcont_assignFactory::make();
      for (unsigned int ind = 0; ind < obj.getContassigns().size(); ind++) {
 	vect->push_back(cont_assignFactory::objects_[obj.getContassigns()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_cont_assigns(vect);
    }
    
    if (obj.getInterfaces().size()) { 
      std::vector<interface*>* vect = VectorOfinterfaceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfaces().size(); ind++) {
 	vect->push_back(interfaceFactory::objects_[obj.getInterfaces()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_interfaces(vect);
    }
    
    if (obj.getInterfacearrays().size()) { 
      std::vector<interface_array*>* vect = VectorOfinterface_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfacearrays().size(); ind++) {
 	vect->push_back(interface_arrayFactory::objects_[obj.getInterfacearrays()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_interface_arrays(vect);
    }
    interfaceFactory::objects_[index]->set_vpiDefName(SymbolFactory::getSymbol(obj.getVpiDefName()));
    interfaceFactory::objects_[index]->set_vpiArrayMember(obj.getVpiArrayMember());
    interfaceFactory::objects_[index]->set_vpiCellInstance(obj.getVpiCellInstance());
    interfaceFactory::objects_[index]->set_vpiDefNetType(obj.getVpiDefNetType());
    interfaceFactory::objects_[index]->set_vpiDefFile(SymbolFactory::getSymbol(obj.getVpiDefFile()));
    interfaceFactory::objects_[index]->set_vpiDefDelayMode(obj.getVpiDefDelayMode());
    interfaceFactory::objects_[index]->set_vpiProtected(obj.getVpiProtected());
    interfaceFactory::objects_[index]->set_vpiTimePrecision(obj.getVpiTimePrecision());
    interfaceFactory::objects_[index]->set_vpiTimeUnit(obj.getVpiTimeUnit());
    interfaceFactory::objects_[index]->set_vpiUnconnDrive(obj.getVpiUnconnDrive());
    interfaceFactory::objects_[index]->set_vpiLibrary(SymbolFactory::getSymbol(obj.getVpiLibrary()));
    interfaceFactory::objects_[index]->set_vpiCell(SymbolFactory::getSymbol(obj.getVpiCell()));
    interfaceFactory::objects_[index]->set_vpiConfig(SymbolFactory::getSymbol(obj.getVpiConfig()));
    interfaceFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    interfaceFactory::objects_[index]->set_vpiTop(obj.getVpiTop());
    
    if (obj.getTaskfunc().size()) { 
      std::vector<task_func*>* vect = VectorOftask_funcFactory::make();
      for (unsigned int ind = 0; ind < obj.getTaskfunc().size(); ind++) {
 	vect->push_back((task_func*)getObject(obj.getTaskfunc()[ind].getType(),obj.getTaskfunc()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_task_func(vect);
    }
    
    if (obj.getNet().size()) { 
      std::vector<net*>* vect = VectorOfnetFactory::make();
      for (unsigned int ind = 0; ind < obj.getNet().size(); ind++) {
 	vect->push_back((net*)getObject(obj.getNet()[ind].getType(),obj.getNet()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_net(vect);
    }
    
    if (obj.getArraynet().size()) { 
      std::vector<array_net*>* vect = VectorOfarray_netFactory::make();
      for (unsigned int ind = 0; ind < obj.getArraynet().size(); ind++) {
 	vect->push_back((array_net*)getObject(obj.getArraynet()[ind].getType(),obj.getArraynet()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_array_net(vect);
    }
    
    if (obj.getAssertion().size()) { 
      std::vector<assertion*>* vect = VectorOfassertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getAssertion().size(); ind++) {
 	vect->push_back((assertion*)getObject(obj.getAssertion()[ind].getType(),obj.getAssertion()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_assertion(vect);
    }
    
    if (obj.getClassdefn().size()) { 
      std::vector<class_defn*>* vect = VectorOfclass_defnFactory::make();
      for (unsigned int ind = 0; ind < obj.getClassdefn().size(); ind++) {
 	vect->push_back((class_defn*)getObject(obj.getClassdefn()[ind].getType(),obj.getClassdefn()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_class_defn(vect);
    }
     interfaceFactory::objects_[index]->set_instance((instance*)getObject(obj.getInstance().getType(),obj.getInstance().getIndex()-1));
    
    if (obj.getPrograms().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrograms().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getPrograms()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_programs(vect);
    }
    
    if (obj.getProgramarrays().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getProgramarrays().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getProgramarrays()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_program_arrays(vect);
    }
    
    if (obj.getNamedevent().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevent().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevent()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_named_event(vect);
    }
    
    if (obj.getNamedeventarray().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarray().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedeventarray()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_named_event_array(vect);
    }
    
    if (obj.getSpecparam().size()) { 
      std::vector<spec_param*>* vect = VectorOfspec_paramFactory::make();
      for (unsigned int ind = 0; ind < obj.getSpecparam().size(); ind++) {
 	vect->push_back(spec_paramFactory::objects_[obj.getSpecparam()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_spec_param(vect);
    }
   if (obj.getModule()) 
     interfaceFactory::objects_[index]->set_module(moduleFactory::objects_[obj.getModule()-1]);
    interfaceFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    interfaceFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_instance_items(vect);
    }
    interfaceFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    interfaceFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Program::Reader obj : Programs) {
   programFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   programFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   programFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   programFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    programFactory::objects_[index]->set_vpiIndex(obj.getVpiIndex());
     programFactory::objects_[index]->set_instance_array((instance_array*)getObject(obj.getInstancearray().getType(),obj.getInstancearray().getIndex()-1));
     programFactory::objects_[index]->set_expr_dist((expr_dist*)getObject(obj.getExprdist().getType(),obj.getExprdist().getIndex()-1));
    
    if (obj.getProcess().size()) { 
      std::vector<process*>* vect = VectorOfprocessFactory::make();
      for (unsigned int ind = 0; ind < obj.getProcess().size(); ind++) {
 	vect->push_back((process*)getObject(obj.getProcess()[ind].getType(),obj.getProcess()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_process(vect);
    }
   if (obj.getDefaultclocking()) 
     programFactory::objects_[index]->set_default_clocking(clocking_blockFactory::objects_[obj.getDefaultclocking()-1]);
    
    if (obj.getInterfaces().size()) { 
      std::vector<interface*>* vect = VectorOfinterfaceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfaces().size(); ind++) {
 	vect->push_back(interfaceFactory::objects_[obj.getInterfaces()[ind]-1]);
    }
      programFactory::objects_[index]->set_interfaces(vect);
    }
    
    if (obj.getInterfacearrays().size()) { 
      std::vector<interface_array*>* vect = VectorOfinterface_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfacearrays().size(); ind++) {
 	vect->push_back(interface_arrayFactory::objects_[obj.getInterfacearrays()[ind]-1]);
    }
      programFactory::objects_[index]->set_interface_arrays(vect);
    }
    
    if (obj.getContassigns().size()) { 
      std::vector<cont_assign*>* vect = VectorOfcont_assignFactory::make();
      for (unsigned int ind = 0; ind < obj.getContassigns().size(); ind++) {
 	vect->push_back(cont_assignFactory::objects_[obj.getContassigns()[ind]-1]);
    }
      programFactory::objects_[index]->set_cont_assigns(vect);
    }
    
    if (obj.getClockingblocks().size()) { 
      std::vector<clocking_block*>* vect = VectorOfclocking_blockFactory::make();
      for (unsigned int ind = 0; ind < obj.getClockingblocks().size(); ind++) {
 	vect->push_back(clocking_blockFactory::objects_[obj.getClockingblocks()[ind]-1]);
    }
      programFactory::objects_[index]->set_clocking_blocks(vect);
    }
    programFactory::objects_[index]->set_vpiDefName(SymbolFactory::getSymbol(obj.getVpiDefName()));
    programFactory::objects_[index]->set_vpiArrayMember(obj.getVpiArrayMember());
    programFactory::objects_[index]->set_vpiCellInstance(obj.getVpiCellInstance());
    programFactory::objects_[index]->set_vpiDefNetType(obj.getVpiDefNetType());
    programFactory::objects_[index]->set_vpiDefFile(SymbolFactory::getSymbol(obj.getVpiDefFile()));
    programFactory::objects_[index]->set_vpiDefDelayMode(obj.getVpiDefDelayMode());
    programFactory::objects_[index]->set_vpiProtected(obj.getVpiProtected());
    programFactory::objects_[index]->set_vpiTimePrecision(obj.getVpiTimePrecision());
    programFactory::objects_[index]->set_vpiTimeUnit(obj.getVpiTimeUnit());
    programFactory::objects_[index]->set_vpiUnconnDrive(obj.getVpiUnconnDrive());
    programFactory::objects_[index]->set_vpiLibrary(SymbolFactory::getSymbol(obj.getVpiLibrary()));
    programFactory::objects_[index]->set_vpiCell(SymbolFactory::getSymbol(obj.getVpiCell()));
    programFactory::objects_[index]->set_vpiConfig(SymbolFactory::getSymbol(obj.getVpiConfig()));
    programFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    programFactory::objects_[index]->set_vpiTop(obj.getVpiTop());
    
    if (obj.getTaskfunc().size()) { 
      std::vector<task_func*>* vect = VectorOftask_funcFactory::make();
      for (unsigned int ind = 0; ind < obj.getTaskfunc().size(); ind++) {
 	vect->push_back((task_func*)getObject(obj.getTaskfunc()[ind].getType(),obj.getTaskfunc()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_task_func(vect);
    }
    
    if (obj.getNet().size()) { 
      std::vector<net*>* vect = VectorOfnetFactory::make();
      for (unsigned int ind = 0; ind < obj.getNet().size(); ind++) {
 	vect->push_back((net*)getObject(obj.getNet()[ind].getType(),obj.getNet()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_net(vect);
    }
    
    if (obj.getArraynet().size()) { 
      std::vector<array_net*>* vect = VectorOfarray_netFactory::make();
      for (unsigned int ind = 0; ind < obj.getArraynet().size(); ind++) {
 	vect->push_back((array_net*)getObject(obj.getArraynet()[ind].getType(),obj.getArraynet()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_array_net(vect);
    }
    
    if (obj.getAssertion().size()) { 
      std::vector<assertion*>* vect = VectorOfassertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getAssertion().size(); ind++) {
 	vect->push_back((assertion*)getObject(obj.getAssertion()[ind].getType(),obj.getAssertion()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_assertion(vect);
    }
    
    if (obj.getClassdefn().size()) { 
      std::vector<class_defn*>* vect = VectorOfclass_defnFactory::make();
      for (unsigned int ind = 0; ind < obj.getClassdefn().size(); ind++) {
 	vect->push_back((class_defn*)getObject(obj.getClassdefn()[ind].getType(),obj.getClassdefn()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_class_defn(vect);
    }
     programFactory::objects_[index]->set_instance((instance*)getObject(obj.getInstance().getType(),obj.getInstance().getIndex()-1));
    
    if (obj.getPrograms().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrograms().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getPrograms()[ind]-1]);
    }
      programFactory::objects_[index]->set_programs(vect);
    }
    
    if (obj.getProgramarrays().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getProgramarrays().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getProgramarrays()[ind]-1]);
    }
      programFactory::objects_[index]->set_program_arrays(vect);
    }
    
    if (obj.getNamedevent().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevent().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevent()[ind]-1]);
    }
      programFactory::objects_[index]->set_named_event(vect);
    }
    
    if (obj.getNamedeventarray().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarray().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedeventarray()[ind]-1]);
    }
      programFactory::objects_[index]->set_named_event_array(vect);
    }
    
    if (obj.getSpecparam().size()) { 
      std::vector<spec_param*>* vect = VectorOfspec_paramFactory::make();
      for (unsigned int ind = 0; ind < obj.getSpecparam().size(); ind++) {
 	vect->push_back(spec_paramFactory::objects_[obj.getSpecparam()[ind]-1]);
    }
      programFactory::objects_[index]->set_spec_param(vect);
    }
   if (obj.getModule()) 
     programFactory::objects_[index]->set_module(moduleFactory::objects_[obj.getModule()-1]);
    programFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    programFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      programFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      programFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      programFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      programFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      programFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      programFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      programFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      programFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      programFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_instance_items(vect);
    }
    programFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    programFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      programFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      programFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      programFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      programFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      programFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      programFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      programFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      programFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      programFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Package::Reader obj : Packages) {
   packageFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   packageFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   packageFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   packageFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    packageFactory::objects_[index]->set_vpiUnit(obj.getVpiUnit());
    packageFactory::objects_[index]->set_vpiDefName(SymbolFactory::getSymbol(obj.getVpiDefName()));
    packageFactory::objects_[index]->set_vpiArrayMember(obj.getVpiArrayMember());
    packageFactory::objects_[index]->set_vpiCellInstance(obj.getVpiCellInstance());
    packageFactory::objects_[index]->set_vpiDefNetType(obj.getVpiDefNetType());
    packageFactory::objects_[index]->set_vpiDefFile(SymbolFactory::getSymbol(obj.getVpiDefFile()));
    packageFactory::objects_[index]->set_vpiDefDelayMode(obj.getVpiDefDelayMode());
    packageFactory::objects_[index]->set_vpiProtected(obj.getVpiProtected());
    packageFactory::objects_[index]->set_vpiTimePrecision(obj.getVpiTimePrecision());
    packageFactory::objects_[index]->set_vpiTimeUnit(obj.getVpiTimeUnit());
    packageFactory::objects_[index]->set_vpiUnconnDrive(obj.getVpiUnconnDrive());
    packageFactory::objects_[index]->set_vpiLibrary(SymbolFactory::getSymbol(obj.getVpiLibrary()));
    packageFactory::objects_[index]->set_vpiCell(SymbolFactory::getSymbol(obj.getVpiCell()));
    packageFactory::objects_[index]->set_vpiConfig(SymbolFactory::getSymbol(obj.getVpiConfig()));
    packageFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    packageFactory::objects_[index]->set_vpiTop(obj.getVpiTop());
    
    if (obj.getTaskfunc().size()) { 
      std::vector<task_func*>* vect = VectorOftask_funcFactory::make();
      for (unsigned int ind = 0; ind < obj.getTaskfunc().size(); ind++) {
 	vect->push_back((task_func*)getObject(obj.getTaskfunc()[ind].getType(),obj.getTaskfunc()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_task_func(vect);
    }
    
    if (obj.getNet().size()) { 
      std::vector<net*>* vect = VectorOfnetFactory::make();
      for (unsigned int ind = 0; ind < obj.getNet().size(); ind++) {
 	vect->push_back((net*)getObject(obj.getNet()[ind].getType(),obj.getNet()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_net(vect);
    }
    
    if (obj.getArraynet().size()) { 
      std::vector<array_net*>* vect = VectorOfarray_netFactory::make();
      for (unsigned int ind = 0; ind < obj.getArraynet().size(); ind++) {
 	vect->push_back((array_net*)getObject(obj.getArraynet()[ind].getType(),obj.getArraynet()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_array_net(vect);
    }
    
    if (obj.getAssertion().size()) { 
      std::vector<assertion*>* vect = VectorOfassertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getAssertion().size(); ind++) {
 	vect->push_back((assertion*)getObject(obj.getAssertion()[ind].getType(),obj.getAssertion()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_assertion(vect);
    }
    
    if (obj.getClassdefn().size()) { 
      std::vector<class_defn*>* vect = VectorOfclass_defnFactory::make();
      for (unsigned int ind = 0; ind < obj.getClassdefn().size(); ind++) {
 	vect->push_back((class_defn*)getObject(obj.getClassdefn()[ind].getType(),obj.getClassdefn()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_class_defn(vect);
    }
     packageFactory::objects_[index]->set_instance((instance*)getObject(obj.getInstance().getType(),obj.getInstance().getIndex()-1));
    
    if (obj.getPrograms().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrograms().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getPrograms()[ind]-1]);
    }
      packageFactory::objects_[index]->set_programs(vect);
    }
    
    if (obj.getProgramarrays().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getProgramarrays().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getProgramarrays()[ind]-1]);
    }
      packageFactory::objects_[index]->set_program_arrays(vect);
    }
    
    if (obj.getNamedevent().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevent().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevent()[ind]-1]);
    }
      packageFactory::objects_[index]->set_named_event(vect);
    }
    
    if (obj.getNamedeventarray().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarray().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedeventarray()[ind]-1]);
    }
      packageFactory::objects_[index]->set_named_event_array(vect);
    }
    
    if (obj.getSpecparam().size()) { 
      std::vector<spec_param*>* vect = VectorOfspec_paramFactory::make();
      for (unsigned int ind = 0; ind < obj.getSpecparam().size(); ind++) {
 	vect->push_back(spec_paramFactory::objects_[obj.getSpecparam()[ind]-1]);
    }
      packageFactory::objects_[index]->set_spec_param(vect);
    }
   if (obj.getModule()) 
     packageFactory::objects_[index]->set_module(moduleFactory::objects_[obj.getModule()-1]);
    packageFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    packageFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      packageFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      packageFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      packageFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      packageFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      packageFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      packageFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      packageFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      packageFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      packageFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_instance_items(vect);
    }
    packageFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    packageFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      packageFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      packageFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      packageFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      packageFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      packageFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      packageFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      packageFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      packageFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      packageFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Module::Reader obj : Modules) {
   moduleFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   moduleFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   moduleFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   moduleFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    moduleFactory::objects_[index]->set_vpiIndex(obj.getVpiIndex());
    moduleFactory::objects_[index]->set_vpiTopModule(obj.getVpiTopModule());
    moduleFactory::objects_[index]->set_vpiDefDecayTime(obj.getVpiDefDecayTime());
     moduleFactory::objects_[index]->set_expr_dist((expr_dist*)getObject(obj.getExprdist().getType(),obj.getExprdist().getIndex()-1));
     moduleFactory::objects_[index]->set_instance_array((instance_array*)getObject(obj.getInstancearray().getType(),obj.getInstancearray().getIndex()-1));
    
    if (obj.getProcess().size()) { 
      std::vector<process*>* vect = VectorOfprocessFactory::make();
      for (unsigned int ind = 0; ind < obj.getProcess().size(); ind++) {
 	vect->push_back((process*)getObject(obj.getProcess()[ind].getType(),obj.getProcess()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_process(vect);
    }
    
    if (obj.getPrimitives().size()) { 
      std::vector<primitive*>* vect = VectorOfprimitiveFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrimitives().size(); ind++) {
 	vect->push_back((primitive*)getObject(obj.getPrimitives()[ind].getType(),obj.getPrimitives()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_primitives(vect);
    }
    
    if (obj.getPrimitivearrays().size()) { 
      std::vector<primitive_array*>* vect = VectorOfprimitive_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrimitivearrays().size(); ind++) {
 	vect->push_back((primitive_array*)getObject(obj.getPrimitivearrays()[ind].getType(),obj.getPrimitivearrays()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_primitive_arrays(vect);
    }
   if (obj.getGlobalclocking()) 
     moduleFactory::objects_[index]->set_global_clocking(clocking_blockFactory::objects_[obj.getGlobalclocking()-1]);
   if (obj.getDefaultclocking()) 
     moduleFactory::objects_[index]->set_default_clocking(clocking_blockFactory::objects_[obj.getDefaultclocking()-1]);
   if (obj.getModulearray()) 
     moduleFactory::objects_[index]->set_module_array(module_arrayFactory::objects_[obj.getModulearray()-1]);
    
    if (obj.getPorts().size()) { 
      std::vector<port*>* vect = VectorOfportFactory::make();
      for (unsigned int ind = 0; ind < obj.getPorts().size(); ind++) {
 	vect->push_back(portFactory::objects_[obj.getPorts()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_ports(vect);
    }
    
    if (obj.getInterfaces().size()) { 
      std::vector<interface*>* vect = VectorOfinterfaceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfaces().size(); ind++) {
 	vect->push_back(interfaceFactory::objects_[obj.getInterfaces()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_interfaces(vect);
    }
    
    if (obj.getInterfacearrays().size()) { 
      std::vector<interface_array*>* vect = VectorOfinterface_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfacearrays().size(); ind++) {
 	vect->push_back(interface_arrayFactory::objects_[obj.getInterfacearrays()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_interface_arrays(vect);
    }
    
    if (obj.getContassigns().size()) { 
      std::vector<cont_assign*>* vect = VectorOfcont_assignFactory::make();
      for (unsigned int ind = 0; ind < obj.getContassigns().size(); ind++) {
 	vect->push_back(cont_assignFactory::objects_[obj.getContassigns()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_cont_assigns(vect);
    }
    
    if (obj.getModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_modules(vect);
    }
    
    if (obj.getModulearrays().size()) { 
      std::vector<module_array*>* vect = VectorOfmodule_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getModulearrays().size(); ind++) {
 	vect->push_back(module_arrayFactory::objects_[obj.getModulearrays()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_module_arrays(vect);
    }
    
    if (obj.getModpaths().size()) { 
      std::vector<mod_path*>* vect = VectorOfmod_pathFactory::make();
      for (unsigned int ind = 0; ind < obj.getModpaths().size(); ind++) {
 	vect->push_back(mod_pathFactory::objects_[obj.getModpaths()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_mod_paths(vect);
    }
    
    if (obj.getTchks().size()) { 
      std::vector<tchk*>* vect = VectorOftchkFactory::make();
      for (unsigned int ind = 0; ind < obj.getTchks().size(); ind++) {
 	vect->push_back(tchkFactory::objects_[obj.getTchks()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_tchks(vect);
    }
    
    if (obj.getDefparams().size()) { 
      std::vector<def_param*>* vect = VectorOfdef_paramFactory::make();
      for (unsigned int ind = 0; ind < obj.getDefparams().size(); ind++) {
 	vect->push_back(def_paramFactory::objects_[obj.getDefparams()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_def_params(vect);
    }
    
    if (obj.getIodecls().size()) { 
      std::vector<io_decl*>* vect = VectorOfio_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getIodecls().size(); ind++) {
 	vect->push_back(io_declFactory::objects_[obj.getIodecls()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_io_decls(vect);
    }
    
    if (obj.getAliasstmts().size()) { 
      std::vector<alias_stmt*>* vect = VectorOfalias_stmtFactory::make();
      for (unsigned int ind = 0; ind < obj.getAliasstmts().size(); ind++) {
 	vect->push_back(alias_stmtFactory::objects_[obj.getAliasstmts()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_alias_stmts(vect);
    }
    
    if (obj.getClockingblocks().size()) { 
      std::vector<clocking_block*>* vect = VectorOfclocking_blockFactory::make();
      for (unsigned int ind = 0; ind < obj.getClockingblocks().size(); ind++) {
 	vect->push_back(clocking_blockFactory::objects_[obj.getClockingblocks()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_clocking_blocks(vect);
    }
    moduleFactory::objects_[index]->set_vpiDefName(SymbolFactory::getSymbol(obj.getVpiDefName()));
    moduleFactory::objects_[index]->set_vpiArrayMember(obj.getVpiArrayMember());
    moduleFactory::objects_[index]->set_vpiCellInstance(obj.getVpiCellInstance());
    moduleFactory::objects_[index]->set_vpiDefNetType(obj.getVpiDefNetType());
    moduleFactory::objects_[index]->set_vpiDefFile(SymbolFactory::getSymbol(obj.getVpiDefFile()));
    moduleFactory::objects_[index]->set_vpiDefDelayMode(obj.getVpiDefDelayMode());
    moduleFactory::objects_[index]->set_vpiProtected(obj.getVpiProtected());
    moduleFactory::objects_[index]->set_vpiTimePrecision(obj.getVpiTimePrecision());
    moduleFactory::objects_[index]->set_vpiTimeUnit(obj.getVpiTimeUnit());
    moduleFactory::objects_[index]->set_vpiUnconnDrive(obj.getVpiUnconnDrive());
    moduleFactory::objects_[index]->set_vpiLibrary(SymbolFactory::getSymbol(obj.getVpiLibrary()));
    moduleFactory::objects_[index]->set_vpiCell(SymbolFactory::getSymbol(obj.getVpiCell()));
    moduleFactory::objects_[index]->set_vpiConfig(SymbolFactory::getSymbol(obj.getVpiConfig()));
    moduleFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    moduleFactory::objects_[index]->set_vpiTop(obj.getVpiTop());
    
    if (obj.getTaskfunc().size()) { 
      std::vector<task_func*>* vect = VectorOftask_funcFactory::make();
      for (unsigned int ind = 0; ind < obj.getTaskfunc().size(); ind++) {
 	vect->push_back((task_func*)getObject(obj.getTaskfunc()[ind].getType(),obj.getTaskfunc()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_task_func(vect);
    }
    
    if (obj.getNet().size()) { 
      std::vector<net*>* vect = VectorOfnetFactory::make();
      for (unsigned int ind = 0; ind < obj.getNet().size(); ind++) {
 	vect->push_back((net*)getObject(obj.getNet()[ind].getType(),obj.getNet()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_net(vect);
    }
    
    if (obj.getArraynet().size()) { 
      std::vector<array_net*>* vect = VectorOfarray_netFactory::make();
      for (unsigned int ind = 0; ind < obj.getArraynet().size(); ind++) {
 	vect->push_back((array_net*)getObject(obj.getArraynet()[ind].getType(),obj.getArraynet()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_array_net(vect);
    }
    
    if (obj.getAssertion().size()) { 
      std::vector<assertion*>* vect = VectorOfassertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getAssertion().size(); ind++) {
 	vect->push_back((assertion*)getObject(obj.getAssertion()[ind].getType(),obj.getAssertion()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_assertion(vect);
    }
    
    if (obj.getClassdefn().size()) { 
      std::vector<class_defn*>* vect = VectorOfclass_defnFactory::make();
      for (unsigned int ind = 0; ind < obj.getClassdefn().size(); ind++) {
 	vect->push_back((class_defn*)getObject(obj.getClassdefn()[ind].getType(),obj.getClassdefn()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_class_defn(vect);
    }
     moduleFactory::objects_[index]->set_instance((instance*)getObject(obj.getInstance().getType(),obj.getInstance().getIndex()-1));
    
    if (obj.getPrograms().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrograms().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getPrograms()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_programs(vect);
    }
    
    if (obj.getProgramarrays().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getProgramarrays().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getProgramarrays()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_program_arrays(vect);
    }
    
    if (obj.getNamedevent().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevent().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevent()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_named_event(vect);
    }
    
    if (obj.getNamedeventarray().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarray().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedeventarray()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_named_event_array(vect);
    }
    
    if (obj.getSpecparam().size()) { 
      std::vector<spec_param*>* vect = VectorOfspec_paramFactory::make();
      for (unsigned int ind = 0; ind < obj.getSpecparam().size(); ind++) {
 	vect->push_back(spec_paramFactory::objects_[obj.getSpecparam()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_spec_param(vect);
    }
   if (obj.getModule()) 
     moduleFactory::objects_[index]->set_module(moduleFactory::objects_[obj.getModule()-1]);
    moduleFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    moduleFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_instance_items(vect);
    }
    moduleFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    moduleFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    
    if (obj.getConcurrentassertions().size()) { 
      std::vector<concurrent_assertion*>* vect = VectorOfconcurrent_assertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getConcurrentassertions().size(); ind++) {
 	vect->push_back((concurrent_assertion*)getObject(obj.getConcurrentassertions()[ind].getType(),obj.getConcurrentassertions()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_concurrent_assertions(vect);
    }
    
    if (obj.getVariables().size()) { 
      std::vector<variables*>* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      std::vector<parameters*>* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getScopes().size()) { 
      std::vector<scope*>* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScopes().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScopes()[ind].getType(),obj.getScopes()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_scopes(vect);
    }
    
    if (obj.getTypespecs().size()) { 
      std::vector<typespec*>* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespecs().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespecs()[ind].getType(),obj.getTypespecs()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_typespecs(vect);
    }
    
    if (obj.getPropertydecls().size()) { 
      std::vector<property_decl*>* vect = VectorOfproperty_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getPropertydecls().size(); ind++) {
 	vect->push_back(property_declFactory::objects_[obj.getPropertydecls()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_property_decls(vect);
    }
    
    if (obj.getSequencedecls().size()) { 
      std::vector<sequence_decl*>* vect = VectorOfsequence_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getSequencedecls().size(); ind++) {
 	vect->push_back(sequence_declFactory::objects_[obj.getSequencedecls()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_sequence_decls(vect);
    }
    
    if (obj.getNamedevents().size()) { 
      std::vector<named_event*>* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevents().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevents()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_named_events(vect);
    }
    
    if (obj.getNamedeventarrays().size()) { 
      std::vector<named_event_array*>* vect = VectorOfnamed_event_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarrays().size(); ind++) {
 	vect->push_back(named_event_arrayFactory::objects_[obj.getNamedeventarrays()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_named_event_arrays(vect);
    }
    
    if (obj.getVirtualinterfacevars().size()) { 
      std::vector<virtual_interface_var*>* vect = VectorOfvirtual_interface_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getVirtualinterfacevars().size(); ind++) {
 	vect->push_back(virtual_interface_varFactory::objects_[obj.getVirtualinterfacevars()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_virtual_interface_vars(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      std::vector<logic_var*>* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      std::vector<array_var*>* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getLetdecls().size()) { 
      std::vector<let_decl*>* vect = VectorOflet_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getLetdecls().size(); ind++) {
 	vect->push_back(let_declFactory::objects_[obj.getLetdecls()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_let_decls(vect);
    }
    
    if (obj.getInstanceitems().size()) { 
      std::vector<any*>* vect = VectorOfanyFactory::make();
      for (unsigned int ind = 0; ind < obj.getInstanceitems().size(); ind++) {
 	vect->push_back((any*)getObject(obj.getInstanceitems()[ind].getType(),obj.getInstanceitems()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_instance_items(vect);
    }

   index++;
 }

 index = 0;
 for (Design::Reader obj : Designs) {
   designFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   designFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   designFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   designFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    designFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    
    if (obj.getAllModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getAllModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getAllModules()[ind]-1]);
    }
      designFactory::objects_[index]->set_allModules(vect);
    }
    
    if (obj.getTopModules().size()) { 
      std::vector<module*>* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getTopModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getTopModules()[ind]-1]);
    }
      designFactory::objects_[index]->set_topModules(vect);
    }
    
    if (obj.getAllPrograms().size()) { 
      std::vector<program*>* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getAllPrograms().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getAllPrograms()[ind]-1]);
    }
      designFactory::objects_[index]->set_allPrograms(vect);
    }
    
    if (obj.getAllPackages().size()) { 
      std::vector<package*>* vect = VectorOfpackageFactory::make();
      for (unsigned int ind = 0; ind < obj.getAllPackages().size(); ind++) {
 	vect->push_back(packageFactory::objects_[obj.getAllPackages()[ind]-1]);
    }
      designFactory::objects_[index]->set_allPackages(vect);
    }

   index++;
 }
  
  
   for (auto d : designFactory::objects_) {
    vpiHandle designH = uhdm_handleFactory::make(uhdmdesign, d);
    designs.push_back(designH);
  }
   
  close(fileid); 
  return designs;
}

