/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   Serializer.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#include <vector>
#include <map>
#include "headers/uhdm.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include "UHDM.capnp.h"
#include <capnp/message.h>
#include <capnp/serialize-packed.h>
#include <iostream>


using namespace UHDM;

std::vector<uhdm_handle*> uhdm_handleFactory::objects_;

std::map<BaseClass*, unsigned long> allIds;

Id2SymbolMap id2SymbolMap;

Symbol2IdMap symbol2IdMap;

unsigned int SymbolFactory::idCounter_ = 0;

unsigned int SymbolFactory::make(const std::string& symbol) {
  Symbol2IdMap::iterator itr = symbol2IdMap.find(symbol);
  if (itr == symbol2IdMap.end()) {
    symbol2IdMap.insert(std::make_pair(symbol, idCounter_));
    id2SymbolMap.push_back(symbol);
    idCounter_++;
    unsigned int tmp = idCounter_ - 1;
    return (tmp);
  } else {
    unsigned int tmp = (*itr).second;
    return tmp;
  }
}

static std::string bad_symbol = "@@BAD_SYMBOL@@";
const std::string& SymbolFactory::getSymbol(unsigned int id) {
   if (id >= id2SymbolMap.size())
    return bad_symbol;
  return id2SymbolMap[id];
}

unsigned int SymbolFactory::getId(const std::string& symbol) {
   Symbol2IdMap::iterator itr = symbol2IdMap.find(symbol);
  if (itr == symbol2IdMap.end()) {
    return 0;
  } else {
    unsigned int tmp = (*itr).second;
    return tmp;
  }
}
 

void setId(BaseClass* p, unsigned long id) {
  allIds.insert(std::make_pair(p, id));
}

static unsigned long incrId = 0;
unsigned long getId(BaseClass* p) {
  std::map<BaseClass*, unsigned long>::iterator itr = allIds.find(p);
  if (itr == allIds.end()) {
    unsigned long tmp = incrId;
    allIds.insert(std::make_pair(p, incrId));
    incrId++;
    return tmp;		  
  } else {
    return (*itr).second;
  }
}

std::vector<process*> processFactory::objects_;
std::vector<std::vector<process*>*> VectorOfprocessFactory::objects_;
std::vector<std::vector<scope*>*> VectorOfscopeFactory::objects_;
std::vector<begin*> beginFactory::objects_;
std::vector<std::vector<begin*>*> VectorOfbeginFactory::objects_;
std::vector<named_begin*> named_beginFactory::objects_;
std::vector<std::vector<named_begin*>*> VectorOfnamed_beginFactory::objects_;
std::vector<std::vector<expr_dist*>*> VectorOfexpr_distFactory::objects_;
std::vector<std::vector<expr*>*> VectorOfexprFactory::objects_;
std::vector<distribution*> distributionFactory::objects_;
std::vector<std::vector<distribution*>*> VectorOfdistributionFactory::objects_;
std::vector<std::vector<operand_group*>*> VectorOfoperand_groupFactory::objects_;
std::vector<operation*> operationFactory::objects_;
std::vector<std::vector<operation*>*> VectorOfoperationFactory::objects_;
std::vector<ref_obj*> ref_objFactory::objects_;
std::vector<std::vector<ref_obj*>*> VectorOfref_objFactory::objects_;
std::vector<std::vector<variables*>*> VectorOfvariablesFactory::objects_;
std::vector<std::vector<task_func*>*> VectorOftask_funcFactory::objects_;
std::vector<task*> taskFactory::objects_;
std::vector<std::vector<task*>*> VectorOftaskFactory::objects_;
std::vector<function*> functionFactory::objects_;
std::vector<std::vector<function*>*> VectorOffunctionFactory::objects_;
std::vector<modport*> modportFactory::objects_;
std::vector<std::vector<modport*>*> VectorOfmodportFactory::objects_;
std::vector<interface_tf_decl*> interface_tf_declFactory::objects_;
std::vector<std::vector<interface_tf_decl*>*> VectorOfinterface_tf_declFactory::objects_;
std::vector<interface_array*> interface_arrayFactory::objects_;
std::vector<std::vector<interface_array*>*> VectorOfinterface_arrayFactory::objects_;
std::vector<cont_assign*> cont_assignFactory::objects_;
std::vector<std::vector<cont_assign*>*> VectorOfcont_assignFactory::objects_;
std::vector<port*> portFactory::objects_;
std::vector<std::vector<port*>*> VectorOfportFactory::objects_;
std::vector<module_array*> module_arrayFactory::objects_;
std::vector<std::vector<module_array*>*> VectorOfmodule_arrayFactory::objects_;
std::vector<primitive*> primitiveFactory::objects_;
std::vector<std::vector<primitive*>*> VectorOfprimitiveFactory::objects_;
std::vector<primitive_array*> primitive_arrayFactory::objects_;
std::vector<std::vector<primitive_array*>*> VectorOfprimitive_arrayFactory::objects_;
std::vector<mod_path*> mod_pathFactory::objects_;
std::vector<std::vector<mod_path*>*> VectorOfmod_pathFactory::objects_;
std::vector<tchk*> tchkFactory::objects_;
std::vector<std::vector<tchk*>*> VectorOftchkFactory::objects_;
std::vector<def_param*> def_paramFactory::objects_;
std::vector<std::vector<def_param*>*> VectorOfdef_paramFactory::objects_;
std::vector<io_decl*> io_declFactory::objects_;
std::vector<std::vector<io_decl*>*> VectorOfio_declFactory::objects_;
std::vector<alias_stmt*> alias_stmtFactory::objects_;
std::vector<std::vector<alias_stmt*>*> VectorOfalias_stmtFactory::objects_;
std::vector<clocking_block*> clocking_blockFactory::objects_;
std::vector<std::vector<clocking_block*>*> VectorOfclocking_blockFactory::objects_;
std::vector<instance_array*> instance_arrayFactory::objects_;
std::vector<std::vector<instance_array*>*> VectorOfinstance_arrayFactory::objects_;
std::vector<module*> moduleFactory::objects_;
std::vector<std::vector<module*>*> VectorOfmoduleFactory::objects_;
std::vector<interface*> interfaceFactory::objects_;
std::vector<std::vector<interface*>*> VectorOfinterfaceFactory::objects_;
std::vector<program*> programFactory::objects_;
std::vector<std::vector<program*>*> VectorOfprogramFactory::objects_;
std::vector<std::vector<net*>*> VectorOfnetFactory::objects_;
std::vector<array_net*> array_netFactory::objects_;
std::vector<std::vector<array_net*>*> VectorOfarray_netFactory::objects_;
std::vector<logic_var*> logic_varFactory::objects_;
std::vector<std::vector<logic_var*>*> VectorOflogic_varFactory::objects_;
std::vector<array_var*> array_varFactory::objects_;
std::vector<std::vector<array_var*>*> VectorOfarray_varFactory::objects_;
std::vector<named_event*> named_eventFactory::objects_;
std::vector<std::vector<named_event*>*> VectorOfnamed_eventFactory::objects_;
std::vector<named_event_array*> named_event_arrayFactory::objects_;
std::vector<std::vector<named_event_array*>*> VectorOfnamed_event_arrayFactory::objects_;
std::vector<std::vector<parameters*>*> VectorOfparametersFactory::objects_;
std::vector<spec_param*> spec_paramFactory::objects_;
std::vector<std::vector<spec_param*>*> VectorOfspec_paramFactory::objects_;
std::vector<std::vector<assertion*>*> VectorOfassertionFactory::objects_;
std::vector<std::vector<typespec*>*> VectorOftypespecFactory::objects_;
std::vector<class_defn*> class_defnFactory::objects_;
std::vector<std::vector<class_defn*>*> VectorOfclass_defnFactory::objects_;
std::vector<std::vector<instance*>*> VectorOfinstanceFactory::objects_;
std::vector<package*> packageFactory::objects_;
std::vector<std::vector<package*>*> VectorOfpackageFactory::objects_;
std::vector<design*> designFactory::objects_;
std::vector<std::vector<design*>*> VectorOfdesignFactory::objects_;


BaseClass* Serializer::getObject(unsigned int objectType, unsigned int index) {
  switch (objectType) {
  case uhdmprocess: return processFactory::objects_[index];
  case uhdmbegin: return beginFactory::objects_[index];
  case uhdmnamed_begin: return named_beginFactory::objects_[index];
  case uhdmdistribution: return distributionFactory::objects_[index];
  case uhdmoperation: return operationFactory::objects_[index];
  case uhdmref_obj: return ref_objFactory::objects_[index];
  case uhdmtask: return taskFactory::objects_[index];
  case uhdmfunction: return functionFactory::objects_[index];
  case uhdmmodport: return modportFactory::objects_[index];
  case uhdminterface_tf_decl: return interface_tf_declFactory::objects_[index];
  case uhdminterface_array: return interface_arrayFactory::objects_[index];
  case uhdmcont_assign: return cont_assignFactory::objects_[index];
  case uhdmport: return portFactory::objects_[index];
  case uhdmmodule_array: return module_arrayFactory::objects_[index];
  case uhdmprimitive: return primitiveFactory::objects_[index];
  case uhdmprimitive_array: return primitive_arrayFactory::objects_[index];
  case uhdmmod_path: return mod_pathFactory::objects_[index];
  case uhdmtchk: return tchkFactory::objects_[index];
  case uhdmdef_param: return def_paramFactory::objects_[index];
  case uhdmio_decl: return io_declFactory::objects_[index];
  case uhdmalias_stmt: return alias_stmtFactory::objects_[index];
  case uhdmclocking_block: return clocking_blockFactory::objects_[index];
  case uhdminstance_array: return instance_arrayFactory::objects_[index];
  case uhdmmodule: return moduleFactory::objects_[index];
  case uhdminterface: return interfaceFactory::objects_[index];
  case uhdmprogram: return programFactory::objects_[index];
  case uhdmarray_net: return array_netFactory::objects_[index];
  case uhdmlogic_var: return logic_varFactory::objects_[index];
  case uhdmarray_var: return array_varFactory::objects_[index];
  case uhdmnamed_event: return named_eventFactory::objects_[index];
  case uhdmnamed_event_array: return named_event_arrayFactory::objects_[index];
  case uhdmspec_param: return spec_paramFactory::objects_[index];
  case uhdmclass_defn: return class_defnFactory::objects_[index];
  case uhdmpackage: return packageFactory::objects_[index];
  case uhdmdesign: return designFactory::objects_[index];

  default:
    return NULL;
  }
  return NULL;
}

void Serializer::purge() {

  for (auto obj : processFactory::objects_) {
    delete obj;
  }
  processFactory::objects_.clear();

  for (auto obj : beginFactory::objects_) {
    delete obj;
  }
  beginFactory::objects_.clear();

  for (auto obj : named_beginFactory::objects_) {
    delete obj;
  }
  named_beginFactory::objects_.clear();

  for (auto obj : distributionFactory::objects_) {
    delete obj;
  }
  distributionFactory::objects_.clear();

  for (auto obj : operationFactory::objects_) {
    delete obj;
  }
  operationFactory::objects_.clear();

  for (auto obj : ref_objFactory::objects_) {
    delete obj;
  }
  ref_objFactory::objects_.clear();

  for (auto obj : taskFactory::objects_) {
    delete obj;
  }
  taskFactory::objects_.clear();

  for (auto obj : functionFactory::objects_) {
    delete obj;
  }
  functionFactory::objects_.clear();

  for (auto obj : modportFactory::objects_) {
    delete obj;
  }
  modportFactory::objects_.clear();

  for (auto obj : interface_tf_declFactory::objects_) {
    delete obj;
  }
  interface_tf_declFactory::objects_.clear();

  for (auto obj : interface_arrayFactory::objects_) {
    delete obj;
  }
  interface_arrayFactory::objects_.clear();

  for (auto obj : cont_assignFactory::objects_) {
    delete obj;
  }
  cont_assignFactory::objects_.clear();

  for (auto obj : portFactory::objects_) {
    delete obj;
  }
  portFactory::objects_.clear();

  for (auto obj : module_arrayFactory::objects_) {
    delete obj;
  }
  module_arrayFactory::objects_.clear();

  for (auto obj : primitiveFactory::objects_) {
    delete obj;
  }
  primitiveFactory::objects_.clear();

  for (auto obj : primitive_arrayFactory::objects_) {
    delete obj;
  }
  primitive_arrayFactory::objects_.clear();

  for (auto obj : mod_pathFactory::objects_) {
    delete obj;
  }
  mod_pathFactory::objects_.clear();

  for (auto obj : tchkFactory::objects_) {
    delete obj;
  }
  tchkFactory::objects_.clear();

  for (auto obj : def_paramFactory::objects_) {
    delete obj;
  }
  def_paramFactory::objects_.clear();

  for (auto obj : io_declFactory::objects_) {
    delete obj;
  }
  io_declFactory::objects_.clear();

  for (auto obj : alias_stmtFactory::objects_) {
    delete obj;
  }
  alias_stmtFactory::objects_.clear();

  for (auto obj : clocking_blockFactory::objects_) {
    delete obj;
  }
  clocking_blockFactory::objects_.clear();

  for (auto obj : instance_arrayFactory::objects_) {
    delete obj;
  }
  instance_arrayFactory::objects_.clear();

  for (auto obj : moduleFactory::objects_) {
    delete obj;
  }
  moduleFactory::objects_.clear();

  for (auto obj : interfaceFactory::objects_) {
    delete obj;
  }
  interfaceFactory::objects_.clear();

  for (auto obj : programFactory::objects_) {
    delete obj;
  }
  programFactory::objects_.clear();

  for (auto obj : array_netFactory::objects_) {
    delete obj;
  }
  array_netFactory::objects_.clear();

  for (auto obj : logic_varFactory::objects_) {
    delete obj;
  }
  logic_varFactory::objects_.clear();

  for (auto obj : array_varFactory::objects_) {
    delete obj;
  }
  array_varFactory::objects_.clear();

  for (auto obj : named_eventFactory::objects_) {
    delete obj;
  }
  named_eventFactory::objects_.clear();

  for (auto obj : named_event_arrayFactory::objects_) {
    delete obj;
  }
  named_event_arrayFactory::objects_.clear();

  for (auto obj : spec_paramFactory::objects_) {
    delete obj;
  }
  spec_paramFactory::objects_.clear();

  for (auto obj : class_defnFactory::objects_) {
    delete obj;
  }
  class_defnFactory::objects_.clear();

  for (auto obj : packageFactory::objects_) {
    delete obj;
  }
  packageFactory::objects_.clear();

  for (auto obj : designFactory::objects_) {
    delete obj;
  }
  designFactory::objects_.clear();

}

void Serializer::save(std::string file) {
  int fileid = open(file.c_str(), O_CREAT | O_WRONLY , S_IRWXU);
  ::capnp::MallocMessageBuilder message;
  UhdmRoot::Builder cap_root = message.initRoot<UhdmRoot>();
  unsigned long index = 0;


  index = 1;
  for (auto obj : processFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : beginFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : named_beginFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : distributionFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : operationFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : ref_objFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : taskFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : functionFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : modportFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : interface_tf_declFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : interface_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : cont_assignFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : portFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : module_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : primitiveFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : primitive_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : mod_pathFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : tchkFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : def_paramFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : io_declFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : alias_stmtFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : clocking_blockFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : instance_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : moduleFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : interfaceFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : programFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : array_netFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : logic_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : array_varFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : named_eventFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : named_event_arrayFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : spec_paramFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : class_defnFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : packageFactory::objects_) {
    setId(obj, index);
    index++;
  }
  index = 1;
  for (auto obj : designFactory::objects_) {
    setId(obj, index);
    index++;
  }
  
  ::capnp::List<Design>::Builder designs = cap_root.initDesigns(designFactory::objects_.size());
  index = 0;
  for (auto design : designFactory::objects_) {
    designs[index].setVpiName(SymbolFactory::make(design->get_vpiName()));
    index++;
  }

  ::capnp::List<::capnp::Text>::Builder symbols = cap_root.initSymbols(id2SymbolMap.size());
  index = 0;
  for (auto symbol : id2SymbolMap) {
    symbols.set(index, symbol);
    index++;
  }


 ::capnp::List<Process>::Builder Processs = cap_root.initFactoryProcess(processFactory::objects_.size());
 index = 0;
 for (auto obj : processFactory::objects_) {
    Processs[index].setVpiParent(getId(obj->get_vpiParent()));
    Processs[index].setUhdmParentType(obj->get_uhdmParentType());
    Processs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Processs[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Begin>::Builder Begins = cap_root.initFactoryBegin(beginFactory::objects_.size());
 index = 0;
 for (auto obj : beginFactory::objects_) {
    Begins[index].setVpiParent(getId(obj->get_vpiParent()));
    Begins[index].setUhdmParentType(obj->get_uhdmParentType());
    Begins[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Begins[index].setVpiLineNo(obj->get_vpiLineNo());
    Begins[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Begins[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));


   index++;
 }
 ::capnp::List<Namedbegin>::Builder Namedbegins = cap_root.initFactoryNamedbegin(named_beginFactory::objects_.size());
 index = 0;
 for (auto obj : named_beginFactory::objects_) {
    Namedbegins[index].setVpiParent(getId(obj->get_vpiParent()));
    Namedbegins[index].setUhdmParentType(obj->get_uhdmParentType());
    Namedbegins[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Namedbegins[index].setVpiLineNo(obj->get_vpiLineNo());
    Namedbegins[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Namedbegins[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));


   index++;
 }
 ::capnp::List<Distribution>::Builder Distributions = cap_root.initFactoryDistribution(distributionFactory::objects_.size());
 index = 0;
 for (auto obj : distributionFactory::objects_) {
    Distributions[index].setVpiParent(getId(obj->get_vpiParent()));
    Distributions[index].setUhdmParentType(obj->get_uhdmParentType());
    Distributions[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Distributions[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Operation>::Builder Operations = cap_root.initFactoryOperation(operationFactory::objects_.size());
 index = 0;
 for (auto obj : operationFactory::objects_) {
    Operations[index].setVpiParent(getId(obj->get_vpiParent()));
    Operations[index].setUhdmParentType(obj->get_uhdmParentType());
    Operations[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Operations[index].setVpiLineNo(obj->get_vpiLineNo());
    Operations[index].setVpiOpType(obj->get_vpiOpType());
 
    if (obj->get_operands()) {  
      ::capnp::List<::ObjIndexType>::Builder Operandss = Operations[index].initOperands(obj->get_operands()->size());
      for (unsigned int ind = 0; ind < obj->get_operands()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Operandss[ind];
        tmp.setIndex(getId((*obj->get_operands())[ind]));
        tmp.setType(((*obj->get_operands())[ind])->getUhdmType());
      }
    }
    Operations[index].setVpiDecompile(SymbolFactory::make(obj->get_vpiDecompile()));
    Operations[index].setVpiSize(obj->get_vpiSize());


   index++;
 }
 ::capnp::List<Refobj>::Builder Refobjs = cap_root.initFactoryRefobj(ref_objFactory::objects_.size());
 index = 0;
 for (auto obj : ref_objFactory::objects_) {
    Refobjs[index].setVpiParent(getId(obj->get_vpiParent()));
    Refobjs[index].setUhdmParentType(obj->get_uhdmParentType());
    Refobjs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Refobjs[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Task>::Builder Tasks = cap_root.initFactoryTask(taskFactory::objects_.size());
 index = 0;
 for (auto obj : taskFactory::objects_) {
    Tasks[index].setVpiParent(getId(obj->get_vpiParent()));
    Tasks[index].setUhdmParentType(obj->get_uhdmParentType());
    Tasks[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Tasks[index].setVpiLineNo(obj->get_vpiLineNo());
    Tasks[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Tasks[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Tasks[index].setVpiMethod(obj->get_vpiMethod());
    Tasks[index].setVpiAccessType(obj->get_vpiAccessType());
    Tasks[index].setVpiVisibility(obj->get_vpiVisibility());
    Tasks[index].setVpiVirtual(obj->get_vpiVirtual());
    Tasks[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Tasks[index].setVpiDPIContext(obj->get_vpiDPIContext());
    Tasks[index].setVpiDPICStr(obj->get_vpiDPICStr());
    Tasks[index].setVpiDPICIdentifier(SymbolFactory::make(obj->get_vpiDPICIdentifier()));
  if (obj->get_left_expr()) {    ::ObjIndexType::Builder tmp0 = Tasks[index].getLeftexpr();
    tmp0.setIndex(getId((obj->get_left_expr())));
    tmp0.setType(obj->get_left_expr()->getUhdmType());
  }  if (obj->get_right_expr()) {    ::ObjIndexType::Builder tmp1 = Tasks[index].getRightexpr();
    tmp1.setIndex(getId((obj->get_right_expr())));
    tmp1.setType(obj->get_right_expr()->getUhdmType());
  }  if (obj->get_variables()) {    ::ObjIndexType::Builder tmp2 = Tasks[index].getVariables();
    tmp2.setIndex(getId((obj->get_variables())));
    tmp2.setType(obj->get_variables()->getUhdmType());
  }    Tasks[index].setClassdefn(getId(obj->get_class_defn()));
    Tasks[index].setRefobj(getId(obj->get_ref_obj()));
    Tasks[index].setIodecl(getId(obj->get_io_decl()));


   index++;
 }
 ::capnp::List<Function>::Builder Functions = cap_root.initFactoryFunction(functionFactory::objects_.size());
 index = 0;
 for (auto obj : functionFactory::objects_) {
    Functions[index].setVpiParent(getId(obj->get_vpiParent()));
    Functions[index].setUhdmParentType(obj->get_uhdmParentType());
    Functions[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Functions[index].setVpiLineNo(obj->get_vpiLineNo());
    Functions[index].setVpiSigned(obj->get_vpiSigned());
    Functions[index].setVpiSize(obj->get_vpiSize());
    Functions[index].setVpiFuncType(obj->get_vpiFuncType());
    Functions[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Functions[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Functions[index].setVpiMethod(obj->get_vpiMethod());
    Functions[index].setVpiAccessType(obj->get_vpiAccessType());
    Functions[index].setVpiVisibility(obj->get_vpiVisibility());
    Functions[index].setVpiVirtual(obj->get_vpiVirtual());
    Functions[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Functions[index].setVpiDPIContext(obj->get_vpiDPIContext());
    Functions[index].setVpiDPICStr(obj->get_vpiDPICStr());
    Functions[index].setVpiDPICIdentifier(SymbolFactory::make(obj->get_vpiDPICIdentifier()));
  if (obj->get_left_expr()) {    ::ObjIndexType::Builder tmp0 = Functions[index].getLeftexpr();
    tmp0.setIndex(getId((obj->get_left_expr())));
    tmp0.setType(obj->get_left_expr()->getUhdmType());
  }  if (obj->get_right_expr()) {    ::ObjIndexType::Builder tmp1 = Functions[index].getRightexpr();
    tmp1.setIndex(getId((obj->get_right_expr())));
    tmp1.setType(obj->get_right_expr()->getUhdmType());
  }  if (obj->get_variables()) {    ::ObjIndexType::Builder tmp2 = Functions[index].getVariables();
    tmp2.setIndex(getId((obj->get_variables())));
    tmp2.setType(obj->get_variables()->getUhdmType());
  }    Functions[index].setClassdefn(getId(obj->get_class_defn()));
    Functions[index].setRefobj(getId(obj->get_ref_obj()));
    Functions[index].setIodecl(getId(obj->get_io_decl()));


   index++;
 }
 ::capnp::List<Modport>::Builder Modports = cap_root.initFactoryModport(modportFactory::objects_.size());
 index = 0;
 for (auto obj : modportFactory::objects_) {
    Modports[index].setVpiParent(getId(obj->get_vpiParent()));
    Modports[index].setUhdmParentType(obj->get_uhdmParentType());
    Modports[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Modports[index].setVpiLineNo(obj->get_vpiLineNo());
    Modports[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
 
    if (obj->get_io_decls()) {  
      ::capnp::List<::uint64_t>::Builder Iodeclss = Modports[index].initIodecls(obj->get_io_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_io_decls()->size(); ind++) {
Iodeclss.set(ind, getId((*obj->get_io_decls())[ind]));
      }
    }
    Modports[index].setInterface(getId(obj->get_interface()));

   index++;
 }
 ::capnp::List<Interfacetfdecl>::Builder Interfacetfdecls = cap_root.initFactoryInterfacetfdecl(interface_tf_declFactory::objects_.size());
 index = 0;
 for (auto obj : interface_tf_declFactory::objects_) {
    Interfacetfdecls[index].setVpiParent(getId(obj->get_vpiParent()));
    Interfacetfdecls[index].setUhdmParentType(obj->get_uhdmParentType());
    Interfacetfdecls[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Interfacetfdecls[index].setVpiLineNo(obj->get_vpiLineNo());
    Interfacetfdecls[index].setVpiAccessType(obj->get_vpiAccessType());
 
    if (obj->get_tasks()) {  
      ::capnp::List<::uint64_t>::Builder Taskss = Interfacetfdecls[index].initTasks(obj->get_tasks()->size());
      for (unsigned int ind = 0; ind < obj->get_tasks()->size(); ind++) {
Taskss.set(ind, getId((*obj->get_tasks())[ind]));
      }
    }
 
    if (obj->get_functions()) {  
      ::capnp::List<::uint64_t>::Builder Functionss = Interfacetfdecls[index].initFunctions(obj->get_functions()->size());
      for (unsigned int ind = 0; ind < obj->get_functions()->size(); ind++) {
Functionss.set(ind, getId((*obj->get_functions())[ind]));
      }
    }

   index++;
 }
 ::capnp::List<Interfacearray>::Builder Interfacearrays = cap_root.initFactoryInterfacearray(interface_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : interface_arrayFactory::objects_) {
    Interfacearrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Interfacearrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Interfacearrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Interfacearrays[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Contassign>::Builder Contassigns = cap_root.initFactoryContassign(cont_assignFactory::objects_.size());
 index = 0;
 for (auto obj : cont_assignFactory::objects_) {
    Contassigns[index].setVpiParent(getId(obj->get_vpiParent()));
    Contassigns[index].setUhdmParentType(obj->get_uhdmParentType());
    Contassigns[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Contassigns[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Port>::Builder Ports = cap_root.initFactoryPort(portFactory::objects_.size());
 index = 0;
 for (auto obj : portFactory::objects_) {
    Ports[index].setVpiParent(getId(obj->get_vpiParent()));
    Ports[index].setUhdmParentType(obj->get_uhdmParentType());
    Ports[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Ports[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Modulearray>::Builder Modulearrays = cap_root.initFactoryModulearray(module_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : module_arrayFactory::objects_) {
    Modulearrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Modulearrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Modulearrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Modulearrays[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Primitive>::Builder Primitives = cap_root.initFactoryPrimitive(primitiveFactory::objects_.size());
 index = 0;
 for (auto obj : primitiveFactory::objects_) {
    Primitives[index].setVpiParent(getId(obj->get_vpiParent()));
    Primitives[index].setUhdmParentType(obj->get_uhdmParentType());
    Primitives[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Primitives[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Primitivearray>::Builder Primitivearrays = cap_root.initFactoryPrimitivearray(primitive_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : primitive_arrayFactory::objects_) {
    Primitivearrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Primitivearrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Primitivearrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Primitivearrays[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Modpath>::Builder Modpaths = cap_root.initFactoryModpath(mod_pathFactory::objects_.size());
 index = 0;
 for (auto obj : mod_pathFactory::objects_) {
    Modpaths[index].setVpiParent(getId(obj->get_vpiParent()));
    Modpaths[index].setUhdmParentType(obj->get_uhdmParentType());
    Modpaths[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Modpaths[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Tchk>::Builder Tchks = cap_root.initFactoryTchk(tchkFactory::objects_.size());
 index = 0;
 for (auto obj : tchkFactory::objects_) {
    Tchks[index].setVpiParent(getId(obj->get_vpiParent()));
    Tchks[index].setUhdmParentType(obj->get_uhdmParentType());
    Tchks[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Tchks[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Defparam>::Builder Defparams = cap_root.initFactoryDefparam(def_paramFactory::objects_.size());
 index = 0;
 for (auto obj : def_paramFactory::objects_) {
    Defparams[index].setVpiParent(getId(obj->get_vpiParent()));
    Defparams[index].setUhdmParentType(obj->get_uhdmParentType());
    Defparams[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Defparams[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Iodecl>::Builder Iodecls = cap_root.initFactoryIodecl(io_declFactory::objects_.size());
 index = 0;
 for (auto obj : io_declFactory::objects_) {
    Iodecls[index].setVpiParent(getId(obj->get_vpiParent()));
    Iodecls[index].setUhdmParentType(obj->get_uhdmParentType());
    Iodecls[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Iodecls[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Aliasstmt>::Builder Aliasstmts = cap_root.initFactoryAliasstmt(alias_stmtFactory::objects_.size());
 index = 0;
 for (auto obj : alias_stmtFactory::objects_) {
    Aliasstmts[index].setVpiParent(getId(obj->get_vpiParent()));
    Aliasstmts[index].setUhdmParentType(obj->get_uhdmParentType());
    Aliasstmts[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Aliasstmts[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Clockingblock>::Builder Clockingblocks = cap_root.initFactoryClockingblock(clocking_blockFactory::objects_.size());
 index = 0;
 for (auto obj : clocking_blockFactory::objects_) {
    Clockingblocks[index].setVpiParent(getId(obj->get_vpiParent()));
    Clockingblocks[index].setUhdmParentType(obj->get_uhdmParentType());
    Clockingblocks[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Clockingblocks[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Instancearray>::Builder Instancearrays = cap_root.initFactoryInstancearray(instance_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : instance_arrayFactory::objects_) {
    Instancearrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Instancearrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Instancearrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Instancearrays[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Module>::Builder Modules = cap_root.initFactoryModule(moduleFactory::objects_.size());
 index = 0;
 for (auto obj : moduleFactory::objects_) {
    Modules[index].setVpiParent(getId(obj->get_vpiParent()));
    Modules[index].setUhdmParentType(obj->get_uhdmParentType());
    Modules[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Modules[index].setVpiLineNo(obj->get_vpiLineNo());
    Modules[index].setVpiIndex(obj->get_vpiIndex());
    Modules[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Modules[index].setVpiTopModule(obj->get_vpiTopModule());
    Modules[index].setVpiDefDecayTime(obj->get_vpiDefDecayTime());
  if (obj->get_expr_dist()) {    ::ObjIndexType::Builder tmp0 = Modules[index].getExprdist();
    tmp0.setIndex(getId((obj->get_expr_dist())));
    tmp0.setType(obj->get_expr_dist()->getUhdmType());
  }  if (obj->get_instance_array()) {    ::ObjIndexType::Builder tmp1 = Modules[index].getInstancearray();
    tmp1.setIndex(getId((obj->get_instance_array())));
    tmp1.setType(obj->get_instance_array()->getUhdmType());
  } 
    if (obj->get_scope()) {  
      ::capnp::List<::ObjIndexType>::Builder Scopes = Modules[index].initScope(obj->get_scope()->size());
      for (unsigned int ind = 0; ind < obj->get_scope()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Scopes[ind];
        tmp.setIndex(getId((*obj->get_scope())[ind]));
        tmp.setType(((*obj->get_scope())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_process()) {  
      ::capnp::List<::ObjIndexType>::Builder Processs = Modules[index].initProcess(obj->get_process()->size());
      for (unsigned int ind = 0; ind < obj->get_process()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Processs[ind];
        tmp.setIndex(getId((*obj->get_process())[ind]));
        tmp.setType(((*obj->get_process())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_primitives()) {  
      ::capnp::List<::ObjIndexType>::Builder Primitivess = Modules[index].initPrimitives(obj->get_primitives()->size());
      for (unsigned int ind = 0; ind < obj->get_primitives()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Primitivess[ind];
        tmp.setIndex(getId((*obj->get_primitives())[ind]));
        tmp.setType(((*obj->get_primitives())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_primitive_arrays()) {  
      ::capnp::List<::ObjIndexType>::Builder Primitivearrayss = Modules[index].initPrimitivearrays(obj->get_primitive_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_primitive_arrays()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Primitivearrayss[ind];
        tmp.setIndex(getId((*obj->get_primitive_arrays())[ind]));
        tmp.setType(((*obj->get_primitive_arrays())[ind])->getUhdmType());
      }
    }
    Modules[index].setGlobalclocking(getId(obj->get_global_clocking()));
    Modules[index].setDefaultclocking(getId(obj->get_default_clocking()));
    Modules[index].setModulearray(getId(obj->get_module_array()));
 
    if (obj->get_ports()) {  
      ::capnp::List<::uint64_t>::Builder Portss = Modules[index].initPorts(obj->get_ports()->size());
      for (unsigned int ind = 0; ind < obj->get_ports()->size(); ind++) {
Portss.set(ind, getId((*obj->get_ports())[ind]));
      }
    }
 
    if (obj->get_interfaces()) {  
      ::capnp::List<::uint64_t>::Builder Interfacess = Modules[index].initInterfaces(obj->get_interfaces()->size());
      for (unsigned int ind = 0; ind < obj->get_interfaces()->size(); ind++) {
Interfacess.set(ind, getId((*obj->get_interfaces())[ind]));
      }
    }
 
    if (obj->get_interface_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Interfacearrayss = Modules[index].initInterfacearrays(obj->get_interface_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_interface_arrays()->size(); ind++) {
Interfacearrayss.set(ind, getId((*obj->get_interface_arrays())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Modules[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_modules()) {  
      ::capnp::List<::uint64_t>::Builder Moduless = Modules[index].initModules(obj->get_modules()->size());
      for (unsigned int ind = 0; ind < obj->get_modules()->size(); ind++) {
Moduless.set(ind, getId((*obj->get_modules())[ind]));
      }
    }
 
    if (obj->get_module_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Modulearrayss = Modules[index].initModulearrays(obj->get_module_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_module_arrays()->size(); ind++) {
Modulearrayss.set(ind, getId((*obj->get_module_arrays())[ind]));
      }
    }
 
    if (obj->get_mod_paths()) {  
      ::capnp::List<::uint64_t>::Builder Modpathss = Modules[index].initModpaths(obj->get_mod_paths()->size());
      for (unsigned int ind = 0; ind < obj->get_mod_paths()->size(); ind++) {
Modpathss.set(ind, getId((*obj->get_mod_paths())[ind]));
      }
    }
 
    if (obj->get_tchks()) {  
      ::capnp::List<::uint64_t>::Builder Tchkss = Modules[index].initTchks(obj->get_tchks()->size());
      for (unsigned int ind = 0; ind < obj->get_tchks()->size(); ind++) {
Tchkss.set(ind, getId((*obj->get_tchks())[ind]));
      }
    }
 
    if (obj->get_def_params()) {  
      ::capnp::List<::uint64_t>::Builder Defparamss = Modules[index].initDefparams(obj->get_def_params()->size());
      for (unsigned int ind = 0; ind < obj->get_def_params()->size(); ind++) {
Defparamss.set(ind, getId((*obj->get_def_params())[ind]));
      }
    }
 
    if (obj->get_io_decls()) {  
      ::capnp::List<::uint64_t>::Builder Iodeclss = Modules[index].initIodecls(obj->get_io_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_io_decls()->size(); ind++) {
Iodeclss.set(ind, getId((*obj->get_io_decls())[ind]));
      }
    }
 
    if (obj->get_alias_stmts()) {  
      ::capnp::List<::uint64_t>::Builder Aliasstmtss = Modules[index].initAliasstmts(obj->get_alias_stmts()->size());
      for (unsigned int ind = 0; ind < obj->get_alias_stmts()->size(); ind++) {
Aliasstmtss.set(ind, getId((*obj->get_alias_stmts())[ind]));
      }
    }
 
    if (obj->get_clocking_blocks()) {  
      ::capnp::List<::uint64_t>::Builder Clockingblockss = Modules[index].initClockingblocks(obj->get_clocking_blocks()->size());
      for (unsigned int ind = 0; ind < obj->get_clocking_blocks()->size(); ind++) {
Clockingblockss.set(ind, getId((*obj->get_clocking_blocks())[ind]));
      }
    }

   index++;
 }
 ::capnp::List<Interface>::Builder Interfaces = cap_root.initFactoryInterface(interfaceFactory::objects_.size());
 index = 0;
 for (auto obj : interfaceFactory::objects_) {
    Interfaces[index].setVpiParent(getId(obj->get_vpiParent()));
    Interfaces[index].setUhdmParentType(obj->get_uhdmParentType());
    Interfaces[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Interfaces[index].setVpiLineNo(obj->get_vpiLineNo());
    Interfaces[index].setVpiIndex(obj->get_vpiIndex());
  if (obj->get_expr_dist()) {    ::ObjIndexType::Builder tmp0 = Interfaces[index].getExprdist();
    tmp0.setIndex(getId((obj->get_expr_dist())));
    tmp0.setType(obj->get_expr_dist()->getUhdmType());
  }  if (obj->get_instance_array()) {    ::ObjIndexType::Builder tmp1 = Interfaces[index].getInstancearray();
    tmp1.setIndex(getId((obj->get_instance_array())));
    tmp1.setType(obj->get_instance_array()->getUhdmType());
  } 
    if (obj->get_process()) {  
      ::capnp::List<::ObjIndexType>::Builder Processs = Interfaces[index].initProcess(obj->get_process()->size());
      for (unsigned int ind = 0; ind < obj->get_process()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Processs[ind];
        tmp.setIndex(getId((*obj->get_process())[ind]));
        tmp.setType(((*obj->get_process())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_interface_tf_decls()) {  
      ::capnp::List<::uint64_t>::Builder Interfacetfdeclss = Interfaces[index].initInterfacetfdecls(obj->get_interface_tf_decls()->size());
      for (unsigned int ind = 0; ind < obj->get_interface_tf_decls()->size(); ind++) {
Interfacetfdeclss.set(ind, getId((*obj->get_interface_tf_decls())[ind]));
      }
    }
 
    if (obj->get_modports()) {  
      ::capnp::List<::uint64_t>::Builder Modportss = Interfaces[index].initModports(obj->get_modports()->size());
      for (unsigned int ind = 0; ind < obj->get_modports()->size(); ind++) {
Modportss.set(ind, getId((*obj->get_modports())[ind]));
      }
    }
    Interfaces[index].setGlobalclocking(getId(obj->get_global_clocking()));
    Interfaces[index].setDefaultclocking(getId(obj->get_default_clocking()));
 
    if (obj->get_mod_paths()) {  
      ::capnp::List<::uint64_t>::Builder Modpathss = Interfaces[index].initModpaths(obj->get_mod_paths()->size());
      for (unsigned int ind = 0; ind < obj->get_mod_paths()->size(); ind++) {
Modpathss.set(ind, getId((*obj->get_mod_paths())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Interfaces[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_interfaces()) {  
      ::capnp::List<::uint64_t>::Builder Interfacess = Interfaces[index].initInterfaces(obj->get_interfaces()->size());
      for (unsigned int ind = 0; ind < obj->get_interfaces()->size(); ind++) {
Interfacess.set(ind, getId((*obj->get_interfaces())[ind]));
      }
    }
 
    if (obj->get_interface_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Interfacearrayss = Interfaces[index].initInterfacearrays(obj->get_interface_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_interface_arrays()->size(); ind++) {
Interfacearrayss.set(ind, getId((*obj->get_interface_arrays())[ind]));
      }
    }

   index++;
 }
 ::capnp::List<Program>::Builder Programs = cap_root.initFactoryProgram(programFactory::objects_.size());
 index = 0;
 for (auto obj : programFactory::objects_) {
    Programs[index].setVpiParent(getId(obj->get_vpiParent()));
    Programs[index].setUhdmParentType(obj->get_uhdmParentType());
    Programs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Programs[index].setVpiLineNo(obj->get_vpiLineNo());
    Programs[index].setVpiIndex(obj->get_vpiIndex());
    Programs[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
  if (obj->get_instance_array()) {    ::ObjIndexType::Builder tmp0 = Programs[index].getInstancearray();
    tmp0.setIndex(getId((obj->get_instance_array())));
    tmp0.setType(obj->get_instance_array()->getUhdmType());
  }  if (obj->get_expr_dist()) {    ::ObjIndexType::Builder tmp1 = Programs[index].getExprdist();
    tmp1.setIndex(getId((obj->get_expr_dist())));
    tmp1.setType(obj->get_expr_dist()->getUhdmType());
  } 
    if (obj->get_process()) {  
      ::capnp::List<::ObjIndexType>::Builder Processs = Programs[index].initProcess(obj->get_process()->size());
      for (unsigned int ind = 0; ind < obj->get_process()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Processs[ind];
        tmp.setIndex(getId((*obj->get_process())[ind]));
        tmp.setType(((*obj->get_process())[ind])->getUhdmType());
      }
    }
    Programs[index].setDefaultclocking(getId(obj->get_default_clocking()));
 
    if (obj->get_interfaces()) {  
      ::capnp::List<::uint64_t>::Builder Interfacess = Programs[index].initInterfaces(obj->get_interfaces()->size());
      for (unsigned int ind = 0; ind < obj->get_interfaces()->size(); ind++) {
Interfacess.set(ind, getId((*obj->get_interfaces())[ind]));
      }
    }
 
    if (obj->get_interface_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Interfacearrayss = Programs[index].initInterfacearrays(obj->get_interface_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_interface_arrays()->size(); ind++) {
Interfacearrayss.set(ind, getId((*obj->get_interface_arrays())[ind]));
      }
    }
 
    if (obj->get_cont_assigns()) {  
      ::capnp::List<::uint64_t>::Builder Contassignss = Programs[index].initContassigns(obj->get_cont_assigns()->size());
      for (unsigned int ind = 0; ind < obj->get_cont_assigns()->size(); ind++) {
Contassignss.set(ind, getId((*obj->get_cont_assigns())[ind]));
      }
    }
 
    if (obj->get_clocking_blocks()) {  
      ::capnp::List<::uint64_t>::Builder Clockingblockss = Programs[index].initClockingblocks(obj->get_clocking_blocks()->size());
      for (unsigned int ind = 0; ind < obj->get_clocking_blocks()->size(); ind++) {
Clockingblockss.set(ind, getId((*obj->get_clocking_blocks())[ind]));
      }
    }

   index++;
 }
 ::capnp::List<Arraynet>::Builder Arraynets = cap_root.initFactoryArraynet(array_netFactory::objects_.size());
 index = 0;
 for (auto obj : array_netFactory::objects_) {
    Arraynets[index].setVpiParent(getId(obj->get_vpiParent()));
    Arraynets[index].setUhdmParentType(obj->get_uhdmParentType());
    Arraynets[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Arraynets[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Logicvar>::Builder Logicvars = cap_root.initFactoryLogicvar(logic_varFactory::objects_.size());
 index = 0;
 for (auto obj : logic_varFactory::objects_) {
    Logicvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Logicvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Logicvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Logicvars[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Arrayvar>::Builder Arrayvars = cap_root.initFactoryArrayvar(array_varFactory::objects_.size());
 index = 0;
 for (auto obj : array_varFactory::objects_) {
    Arrayvars[index].setVpiParent(getId(obj->get_vpiParent()));
    Arrayvars[index].setUhdmParentType(obj->get_uhdmParentType());
    Arrayvars[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Arrayvars[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Namedevent>::Builder Namedevents = cap_root.initFactoryNamedevent(named_eventFactory::objects_.size());
 index = 0;
 for (auto obj : named_eventFactory::objects_) {
    Namedevents[index].setVpiParent(getId(obj->get_vpiParent()));
    Namedevents[index].setUhdmParentType(obj->get_uhdmParentType());
    Namedevents[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Namedevents[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Namedeventarray>::Builder Namedeventarrays = cap_root.initFactoryNamedeventarray(named_event_arrayFactory::objects_.size());
 index = 0;
 for (auto obj : named_event_arrayFactory::objects_) {
    Namedeventarrays[index].setVpiParent(getId(obj->get_vpiParent()));
    Namedeventarrays[index].setUhdmParentType(obj->get_uhdmParentType());
    Namedeventarrays[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Namedeventarrays[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Specparam>::Builder Specparams = cap_root.initFactorySpecparam(spec_paramFactory::objects_.size());
 index = 0;
 for (auto obj : spec_paramFactory::objects_) {
    Specparams[index].setVpiParent(getId(obj->get_vpiParent()));
    Specparams[index].setUhdmParentType(obj->get_uhdmParentType());
    Specparams[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Specparams[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Classdefn>::Builder Classdefns = cap_root.initFactoryClassdefn(class_defnFactory::objects_.size());
 index = 0;
 for (auto obj : class_defnFactory::objects_) {
    Classdefns[index].setVpiParent(getId(obj->get_vpiParent()));
    Classdefns[index].setUhdmParentType(obj->get_uhdmParentType());
    Classdefns[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Classdefns[index].setVpiLineNo(obj->get_vpiLineNo());

   index++;
 }
 ::capnp::List<Package>::Builder Packages = cap_root.initFactoryPackage(packageFactory::objects_.size());
 index = 0;
 for (auto obj : packageFactory::objects_) {
    Packages[index].setVpiParent(getId(obj->get_vpiParent()));
    Packages[index].setUhdmParentType(obj->get_uhdmParentType());
    Packages[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Packages[index].setVpiLineNo(obj->get_vpiLineNo());
    Packages[index].setVpiUnit(obj->get_vpiUnit());
    Packages[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
    Packages[index].setVpiFullName(SymbolFactory::make(obj->get_vpiFullName()));
    Packages[index].setVpiDefName(SymbolFactory::make(obj->get_vpiDefName()));
    Packages[index].setVpiArrayMember(obj->get_vpiArrayMember());
    Packages[index].setVpiCellInstance(obj->get_vpiCellInstance());
    Packages[index].setVpiDefNetType(obj->get_vpiDefNetType());
    Packages[index].setVpiDefFile(SymbolFactory::make(obj->get_vpiDefFile()));
    Packages[index].setVpiDefDelayMode(obj->get_vpiDefDelayMode());
    Packages[index].setVpiProtected(obj->get_vpiProtected());
    Packages[index].setVpiTimePrecision(obj->get_vpiTimePrecision());
    Packages[index].setVpiTimeUnit(obj->get_vpiTimeUnit());
    Packages[index].setVpiUnconnDrive(obj->get_vpiUnconnDrive());
    Packages[index].setVpiLibrary(SymbolFactory::make(obj->get_vpiLibrary()));
    Packages[index].setVpiCell(SymbolFactory::make(obj->get_vpiCell()));
    Packages[index].setVpiConfig(SymbolFactory::make(obj->get_vpiConfig()));
    Packages[index].setVpiAutomatic(obj->get_vpiAutomatic());
    Packages[index].setVpiTop(obj->get_vpiTop());
 
    if (obj->get_task_func()) {  
      ::capnp::List<::ObjIndexType>::Builder Taskfuncs = Packages[index].initTaskfunc(obj->get_task_func()->size());
      for (unsigned int ind = 0; ind < obj->get_task_func()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Taskfuncs[ind];
        tmp.setIndex(getId((*obj->get_task_func())[ind]));
        tmp.setType(((*obj->get_task_func())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Nets = Packages[index].initNet(obj->get_net()->size());
      for (unsigned int ind = 0; ind < obj->get_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Nets[ind];
        tmp.setIndex(getId((*obj->get_net())[ind]));
        tmp.setType(((*obj->get_net())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_array_net()) {  
      ::capnp::List<::ObjIndexType>::Builder Arraynets = Packages[index].initArraynet(obj->get_array_net()->size());
      for (unsigned int ind = 0; ind < obj->get_array_net()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Arraynets[ind];
        tmp.setIndex(getId((*obj->get_array_net())[ind]));
        tmp.setType(((*obj->get_array_net())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_variables()) {  
      ::capnp::List<::ObjIndexType>::Builder Variabless = Packages[index].initVariables(obj->get_variables()->size());
      for (unsigned int ind = 0; ind < obj->get_variables()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Variabless[ind];
        tmp.setIndex(getId((*obj->get_variables())[ind]));
        tmp.setType(((*obj->get_variables())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_parameters()) {  
      ::capnp::List<::ObjIndexType>::Builder Parameterss = Packages[index].initParameters(obj->get_parameters()->size());
      for (unsigned int ind = 0; ind < obj->get_parameters()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Parameterss[ind];
        tmp.setIndex(getId((*obj->get_parameters())[ind]));
        tmp.setType(((*obj->get_parameters())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_assertion()) {  
      ::capnp::List<::ObjIndexType>::Builder Assertions = Packages[index].initAssertion(obj->get_assertion()->size());
      for (unsigned int ind = 0; ind < obj->get_assertion()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Assertions[ind];
        tmp.setIndex(getId((*obj->get_assertion())[ind]));
        tmp.setType(((*obj->get_assertion())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_typespec()) {  
      ::capnp::List<::ObjIndexType>::Builder Typespecs = Packages[index].initTypespec(obj->get_typespec()->size());
      for (unsigned int ind = 0; ind < obj->get_typespec()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Typespecs[ind];
        tmp.setIndex(getId((*obj->get_typespec())[ind]));
        tmp.setType(((*obj->get_typespec())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_class_defn()) {  
      ::capnp::List<::ObjIndexType>::Builder Classdefns = Packages[index].initClassdefn(obj->get_class_defn()->size());
      for (unsigned int ind = 0; ind < obj->get_class_defn()->size(); ind++) {
        ::ObjIndexType::Builder tmp = Classdefns[ind];
        tmp.setIndex(getId((*obj->get_class_defn())[ind]));
        tmp.setType(((*obj->get_class_defn())[ind])->getUhdmType());
      }
    }
 
    if (obj->get_programs()) {  
      ::capnp::List<::uint64_t>::Builder Programss = Packages[index].initPrograms(obj->get_programs()->size());
      for (unsigned int ind = 0; ind < obj->get_programs()->size(); ind++) {
Programss.set(ind, getId((*obj->get_programs())[ind]));
      }
    }
 
    if (obj->get_program_arrays()) {  
      ::capnp::List<::uint64_t>::Builder Programarrayss = Packages[index].initProgramarrays(obj->get_program_arrays()->size());
      for (unsigned int ind = 0; ind < obj->get_program_arrays()->size(); ind++) {
Programarrayss.set(ind, getId((*obj->get_program_arrays())[ind]));
      }
    }
 
    if (obj->get_logic_var()) {  
      ::capnp::List<::uint64_t>::Builder Logicvars = Packages[index].initLogicvar(obj->get_logic_var()->size());
      for (unsigned int ind = 0; ind < obj->get_logic_var()->size(); ind++) {
Logicvars.set(ind, getId((*obj->get_logic_var())[ind]));
      }
    }
 
    if (obj->get_array_var()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvars = Packages[index].initArrayvar(obj->get_array_var()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var()->size(); ind++) {
Arrayvars.set(ind, getId((*obj->get_array_var())[ind]));
      }
    }
 
    if (obj->get_array_var_mem()) {  
      ::capnp::List<::uint64_t>::Builder Arrayvarmems = Packages[index].initArrayvarmem(obj->get_array_var_mem()->size());
      for (unsigned int ind = 0; ind < obj->get_array_var_mem()->size(); ind++) {
Arrayvarmems.set(ind, getId((*obj->get_array_var_mem())[ind]));
      }
    }
 
    if (obj->get_named_event()) {  
      ::capnp::List<::uint64_t>::Builder Namedevents = Packages[index].initNamedevent(obj->get_named_event()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event()->size(); ind++) {
Namedevents.set(ind, getId((*obj->get_named_event())[ind]));
      }
    }
 
    if (obj->get_named_event_array()) {  
      ::capnp::List<::uint64_t>::Builder Namedeventarrays = Packages[index].initNamedeventarray(obj->get_named_event_array()->size());
      for (unsigned int ind = 0; ind < obj->get_named_event_array()->size(); ind++) {
Namedeventarrays.set(ind, getId((*obj->get_named_event_array())[ind]));
      }
    }
 
    if (obj->get_spec_param()) {  
      ::capnp::List<::uint64_t>::Builder Specparams = Packages[index].initSpecparam(obj->get_spec_param()->size());
      for (unsigned int ind = 0; ind < obj->get_spec_param()->size(); ind++) {
Specparams.set(ind, getId((*obj->get_spec_param())[ind]));
      }
    }


   index++;
 }
 ::capnp::List<Design>::Builder Designs = cap_root.initFactoryDesign(designFactory::objects_.size());
 index = 0;
 for (auto obj : designFactory::objects_) {
    Designs[index].setVpiParent(getId(obj->get_vpiParent()));
    Designs[index].setUhdmParentType(obj->get_uhdmParentType());
    Designs[index].setVpiFile(SymbolFactory::make(obj->get_vpiFile()));
    Designs[index].setVpiLineNo(obj->get_vpiLineNo());
    Designs[index].setVpiName(SymbolFactory::make(obj->get_vpiName()));
 
    if (obj->get_allModules()) {  
      ::capnp::List<::uint64_t>::Builder AllModuless = Designs[index].initAllModules(obj->get_allModules()->size());
      for (unsigned int ind = 0; ind < obj->get_allModules()->size(); ind++) {
AllModuless.set(ind, getId((*obj->get_allModules())[ind]));
      }
    }
 
    if (obj->get_topModules()) {  
      ::capnp::List<::uint64_t>::Builder TopModuless = Designs[index].initTopModules(obj->get_topModules()->size());
      for (unsigned int ind = 0; ind < obj->get_topModules()->size(); ind++) {
TopModuless.set(ind, getId((*obj->get_topModules())[ind]));
      }
    }
 
    if (obj->get_allPrograms()) {  
      ::capnp::List<::uint64_t>::Builder AllProgramss = Designs[index].initAllPrograms(obj->get_allPrograms()->size());
      for (unsigned int ind = 0; ind < obj->get_allPrograms()->size(); ind++) {
AllProgramss.set(ind, getId((*obj->get_allPrograms())[ind]));
      }
    }
 
    if (obj->get_allPackages()) {  
      ::capnp::List<::uint64_t>::Builder AllPackagess = Designs[index].initAllPackages(obj->get_allPackages()->size());
      for (unsigned int ind = 0; ind < obj->get_allPackages()->size(); ind++) {
AllPackagess.set(ind, getId((*obj->get_allPackages())[ind]));
      }
    }

   index++;
 }
  
  writePackedMessageToFd(fileid, message);   
  close(fileid);
}

const std::vector<vpiHandle> Serializer::restore(std::string file) {
  purge();
  std::vector<vpiHandle> designs;
  int fileid = open(file.c_str(), O_RDONLY);
  ::capnp::PackedFdMessageReader message(fileid);
  UhdmRoot::Reader cap_root = message.getRoot<UhdmRoot>();
  unsigned long index = 0;

  ::capnp::List<::capnp::Text>::Reader symbols = cap_root.getSymbols();
  for (auto symbol : symbols) {
    SymbolFactory::make(symbol);
  }
 

 ::capnp::List<Process>::Reader Processs = cap_root.getFactoryProcess();
 for (unsigned ind = 0; ind < Processs.size(); ind++) {
   setId(processFactory::make(), ind);
 }

 ::capnp::List<Begin>::Reader Begins = cap_root.getFactoryBegin();
 for (unsigned ind = 0; ind < Begins.size(); ind++) {
   setId(beginFactory::make(), ind);
 }

 ::capnp::List<Namedbegin>::Reader Namedbegins = cap_root.getFactoryNamedbegin();
 for (unsigned ind = 0; ind < Namedbegins.size(); ind++) {
   setId(named_beginFactory::make(), ind);
 }

 ::capnp::List<Distribution>::Reader Distributions = cap_root.getFactoryDistribution();
 for (unsigned ind = 0; ind < Distributions.size(); ind++) {
   setId(distributionFactory::make(), ind);
 }

 ::capnp::List<Operation>::Reader Operations = cap_root.getFactoryOperation();
 for (unsigned ind = 0; ind < Operations.size(); ind++) {
   setId(operationFactory::make(), ind);
 }

 ::capnp::List<Refobj>::Reader Refobjs = cap_root.getFactoryRefobj();
 for (unsigned ind = 0; ind < Refobjs.size(); ind++) {
   setId(ref_objFactory::make(), ind);
 }

 ::capnp::List<Task>::Reader Tasks = cap_root.getFactoryTask();
 for (unsigned ind = 0; ind < Tasks.size(); ind++) {
   setId(taskFactory::make(), ind);
 }

 ::capnp::List<Function>::Reader Functions = cap_root.getFactoryFunction();
 for (unsigned ind = 0; ind < Functions.size(); ind++) {
   setId(functionFactory::make(), ind);
 }

 ::capnp::List<Modport>::Reader Modports = cap_root.getFactoryModport();
 for (unsigned ind = 0; ind < Modports.size(); ind++) {
   setId(modportFactory::make(), ind);
 }

 ::capnp::List<Interfacetfdecl>::Reader Interfacetfdecls = cap_root.getFactoryInterfacetfdecl();
 for (unsigned ind = 0; ind < Interfacetfdecls.size(); ind++) {
   setId(interface_tf_declFactory::make(), ind);
 }

 ::capnp::List<Interfacearray>::Reader Interfacearrays = cap_root.getFactoryInterfacearray();
 for (unsigned ind = 0; ind < Interfacearrays.size(); ind++) {
   setId(interface_arrayFactory::make(), ind);
 }

 ::capnp::List<Contassign>::Reader Contassigns = cap_root.getFactoryContassign();
 for (unsigned ind = 0; ind < Contassigns.size(); ind++) {
   setId(cont_assignFactory::make(), ind);
 }

 ::capnp::List<Port>::Reader Ports = cap_root.getFactoryPort();
 for (unsigned ind = 0; ind < Ports.size(); ind++) {
   setId(portFactory::make(), ind);
 }

 ::capnp::List<Modulearray>::Reader Modulearrays = cap_root.getFactoryModulearray();
 for (unsigned ind = 0; ind < Modulearrays.size(); ind++) {
   setId(module_arrayFactory::make(), ind);
 }

 ::capnp::List<Primitive>::Reader Primitives = cap_root.getFactoryPrimitive();
 for (unsigned ind = 0; ind < Primitives.size(); ind++) {
   setId(primitiveFactory::make(), ind);
 }

 ::capnp::List<Primitivearray>::Reader Primitivearrays = cap_root.getFactoryPrimitivearray();
 for (unsigned ind = 0; ind < Primitivearrays.size(); ind++) {
   setId(primitive_arrayFactory::make(), ind);
 }

 ::capnp::List<Modpath>::Reader Modpaths = cap_root.getFactoryModpath();
 for (unsigned ind = 0; ind < Modpaths.size(); ind++) {
   setId(mod_pathFactory::make(), ind);
 }

 ::capnp::List<Tchk>::Reader Tchks = cap_root.getFactoryTchk();
 for (unsigned ind = 0; ind < Tchks.size(); ind++) {
   setId(tchkFactory::make(), ind);
 }

 ::capnp::List<Defparam>::Reader Defparams = cap_root.getFactoryDefparam();
 for (unsigned ind = 0; ind < Defparams.size(); ind++) {
   setId(def_paramFactory::make(), ind);
 }

 ::capnp::List<Iodecl>::Reader Iodecls = cap_root.getFactoryIodecl();
 for (unsigned ind = 0; ind < Iodecls.size(); ind++) {
   setId(io_declFactory::make(), ind);
 }

 ::capnp::List<Aliasstmt>::Reader Aliasstmts = cap_root.getFactoryAliasstmt();
 for (unsigned ind = 0; ind < Aliasstmts.size(); ind++) {
   setId(alias_stmtFactory::make(), ind);
 }

 ::capnp::List<Clockingblock>::Reader Clockingblocks = cap_root.getFactoryClockingblock();
 for (unsigned ind = 0; ind < Clockingblocks.size(); ind++) {
   setId(clocking_blockFactory::make(), ind);
 }

 ::capnp::List<Instancearray>::Reader Instancearrays = cap_root.getFactoryInstancearray();
 for (unsigned ind = 0; ind < Instancearrays.size(); ind++) {
   setId(instance_arrayFactory::make(), ind);
 }

 ::capnp::List<Module>::Reader Modules = cap_root.getFactoryModule();
 for (unsigned ind = 0; ind < Modules.size(); ind++) {
   setId(moduleFactory::make(), ind);
 }

 ::capnp::List<Interface>::Reader Interfaces = cap_root.getFactoryInterface();
 for (unsigned ind = 0; ind < Interfaces.size(); ind++) {
   setId(interfaceFactory::make(), ind);
 }

 ::capnp::List<Program>::Reader Programs = cap_root.getFactoryProgram();
 for (unsigned ind = 0; ind < Programs.size(); ind++) {
   setId(programFactory::make(), ind);
 }

 ::capnp::List<Arraynet>::Reader Arraynets = cap_root.getFactoryArraynet();
 for (unsigned ind = 0; ind < Arraynets.size(); ind++) {
   setId(array_netFactory::make(), ind);
 }

 ::capnp::List<Logicvar>::Reader Logicvars = cap_root.getFactoryLogicvar();
 for (unsigned ind = 0; ind < Logicvars.size(); ind++) {
   setId(logic_varFactory::make(), ind);
 }

 ::capnp::List<Arrayvar>::Reader Arrayvars = cap_root.getFactoryArrayvar();
 for (unsigned ind = 0; ind < Arrayvars.size(); ind++) {
   setId(array_varFactory::make(), ind);
 }

 ::capnp::List<Namedevent>::Reader Namedevents = cap_root.getFactoryNamedevent();
 for (unsigned ind = 0; ind < Namedevents.size(); ind++) {
   setId(named_eventFactory::make(), ind);
 }

 ::capnp::List<Namedeventarray>::Reader Namedeventarrays = cap_root.getFactoryNamedeventarray();
 for (unsigned ind = 0; ind < Namedeventarrays.size(); ind++) {
   setId(named_event_arrayFactory::make(), ind);
 }

 ::capnp::List<Specparam>::Reader Specparams = cap_root.getFactorySpecparam();
 for (unsigned ind = 0; ind < Specparams.size(); ind++) {
   setId(spec_paramFactory::make(), ind);
 }

 ::capnp::List<Classdefn>::Reader Classdefns = cap_root.getFactoryClassdefn();
 for (unsigned ind = 0; ind < Classdefns.size(); ind++) {
   setId(class_defnFactory::make(), ind);
 }

 ::capnp::List<Package>::Reader Packages = cap_root.getFactoryPackage();
 for (unsigned ind = 0; ind < Packages.size(); ind++) {
   setId(packageFactory::make(), ind);
 }

 ::capnp::List<Design>::Reader Designs = cap_root.getFactoryDesign();
 for (unsigned ind = 0; ind < Designs.size(); ind++) {
   setId(designFactory::make(), ind);
 }
  
  

 index = 0;
 for (Process::Reader obj : Processs) {
   processFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   processFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   processFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   processFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Begin::Reader obj : Begins) {
   beginFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   beginFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   beginFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   beginFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    beginFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    beginFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));

   index++;
 }

 index = 0;
 for (Namedbegin::Reader obj : Namedbegins) {
   named_beginFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   named_beginFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   named_beginFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   named_beginFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    named_beginFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    named_beginFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));

   index++;
 }

 index = 0;
 for (Distribution::Reader obj : Distributions) {
   distributionFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   distributionFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   distributionFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   distributionFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Operation::Reader obj : Operations) {
   operationFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   operationFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   operationFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   operationFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    operationFactory::objects_[index]->set_vpiOpType(obj.getVpiOpType());
    
    if (obj.getOperands().size()) { 
      VectorOfoperand_group* vect = VectorOfoperand_groupFactory::make();
      for (unsigned int ind = 0; ind < obj.getOperands().size(); ind++) {
 	vect->push_back((operand_group*)getObject(obj.getOperands()[ind].getType(),obj.getOperands()[ind].getIndex()-1));
    }
      operationFactory::objects_[index]->set_operands(vect);
    }
    operationFactory::objects_[index]->set_vpiDecompile(SymbolFactory::getSymbol(obj.getVpiDecompile()));
    operationFactory::objects_[index]->set_vpiSize(obj.getVpiSize());

   index++;
 }

 index = 0;
 for (Refobj::Reader obj : Refobjs) {
   ref_objFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   ref_objFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   ref_objFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   ref_objFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Task::Reader obj : Tasks) {
   taskFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   taskFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   taskFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   taskFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    taskFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    taskFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    taskFactory::objects_[index]->set_vpiMethod(obj.getVpiMethod());
    taskFactory::objects_[index]->set_vpiAccessType(obj.getVpiAccessType());
    taskFactory::objects_[index]->set_vpiVisibility(obj.getVpiVisibility());
    taskFactory::objects_[index]->set_vpiVirtual(obj.getVpiVirtual());
    taskFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    taskFactory::objects_[index]->set_vpiDPIContext(obj.getVpiDPIContext());
    taskFactory::objects_[index]->set_vpiDPICStr(obj.getVpiDPICStr());
    taskFactory::objects_[index]->set_vpiDPICIdentifier(SymbolFactory::getSymbol(obj.getVpiDPICIdentifier()));
     taskFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     taskFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
     taskFactory::objects_[index]->set_variables((variables*)getObject(obj.getVariables().getType(),obj.getVariables().getIndex()-1));
   if (obj.getClassdefn()) 
     taskFactory::objects_[index]->set_class_defn(clocking_blockFactory::objects_[obj.getClassdefn()-1]);
   if (obj.getRefobj()) 
     taskFactory::objects_[index]->set_ref_obj(ref_objFactory::objects_[obj.getRefobj()-1]);
   if (obj.getIodecl()) 
     taskFactory::objects_[index]->set_io_decl(io_declFactory::objects_[obj.getIodecl()-1]);

   index++;
 }

 index = 0;
 for (Function::Reader obj : Functions) {
   functionFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   functionFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   functionFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   functionFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    functionFactory::objects_[index]->set_vpiSigned(obj.getVpiSigned());
    functionFactory::objects_[index]->set_vpiSize(obj.getVpiSize());
    functionFactory::objects_[index]->set_vpiFuncType(obj.getVpiFuncType());
    functionFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    functionFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    functionFactory::objects_[index]->set_vpiMethod(obj.getVpiMethod());
    functionFactory::objects_[index]->set_vpiAccessType(obj.getVpiAccessType());
    functionFactory::objects_[index]->set_vpiVisibility(obj.getVpiVisibility());
    functionFactory::objects_[index]->set_vpiVirtual(obj.getVpiVirtual());
    functionFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    functionFactory::objects_[index]->set_vpiDPIContext(obj.getVpiDPIContext());
    functionFactory::objects_[index]->set_vpiDPICStr(obj.getVpiDPICStr());
    functionFactory::objects_[index]->set_vpiDPICIdentifier(SymbolFactory::getSymbol(obj.getVpiDPICIdentifier()));
     functionFactory::objects_[index]->set_left_expr((expr*)getObject(obj.getLeftexpr().getType(),obj.getLeftexpr().getIndex()-1));
     functionFactory::objects_[index]->set_right_expr((expr*)getObject(obj.getRightexpr().getType(),obj.getRightexpr().getIndex()-1));
     functionFactory::objects_[index]->set_variables((variables*)getObject(obj.getVariables().getType(),obj.getVariables().getIndex()-1));
   if (obj.getClassdefn()) 
     functionFactory::objects_[index]->set_class_defn(clocking_blockFactory::objects_[obj.getClassdefn()-1]);
   if (obj.getRefobj()) 
     functionFactory::objects_[index]->set_ref_obj(ref_objFactory::objects_[obj.getRefobj()-1]);
   if (obj.getIodecl()) 
     functionFactory::objects_[index]->set_io_decl(io_declFactory::objects_[obj.getIodecl()-1]);

   index++;
 }

 index = 0;
 for (Modport::Reader obj : Modports) {
   modportFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   modportFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   modportFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   modportFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    modportFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    
    if (obj.getIodecls().size()) { 
      VectorOfio_decl* vect = VectorOfio_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getIodecls().size(); ind++) {
 	vect->push_back(io_declFactory::objects_[obj.getIodecls()[ind]-1]);
    }
      modportFactory::objects_[index]->set_io_decls(vect);
    }
   if (obj.getInterface()) 
     modportFactory::objects_[index]->set_interface(interfaceFactory::objects_[obj.getInterface()-1]);

   index++;
 }

 index = 0;
 for (Interfacetfdecl::Reader obj : Interfacetfdecls) {
   interface_tf_declFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   interface_tf_declFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   interface_tf_declFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   interface_tf_declFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    interface_tf_declFactory::objects_[index]->set_vpiAccessType(obj.getVpiAccessType());
    
    if (obj.getTasks().size()) { 
      VectorOftask* vect = VectorOftaskFactory::make();
      for (unsigned int ind = 0; ind < obj.getTasks().size(); ind++) {
 	vect->push_back(taskFactory::objects_[obj.getTasks()[ind]-1]);
    }
      interface_tf_declFactory::objects_[index]->set_tasks(vect);
    }
    
    if (obj.getFunctions().size()) { 
      VectorOffunction* vect = VectorOffunctionFactory::make();
      for (unsigned int ind = 0; ind < obj.getFunctions().size(); ind++) {
 	vect->push_back(functionFactory::objects_[obj.getFunctions()[ind]-1]);
    }
      interface_tf_declFactory::objects_[index]->set_functions(vect);
    }

   index++;
 }

 index = 0;
 for (Interfacearray::Reader obj : Interfacearrays) {
   interface_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   interface_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   interface_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   interface_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Contassign::Reader obj : Contassigns) {
   cont_assignFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   cont_assignFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   cont_assignFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   cont_assignFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Port::Reader obj : Ports) {
   portFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   portFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   portFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   portFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Modulearray::Reader obj : Modulearrays) {
   module_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   module_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   module_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   module_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Primitive::Reader obj : Primitives) {
   primitiveFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   primitiveFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   primitiveFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   primitiveFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Primitivearray::Reader obj : Primitivearrays) {
   primitive_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   primitive_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   primitive_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   primitive_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Modpath::Reader obj : Modpaths) {
   mod_pathFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   mod_pathFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   mod_pathFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   mod_pathFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Tchk::Reader obj : Tchks) {
   tchkFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   tchkFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   tchkFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   tchkFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Defparam::Reader obj : Defparams) {
   def_paramFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   def_paramFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   def_paramFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   def_paramFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Iodecl::Reader obj : Iodecls) {
   io_declFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   io_declFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   io_declFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   io_declFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Aliasstmt::Reader obj : Aliasstmts) {
   alias_stmtFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   alias_stmtFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   alias_stmtFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   alias_stmtFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Clockingblock::Reader obj : Clockingblocks) {
   clocking_blockFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   clocking_blockFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   clocking_blockFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   clocking_blockFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Instancearray::Reader obj : Instancearrays) {
   instance_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   instance_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   instance_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   instance_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Module::Reader obj : Modules) {
   moduleFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   moduleFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   moduleFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   moduleFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    moduleFactory::objects_[index]->set_vpiIndex(obj.getVpiIndex());
    moduleFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    moduleFactory::objects_[index]->set_vpiTopModule(obj.getVpiTopModule());
    moduleFactory::objects_[index]->set_vpiDefDecayTime(obj.getVpiDefDecayTime());
     moduleFactory::objects_[index]->set_expr_dist((expr_dist*)getObject(obj.getExprdist().getType(),obj.getExprdist().getIndex()-1));
     moduleFactory::objects_[index]->set_instance_array((instance_array*)getObject(obj.getInstancearray().getType(),obj.getInstancearray().getIndex()-1));
    
    if (obj.getScope().size()) { 
      VectorOfscope* vect = VectorOfscopeFactory::make();
      for (unsigned int ind = 0; ind < obj.getScope().size(); ind++) {
 	vect->push_back((scope*)getObject(obj.getScope()[ind].getType(),obj.getScope()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_scope(vect);
    }
    
    if (obj.getProcess().size()) { 
      VectorOfprocess* vect = VectorOfprocessFactory::make();
      for (unsigned int ind = 0; ind < obj.getProcess().size(); ind++) {
 	vect->push_back((process*)getObject(obj.getProcess()[ind].getType(),obj.getProcess()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_process(vect);
    }
    
    if (obj.getPrimitives().size()) { 
      VectorOfprimitive* vect = VectorOfprimitiveFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrimitives().size(); ind++) {
 	vect->push_back((primitive*)getObject(obj.getPrimitives()[ind].getType(),obj.getPrimitives()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_primitives(vect);
    }
    
    if (obj.getPrimitivearrays().size()) { 
      VectorOfprimitive_array* vect = VectorOfprimitive_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrimitivearrays().size(); ind++) {
 	vect->push_back((primitive_array*)getObject(obj.getPrimitivearrays()[ind].getType(),obj.getPrimitivearrays()[ind].getIndex()-1));
    }
      moduleFactory::objects_[index]->set_primitive_arrays(vect);
    }
   if (obj.getGlobalclocking()) 
     moduleFactory::objects_[index]->set_global_clocking(clocking_blockFactory::objects_[obj.getGlobalclocking()-1]);
   if (obj.getDefaultclocking()) 
     moduleFactory::objects_[index]->set_default_clocking(clocking_blockFactory::objects_[obj.getDefaultclocking()-1]);
   if (obj.getModulearray()) 
     moduleFactory::objects_[index]->set_module_array(module_arrayFactory::objects_[obj.getModulearray()-1]);
    
    if (obj.getPorts().size()) { 
      VectorOfport* vect = VectorOfportFactory::make();
      for (unsigned int ind = 0; ind < obj.getPorts().size(); ind++) {
 	vect->push_back(portFactory::objects_[obj.getPorts()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_ports(vect);
    }
    
    if (obj.getInterfaces().size()) { 
      VectorOfinterface* vect = VectorOfinterfaceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfaces().size(); ind++) {
 	vect->push_back(interfaceFactory::objects_[obj.getInterfaces()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_interfaces(vect);
    }
    
    if (obj.getInterfacearrays().size()) { 
      VectorOfinterface_array* vect = VectorOfinterface_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfacearrays().size(); ind++) {
 	vect->push_back(interface_arrayFactory::objects_[obj.getInterfacearrays()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_interface_arrays(vect);
    }
    
    if (obj.getContassigns().size()) { 
      VectorOfcont_assign* vect = VectorOfcont_assignFactory::make();
      for (unsigned int ind = 0; ind < obj.getContassigns().size(); ind++) {
 	vect->push_back(cont_assignFactory::objects_[obj.getContassigns()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_cont_assigns(vect);
    }
    
    if (obj.getModules().size()) { 
      VectorOfmodule* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getModules()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_modules(vect);
    }
    
    if (obj.getModulearrays().size()) { 
      VectorOfmodule_array* vect = VectorOfmodule_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getModulearrays().size(); ind++) {
 	vect->push_back(module_arrayFactory::objects_[obj.getModulearrays()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_module_arrays(vect);
    }
    
    if (obj.getModpaths().size()) { 
      VectorOfmod_path* vect = VectorOfmod_pathFactory::make();
      for (unsigned int ind = 0; ind < obj.getModpaths().size(); ind++) {
 	vect->push_back(mod_pathFactory::objects_[obj.getModpaths()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_mod_paths(vect);
    }
    
    if (obj.getTchks().size()) { 
      VectorOftchk* vect = VectorOftchkFactory::make();
      for (unsigned int ind = 0; ind < obj.getTchks().size(); ind++) {
 	vect->push_back(tchkFactory::objects_[obj.getTchks()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_tchks(vect);
    }
    
    if (obj.getDefparams().size()) { 
      VectorOfdef_param* vect = VectorOfdef_paramFactory::make();
      for (unsigned int ind = 0; ind < obj.getDefparams().size(); ind++) {
 	vect->push_back(def_paramFactory::objects_[obj.getDefparams()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_def_params(vect);
    }
    
    if (obj.getIodecls().size()) { 
      VectorOfio_decl* vect = VectorOfio_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getIodecls().size(); ind++) {
 	vect->push_back(io_declFactory::objects_[obj.getIodecls()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_io_decls(vect);
    }
    
    if (obj.getAliasstmts().size()) { 
      VectorOfalias_stmt* vect = VectorOfalias_stmtFactory::make();
      for (unsigned int ind = 0; ind < obj.getAliasstmts().size(); ind++) {
 	vect->push_back(alias_stmtFactory::objects_[obj.getAliasstmts()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_alias_stmts(vect);
    }
    
    if (obj.getClockingblocks().size()) { 
      VectorOfclocking_block* vect = VectorOfclocking_blockFactory::make();
      for (unsigned int ind = 0; ind < obj.getClockingblocks().size(); ind++) {
 	vect->push_back(clocking_blockFactory::objects_[obj.getClockingblocks()[ind]-1]);
    }
      moduleFactory::objects_[index]->set_clocking_blocks(vect);
    }

   index++;
 }

 index = 0;
 for (Interface::Reader obj : Interfaces) {
   interfaceFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   interfaceFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   interfaceFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   interfaceFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    interfaceFactory::objects_[index]->set_vpiIndex(obj.getVpiIndex());
     interfaceFactory::objects_[index]->set_expr_dist((expr_dist*)getObject(obj.getExprdist().getType(),obj.getExprdist().getIndex()-1));
     interfaceFactory::objects_[index]->set_instance_array((instance_array*)getObject(obj.getInstancearray().getType(),obj.getInstancearray().getIndex()-1));
    
    if (obj.getProcess().size()) { 
      VectorOfprocess* vect = VectorOfprocessFactory::make();
      for (unsigned int ind = 0; ind < obj.getProcess().size(); ind++) {
 	vect->push_back((process*)getObject(obj.getProcess()[ind].getType(),obj.getProcess()[ind].getIndex()-1));
    }
      interfaceFactory::objects_[index]->set_process(vect);
    }
    
    if (obj.getInterfacetfdecls().size()) { 
      VectorOfinterface_tf_decl* vect = VectorOfinterface_tf_declFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfacetfdecls().size(); ind++) {
 	vect->push_back(interface_tf_declFactory::objects_[obj.getInterfacetfdecls()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_interface_tf_decls(vect);
    }
    
    if (obj.getModports().size()) { 
      VectorOfmodport* vect = VectorOfmodportFactory::make();
      for (unsigned int ind = 0; ind < obj.getModports().size(); ind++) {
 	vect->push_back(modportFactory::objects_[obj.getModports()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_modports(vect);
    }
   if (obj.getGlobalclocking()) 
     interfaceFactory::objects_[index]->set_global_clocking(clocking_blockFactory::objects_[obj.getGlobalclocking()-1]);
   if (obj.getDefaultclocking()) 
     interfaceFactory::objects_[index]->set_default_clocking(clocking_blockFactory::objects_[obj.getDefaultclocking()-1]);
    
    if (obj.getModpaths().size()) { 
      VectorOfmod_path* vect = VectorOfmod_pathFactory::make();
      for (unsigned int ind = 0; ind < obj.getModpaths().size(); ind++) {
 	vect->push_back(mod_pathFactory::objects_[obj.getModpaths()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_mod_paths(vect);
    }
    
    if (obj.getContassigns().size()) { 
      VectorOfcont_assign* vect = VectorOfcont_assignFactory::make();
      for (unsigned int ind = 0; ind < obj.getContassigns().size(); ind++) {
 	vect->push_back(cont_assignFactory::objects_[obj.getContassigns()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_cont_assigns(vect);
    }
    
    if (obj.getInterfaces().size()) { 
      VectorOfinterface* vect = VectorOfinterfaceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfaces().size(); ind++) {
 	vect->push_back(interfaceFactory::objects_[obj.getInterfaces()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_interfaces(vect);
    }
    
    if (obj.getInterfacearrays().size()) { 
      VectorOfinterface_array* vect = VectorOfinterface_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfacearrays().size(); ind++) {
 	vect->push_back(interface_arrayFactory::objects_[obj.getInterfacearrays()[ind]-1]);
    }
      interfaceFactory::objects_[index]->set_interface_arrays(vect);
    }

   index++;
 }

 index = 0;
 for (Program::Reader obj : Programs) {
   programFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   programFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   programFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   programFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    programFactory::objects_[index]->set_vpiIndex(obj.getVpiIndex());
    programFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
     programFactory::objects_[index]->set_instance_array((instance_array*)getObject(obj.getInstancearray().getType(),obj.getInstancearray().getIndex()-1));
     programFactory::objects_[index]->set_expr_dist((expr_dist*)getObject(obj.getExprdist().getType(),obj.getExprdist().getIndex()-1));
    
    if (obj.getProcess().size()) { 
      VectorOfprocess* vect = VectorOfprocessFactory::make();
      for (unsigned int ind = 0; ind < obj.getProcess().size(); ind++) {
 	vect->push_back((process*)getObject(obj.getProcess()[ind].getType(),obj.getProcess()[ind].getIndex()-1));
    }
      programFactory::objects_[index]->set_process(vect);
    }
   if (obj.getDefaultclocking()) 
     programFactory::objects_[index]->set_default_clocking(clocking_blockFactory::objects_[obj.getDefaultclocking()-1]);
    
    if (obj.getInterfaces().size()) { 
      VectorOfinterface* vect = VectorOfinterfaceFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfaces().size(); ind++) {
 	vect->push_back(interfaceFactory::objects_[obj.getInterfaces()[ind]-1]);
    }
      programFactory::objects_[index]->set_interfaces(vect);
    }
    
    if (obj.getInterfacearrays().size()) { 
      VectorOfinterface_array* vect = VectorOfinterface_arrayFactory::make();
      for (unsigned int ind = 0; ind < obj.getInterfacearrays().size(); ind++) {
 	vect->push_back(interface_arrayFactory::objects_[obj.getInterfacearrays()[ind]-1]);
    }
      programFactory::objects_[index]->set_interface_arrays(vect);
    }
    
    if (obj.getContassigns().size()) { 
      VectorOfcont_assign* vect = VectorOfcont_assignFactory::make();
      for (unsigned int ind = 0; ind < obj.getContassigns().size(); ind++) {
 	vect->push_back(cont_assignFactory::objects_[obj.getContassigns()[ind]-1]);
    }
      programFactory::objects_[index]->set_cont_assigns(vect);
    }
    
    if (obj.getClockingblocks().size()) { 
      VectorOfclocking_block* vect = VectorOfclocking_blockFactory::make();
      for (unsigned int ind = 0; ind < obj.getClockingblocks().size(); ind++) {
 	vect->push_back(clocking_blockFactory::objects_[obj.getClockingblocks()[ind]-1]);
    }
      programFactory::objects_[index]->set_clocking_blocks(vect);
    }

   index++;
 }

 index = 0;
 for (Arraynet::Reader obj : Arraynets) {
   array_netFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   array_netFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   array_netFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   array_netFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Logicvar::Reader obj : Logicvars) {
   logic_varFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   logic_varFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   logic_varFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   logic_varFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Arrayvar::Reader obj : Arrayvars) {
   array_varFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   array_varFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   array_varFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   array_varFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Namedevent::Reader obj : Namedevents) {
   named_eventFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   named_eventFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   named_eventFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   named_eventFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Namedeventarray::Reader obj : Namedeventarrays) {
   named_event_arrayFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   named_event_arrayFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   named_event_arrayFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   named_event_arrayFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Specparam::Reader obj : Specparams) {
   spec_paramFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   spec_paramFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   spec_paramFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   spec_paramFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Classdefn::Reader obj : Classdefns) {
   class_defnFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   class_defnFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   class_defnFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   class_defnFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());

   index++;
 }

 index = 0;
 for (Package::Reader obj : Packages) {
   packageFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   packageFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   packageFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   packageFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    packageFactory::objects_[index]->set_vpiUnit(obj.getVpiUnit());
    packageFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    packageFactory::objects_[index]->set_vpiFullName(SymbolFactory::getSymbol(obj.getVpiFullName()));
    packageFactory::objects_[index]->set_vpiDefName(SymbolFactory::getSymbol(obj.getVpiDefName()));
    packageFactory::objects_[index]->set_vpiArrayMember(obj.getVpiArrayMember());
    packageFactory::objects_[index]->set_vpiCellInstance(obj.getVpiCellInstance());
    packageFactory::objects_[index]->set_vpiDefNetType(obj.getVpiDefNetType());
    packageFactory::objects_[index]->set_vpiDefFile(SymbolFactory::getSymbol(obj.getVpiDefFile()));
    packageFactory::objects_[index]->set_vpiDefDelayMode(obj.getVpiDefDelayMode());
    packageFactory::objects_[index]->set_vpiProtected(obj.getVpiProtected());
    packageFactory::objects_[index]->set_vpiTimePrecision(obj.getVpiTimePrecision());
    packageFactory::objects_[index]->set_vpiTimeUnit(obj.getVpiTimeUnit());
    packageFactory::objects_[index]->set_vpiUnconnDrive(obj.getVpiUnconnDrive());
    packageFactory::objects_[index]->set_vpiLibrary(SymbolFactory::getSymbol(obj.getVpiLibrary()));
    packageFactory::objects_[index]->set_vpiCell(SymbolFactory::getSymbol(obj.getVpiCell()));
    packageFactory::objects_[index]->set_vpiConfig(SymbolFactory::getSymbol(obj.getVpiConfig()));
    packageFactory::objects_[index]->set_vpiAutomatic(obj.getVpiAutomatic());
    packageFactory::objects_[index]->set_vpiTop(obj.getVpiTop());
    
    if (obj.getTaskfunc().size()) { 
      VectorOftask_func* vect = VectorOftask_funcFactory::make();
      for (unsigned int ind = 0; ind < obj.getTaskfunc().size(); ind++) {
 	vect->push_back((task_func*)getObject(obj.getTaskfunc()[ind].getType(),obj.getTaskfunc()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_task_func(vect);
    }
    
    if (obj.getNet().size()) { 
      VectorOfnet* vect = VectorOfnetFactory::make();
      for (unsigned int ind = 0; ind < obj.getNet().size(); ind++) {
 	vect->push_back((net*)getObject(obj.getNet()[ind].getType(),obj.getNet()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_net(vect);
    }
    
    if (obj.getArraynet().size()) { 
      VectorOfarray_net* vect = VectorOfarray_netFactory::make();
      for (unsigned int ind = 0; ind < obj.getArraynet().size(); ind++) {
 	vect->push_back((array_net*)getObject(obj.getArraynet()[ind].getType(),obj.getArraynet()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_array_net(vect);
    }
    
    if (obj.getVariables().size()) { 
      VectorOfvariables* vect = VectorOfvariablesFactory::make();
      for (unsigned int ind = 0; ind < obj.getVariables().size(); ind++) {
 	vect->push_back((variables*)getObject(obj.getVariables()[ind].getType(),obj.getVariables()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_variables(vect);
    }
    
    if (obj.getParameters().size()) { 
      VectorOfparameters* vect = VectorOfparametersFactory::make();
      for (unsigned int ind = 0; ind < obj.getParameters().size(); ind++) {
 	vect->push_back((parameters*)getObject(obj.getParameters()[ind].getType(),obj.getParameters()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_parameters(vect);
    }
    
    if (obj.getAssertion().size()) { 
      VectorOfassertion* vect = VectorOfassertionFactory::make();
      for (unsigned int ind = 0; ind < obj.getAssertion().size(); ind++) {
 	vect->push_back((assertion*)getObject(obj.getAssertion()[ind].getType(),obj.getAssertion()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_assertion(vect);
    }
    
    if (obj.getTypespec().size()) { 
      VectorOftypespec* vect = VectorOftypespecFactory::make();
      for (unsigned int ind = 0; ind < obj.getTypespec().size(); ind++) {
 	vect->push_back((typespec*)getObject(obj.getTypespec()[ind].getType(),obj.getTypespec()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_typespec(vect);
    }
    
    if (obj.getClassdefn().size()) { 
      VectorOfclass_defn* vect = VectorOfclass_defnFactory::make();
      for (unsigned int ind = 0; ind < obj.getClassdefn().size(); ind++) {
 	vect->push_back((class_defn*)getObject(obj.getClassdefn()[ind].getType(),obj.getClassdefn()[ind].getIndex()-1));
    }
      packageFactory::objects_[index]->set_class_defn(vect);
    }
    
    if (obj.getPrograms().size()) { 
      VectorOfprogram* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getPrograms().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getPrograms()[ind]-1]);
    }
      packageFactory::objects_[index]->set_programs(vect);
    }
    
    if (obj.getProgramarrays().size()) { 
      VectorOfprogram* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getProgramarrays().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getProgramarrays()[ind]-1]);
    }
      packageFactory::objects_[index]->set_program_arrays(vect);
    }
    
    if (obj.getLogicvar().size()) { 
      VectorOflogic_var* vect = VectorOflogic_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getLogicvar().size(); ind++) {
 	vect->push_back(logic_varFactory::objects_[obj.getLogicvar()[ind]-1]);
    }
      packageFactory::objects_[index]->set_logic_var(vect);
    }
    
    if (obj.getArrayvar().size()) { 
      VectorOfarray_var* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvar().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvar()[ind]-1]);
    }
      packageFactory::objects_[index]->set_array_var(vect);
    }
    
    if (obj.getArrayvarmem().size()) { 
      VectorOfarray_var* vect = VectorOfarray_varFactory::make();
      for (unsigned int ind = 0; ind < obj.getArrayvarmem().size(); ind++) {
 	vect->push_back(array_varFactory::objects_[obj.getArrayvarmem()[ind]-1]);
    }
      packageFactory::objects_[index]->set_array_var_mem(vect);
    }
    
    if (obj.getNamedevent().size()) { 
      VectorOfnamed_event* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedevent().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedevent()[ind]-1]);
    }
      packageFactory::objects_[index]->set_named_event(vect);
    }
    
    if (obj.getNamedeventarray().size()) { 
      VectorOfnamed_event* vect = VectorOfnamed_eventFactory::make();
      for (unsigned int ind = 0; ind < obj.getNamedeventarray().size(); ind++) {
 	vect->push_back(named_eventFactory::objects_[obj.getNamedeventarray()[ind]-1]);
    }
      packageFactory::objects_[index]->set_named_event_array(vect);
    }
    
    if (obj.getSpecparam().size()) { 
      VectorOfspec_param* vect = VectorOfspec_paramFactory::make();
      for (unsigned int ind = 0; ind < obj.getSpecparam().size(); ind++) {
 	vect->push_back(spec_paramFactory::objects_[obj.getSpecparam()[ind]-1]);
    }
      packageFactory::objects_[index]->set_spec_param(vect);
    }

   index++;
 }

 index = 0;
 for (Design::Reader obj : Designs) {
   designFactory::objects_[index]->set_uhdmParentType(obj.getUhdmParentType());
   designFactory::objects_[index]->set_vpiParent(getObject(obj.getUhdmParentType(),obj.getVpiParent()-1));
   designFactory::objects_[index]->set_vpiFile(SymbolFactory::getSymbol(obj.getVpiFile()));
   designFactory::objects_[index]->set_vpiLineNo(obj.getVpiLineNo());
    designFactory::objects_[index]->set_vpiName(SymbolFactory::getSymbol(obj.getVpiName()));
    
    if (obj.getAllModules().size()) { 
      VectorOfmodule* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getAllModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getAllModules()[ind]-1]);
    }
      designFactory::objects_[index]->set_allModules(vect);
    }
    
    if (obj.getTopModules().size()) { 
      VectorOfmodule* vect = VectorOfmoduleFactory::make();
      for (unsigned int ind = 0; ind < obj.getTopModules().size(); ind++) {
 	vect->push_back(moduleFactory::objects_[obj.getTopModules()[ind]-1]);
    }
      designFactory::objects_[index]->set_topModules(vect);
    }
    
    if (obj.getAllPrograms().size()) { 
      VectorOfprogram* vect = VectorOfprogramFactory::make();
      for (unsigned int ind = 0; ind < obj.getAllPrograms().size(); ind++) {
 	vect->push_back(programFactory::objects_[obj.getAllPrograms()[ind]-1]);
    }
      designFactory::objects_[index]->set_allPrograms(vect);
    }
    
    if (obj.getAllPackages().size()) { 
      VectorOfpackage* vect = VectorOfpackageFactory::make();
      for (unsigned int ind = 0; ind < obj.getAllPackages().size(); ind++) {
 	vect->push_back(packageFactory::objects_[obj.getAllPackages()[ind]-1]);
    }
      designFactory::objects_[index]->set_allPackages(vect);
    }

   index++;
 }
  
  
   for (auto d : designFactory::objects_) {
    vpiHandle designH = uhdm_handleFactory::make(uhdmdesign, d);
    designs.push_back(designH);
  }
   
  close(fileid); 
  return designs;
}

