/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   vpi_user.cpp
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */
#include <string>
#include <vector>
#include <iostream>
#include "include/sv_vpi_user.h"
#include "include/vhpi_user.h"
#include "include/vpi_uhdm.h"
#include "headers/containers.h"
#include "headers/uhdm.h"
#include <string.h>

#include "headers/process.h"
#include "headers/scope.h"
#include "headers/task.h"
#include "headers/function.h"
#include "headers/modport.h"
#include "headers/interface_tf_decl.h"
#include "headers/interface.h"
#include "headers/interface_array.h"
#include "headers/cont_assign.h"
#include "headers/port.h"
#include "headers/module_array.h"
#include "headers/primitive.h"
#include "headers/primitive_array.h"
#include "headers/mod_path.h"
#include "headers/tchk.h"
#include "headers/def_param.h"
#include "headers/io_decl.h"
#include "headers/alias_stmt.h"
#include "headers/clocking_block.h"
#include "headers/instance_array.h"
#include "headers/module.h"
#include "headers/program.h"
#include "headers/instance.h"
#include "headers/package.h"
#include "headers/design.h"


using namespace UHDM;

vpiHandle vpi_handle_by_name (PLI_BYTE8    *name,
                              vpiHandle    scope) {
  return 0;
}

vpiHandle vpi_handle_by_index (vpiHandle object,
                                PLI_INT32    indx) {
  return 0;
}

/* for traversing relationships */

vpiHandle vpi_handle (PLI_INT32 type,
                      vpiHandle   refHandle) {
  uhdm_handle* handle = (uhdm_handle*) refHandle;
  BaseClass*  object = (BaseClass*) handle->object;
  
 if (handle->type == uhdmprocess) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((process*)(object))->get_uhdmParentType(), ((process*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmscope) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((scope*)(object))->get_uhdmParentType(), ((scope*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmtask) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((task*)(object))->get_uhdmParentType(), ((task*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmfunction) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((function*)(object))->get_uhdmParentType(), ((function*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodport) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((modport*)(object))->get_uhdmParentType(), ((modport*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodport) {
     if (type == vpiInterface) {
       return (vpiHandle) new uhdm_handle(uhdminterface, ((modport*)(object))->get_interface());
 } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((interface_tf_decl*)(object))->get_uhdmParentType(), ((interface_tf_decl*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdminterface) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((interface*)(object))->get_uhdmParentType(), ((interface*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdminterface) {
     if (type == vpiGlobalClocking) {
       return (vpiHandle) new uhdm_handle(uhdmclocking_block, ((interface*)(object))->get_global_clocking());
 } 
}

 if (handle->type == uhdminterface) {
     if (type == vpiDefaultClocking) {
       return (vpiHandle) new uhdm_handle(uhdmclocking_block, ((interface*)(object))->get_default_clocking());
 } 
}

 if (handle->type == uhdminterface_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((interface_array*)(object))->get_uhdmParentType(), ((interface_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmcont_assign) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((cont_assign*)(object))->get_uhdmParentType(), ((cont_assign*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmport) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((port*)(object))->get_uhdmParentType(), ((port*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodule_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((module_array*)(object))->get_uhdmParentType(), ((module_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmprimitive) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((primitive*)(object))->get_uhdmParentType(), ((primitive*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmprimitive_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((primitive_array*)(object))->get_uhdmParentType(), ((primitive_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmod_path) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((mod_path*)(object))->get_uhdmParentType(), ((mod_path*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmtchk) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((tchk*)(object))->get_uhdmParentType(), ((tchk*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmdef_param) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((def_param*)(object))->get_uhdmParentType(), ((def_param*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmio_decl) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((io_decl*)(object))->get_uhdmParentType(), ((io_decl*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmalias_stmt) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((alias_stmt*)(object))->get_uhdmParentType(), ((alias_stmt*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmclocking_block) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((clocking_block*)(object))->get_uhdmParentType(), ((clocking_block*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdminstance_array) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((instance_array*)(object))->get_uhdmParentType(), ((instance_array*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((module*)(object))->get_uhdmParentType(), ((module*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiInstanceArray) {
       return (vpiHandle) new uhdm_handle(uhdminstance_array, ((module*)(object))->get_instance_array());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiGlobalClocking) {
       return (vpiHandle) new uhdm_handle(uhdmclocking_block, ((module*)(object))->get_global_clocking());
 } 
}

 if (handle->type == uhdmmodule) {
     if (type == vpiDefaultClocking) {
       return (vpiHandle) new uhdm_handle(uhdmclocking_block, ((module*)(object))->get_default_clocking());
 } 
}

 if (handle->type == uhdmprogram) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((program*)(object))->get_uhdmParentType(), ((program*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmprogram) {
     if (type == vpiInstanceArray) {
       return (vpiHandle) new uhdm_handle(uhdminstance_array, ((program*)(object))->get_instance_array());
 } 
}

 if (handle->type == uhdmprogram) {
     if (type == vpiDefaultClocking) {
       return (vpiHandle) new uhdm_handle(uhdmclocking_block, ((program*)(object))->get_default_clocking());
 } 
}

 if (handle->type == uhdmpackage) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((package*)(object))->get_uhdmParentType(), ((package*)(object))->get_vpiParent());
 } 
}

 if (handle->type == uhdmdesign) {
     if (type == vpiParent) {
       return (vpiHandle) new uhdm_handle(((design*)(object))->get_uhdmParentType(), ((design*)(object))->get_vpiParent());
 } 
}

  std::cout << "VPI ERROR: Bad usage of vpi_handle" << std::endl;    
  return 0;
}

vpiHandle vpi_handle_multi (PLI_INT32 type,
                            vpiHandle   refHandle1,
                            vpiHandle   refHandle2,
                            ... ) {
  return 0;
}

vpiHandle vpi_iterate (PLI_INT32 type, vpiHandle refHandle) {
  const uhdm_handle* const handle = (uhdm_handle*) refHandle;
  const BaseClass*  object = (BaseClass*) handle->object;
  
    
 if (handle->type == uhdmmodport) {
 if (type == vpiIODecl) {
 if (((modport*)(object))->get_io_decls())
 return (vpiHandle) new uhdm_handle(uhdmio_decls, ((modport*)(object))->get_io_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface_tf_decl) {
 if (type == vpiTask) {
 if (((interface_tf_decl*)(object))->get_tasks())
 return (vpiHandle) new uhdm_handle(uhdmtasks, ((interface_tf_decl*)(object))->get_tasks());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface_tf_decl) {
 if (type == vpiFunction) {
 if (((interface_tf_decl*)(object))->get_functions())
 return (vpiHandle) new uhdm_handle(uhdmfunctions, ((interface_tf_decl*)(object))->get_functions());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiProcess) {
 if (((interface*)(object))->get_process())
 return (vpiHandle) new uhdm_handle(uhdmprocess, ((interface*)(object))->get_process());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiInterfaceTfDecl) {
 if (((interface*)(object))->get_interface_tf_decls())
 return (vpiHandle) new uhdm_handle(uhdminterface_tf_decls, ((interface*)(object))->get_interface_tf_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiModport) {
 if (((interface*)(object))->get_modports())
 return (vpiHandle) new uhdm_handle(uhdmmodports, ((interface*)(object))->get_modports());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiModPath) {
 if (((interface*)(object))->get_mod_paths())
 return (vpiHandle) new uhdm_handle(uhdmmod_paths, ((interface*)(object))->get_mod_paths());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == vpiContAssign) {
 if (((interface*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((interface*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == uhdminterface) {
 if (((interface*)(object))->get_interfaces())
 return (vpiHandle) new uhdm_handle(uhdminterfaces, ((interface*)(object))->get_interfaces());
 else return 0;
  }
 }

    
 if (handle->type == uhdminterface) {
 if (type == uhdminterface_array) {
 if (((interface*)(object))->get_interface_arrays())
 return (vpiHandle) new uhdm_handle(uhdminterface_arrays, ((interface*)(object))->get_interface_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiInternalScope) {
 if (((module*)(object))->get_scope())
 return (vpiHandle) new uhdm_handle(uhdmscope, ((module*)(object))->get_scope());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiProcess) {
 if (((module*)(object))->get_process())
 return (vpiHandle) new uhdm_handle(uhdmprocess, ((module*)(object))->get_process());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiPrimitive) {
 if (((module*)(object))->get_primitives())
 return (vpiHandle) new uhdm_handle(uhdmprimitives, ((module*)(object))->get_primitives());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiPrimitiveArray) {
 if (((module*)(object))->get_primitive_arrays())
 return (vpiHandle) new uhdm_handle(uhdmprimitive_arrays, ((module*)(object))->get_primitive_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiPort) {
 if (((module*)(object))->get_ports())
 return (vpiHandle) new uhdm_handle(uhdmports, ((module*)(object))->get_ports());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == uhdminterface) {
 if (((module*)(object))->get_interfaces())
 return (vpiHandle) new uhdm_handle(uhdminterfaces, ((module*)(object))->get_interfaces());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == uhdminterface_array) {
 if (((module*)(object))->get_interface_arrays())
 return (vpiHandle) new uhdm_handle(uhdminterface_arrays, ((module*)(object))->get_interface_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiContAssign) {
 if (((module*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((module*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiModule) {
 if (((module*)(object))->get_modules())
 return (vpiHandle) new uhdm_handle(uhdmmodules, ((module*)(object))->get_modules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiModuleArray) {
 if (((module*)(object))->get_module_arrays())
 return (vpiHandle) new uhdm_handle(uhdmmodule_arrays, ((module*)(object))->get_module_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiModPath) {
 if (((module*)(object))->get_mod_paths())
 return (vpiHandle) new uhdm_handle(uhdmmod_paths, ((module*)(object))->get_mod_paths());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiTchk) {
 if (((module*)(object))->get_tchks())
 return (vpiHandle) new uhdm_handle(uhdmtchks, ((module*)(object))->get_tchks());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiDefParam) {
 if (((module*)(object))->get_def_params())
 return (vpiHandle) new uhdm_handle(uhdmdef_params, ((module*)(object))->get_def_params());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == vpiIODecl) {
 if (((module*)(object))->get_io_decls())
 return (vpiHandle) new uhdm_handle(uhdmio_decls, ((module*)(object))->get_io_decls());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == uhdmalias_stmt) {
 if (((module*)(object))->get_alias_stmts())
 return (vpiHandle) new uhdm_handle(uhdmalias_stmts, ((module*)(object))->get_alias_stmts());
 else return 0;
  }
 }

    
 if (handle->type == uhdmmodule) {
 if (type == uhdmclocking_block) {
 if (((module*)(object))->get_clocking_blocks())
 return (vpiHandle) new uhdm_handle(uhdmclocking_blocks, ((module*)(object))->get_clocking_blocks());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiProcess) {
 if (((program*)(object))->get_process())
 return (vpiHandle) new uhdm_handle(uhdmprocess, ((program*)(object))->get_process());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == uhdminterface) {
 if (((program*)(object))->get_interfaces())
 return (vpiHandle) new uhdm_handle(uhdminterfaces, ((program*)(object))->get_interfaces());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == uhdminterface_array) {
 if (((program*)(object))->get_interface_arrays())
 return (vpiHandle) new uhdm_handle(uhdminterface_arrays, ((program*)(object))->get_interface_arrays());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == vpiContAssign) {
 if (((program*)(object))->get_cont_assigns())
 return (vpiHandle) new uhdm_handle(uhdmcont_assigns, ((program*)(object))->get_cont_assigns());
 else return 0;
  }
 }

    
 if (handle->type == uhdmprogram) {
 if (type == uhdmclocking_block) {
 if (((program*)(object))->get_clocking_blocks())
 return (vpiHandle) new uhdm_handle(uhdmclocking_blocks, ((program*)(object))->get_clocking_blocks());
 else return 0;
  }
 }

    
 if (handle->type == uhdmdesign) {
 if (type == uhdmallModules) {
 if (((design*)(object))->get_allModules())
 return (vpiHandle) new uhdm_handle(uhdmallModules, ((design*)(object))->get_allModules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmdesign) {
 if (type == uhdmtopModules) {
 if (((design*)(object))->get_topModules())
 return (vpiHandle) new uhdm_handle(uhdmtopModules, ((design*)(object))->get_topModules());
 else return 0;
  }
 }

    
 if (handle->type == uhdmdesign) {
 if (type == uhdmallPrograms) {
 if (((design*)(object))->get_allPrograms())
 return (vpiHandle) new uhdm_handle(uhdmallPrograms, ((design*)(object))->get_allPrograms());
 else return 0;
  }
 }

    
 if (handle->type == uhdmdesign) {
 if (type == uhdmallPackages) {
 if (((design*)(object))->get_allPackages())
 return (vpiHandle) new uhdm_handle(uhdmallPackages, ((design*)(object))->get_allPackages());
 else return 0;
  }
 }

  std::cout << "VPI ERROR: Bad usage of vpi_iterate" << std::endl;    
  return 0;   
}

vpiHandle vpi_scan (vpiHandle iterator) {
  if (!iterator) return 0;
  uhdm_handle* handle = (uhdm_handle*) iterator;
  const void* vect = handle->object;
  

  if (handle->type == uhdmio_decls) {
 VectorOfio_decl* the_vec = (VectorOfio_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmio_decl, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtasks) {
 VectorOftask* the_vec = (VectorOftask*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmtask, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmfunctions) {
 VectorOffunction* the_vec = (VectorOffunction*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmfunction, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprocess) {
 VectorOfprocess* the_vec = (VectorOfprocess*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmprocess, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterface_tf_decls) {
 VectorOfinterface_tf_decl* the_vec = (VectorOfinterface_tf_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdminterface_tf_decl, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmodports) {
 VectorOfmodport* the_vec = (VectorOfmodport*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmmodport, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmod_paths) {
 VectorOfmod_path* the_vec = (VectorOfmod_path*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmmod_path, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmcont_assigns) {
 VectorOfcont_assign* the_vec = (VectorOfcont_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmcont_assign, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterfaces) {
 VectorOfinterface* the_vec = (VectorOfinterface*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdminterface, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterface_arrays) {
 VectorOfinterface_array* the_vec = (VectorOfinterface_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdminterface_array, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmscope) {
 VectorOfscope* the_vec = (VectorOfscope*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmscope, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprocess) {
 VectorOfprocess* the_vec = (VectorOfprocess*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmprocess, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprimitives) {
 VectorOfprimitive* the_vec = (VectorOfprimitive*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmprimitive, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprimitive_arrays) {
 VectorOfprimitive_array* the_vec = (VectorOfprimitive_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmprimitive_array, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmports) {
 VectorOfport* the_vec = (VectorOfport*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmport, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterfaces) {
 VectorOfinterface* the_vec = (VectorOfinterface*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdminterface, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterface_arrays) {
 VectorOfinterface_array* the_vec = (VectorOfinterface_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdminterface_array, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmcont_assigns) {
 VectorOfcont_assign* the_vec = (VectorOfcont_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmcont_assign, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmodules) {
 VectorOfmodule* the_vec = (VectorOfmodule*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmmodule, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmodule_arrays) {
 VectorOfmodule_array* the_vec = (VectorOfmodule_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmmodule_array, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmmod_paths) {
 VectorOfmod_path* the_vec = (VectorOfmod_path*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmmod_path, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtchks) {
 VectorOftchk* the_vec = (VectorOftchk*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmtchk, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmdef_params) {
 VectorOfdef_param* the_vec = (VectorOfdef_param*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmdef_param, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmio_decls) {
 VectorOfio_decl* the_vec = (VectorOfio_decl*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmio_decl, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmalias_stmts) {
 VectorOfalias_stmt* the_vec = (VectorOfalias_stmt*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmalias_stmt, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmclocking_blocks) {
 VectorOfclocking_block* the_vec = (VectorOfclocking_block*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmclocking_block, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmprocess) {
 VectorOfprocess* the_vec = (VectorOfprocess*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmprocess, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterfaces) {
 VectorOfinterface* the_vec = (VectorOfinterface*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdminterface, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdminterface_arrays) {
 VectorOfinterface_array* the_vec = (VectorOfinterface_array*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdminterface_array, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmcont_assigns) {
 VectorOfcont_assign* the_vec = (VectorOfcont_assign*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmcont_assign, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmclocking_blocks) {
 VectorOfclocking_block* the_vec = (VectorOfclocking_block*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmclocking_block, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmallModules) {
 VectorOfmodule* the_vec = (VectorOfmodule*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmmodule, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmtopModules) {
 VectorOfmodule* the_vec = (VectorOfmodule*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmmodule, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmallPrograms) {
 VectorOfprogram* the_vec = (VectorOfprogram*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmprogram, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }

  if (handle->type == uhdmallPackages) {
 VectorOfpackage* the_vec = (VectorOfpackage*)vect;
 if (handle->index < the_vec->size()) {
 uhdm_handle* h = new uhdm_handle(uhdmpackage, the_vec->at(handle->index));
 handle->index++;
 return (vpiHandle) h;
 }
 }
  return 0;
}

PLI_INT32 vpi_free_object (vpiHandle object) {
  return vpi_release_handle(object);
}

PLI_INT32 vpi_release_handle (vpiHandle object) {
  delete (uhdm_handle*) object;
  return 0;
}

/* for processing properties */

PLI_INT32 vpi_get (PLI_INT32   property,
                   vpiHandle   object) {
  if (!object) {
      std::cout << "VPI ERROR: Bad usage of vpi_get" << std::endl;    
    return 0;
  }
  uhdm_handle* handle = (uhdm_handle*) object;
  BaseClass*  obj = (BaseClass*) handle->object;
  
 if (handle->type == uhdmprocess) {
     if (property == vpiLineNo) {
       return ((process*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmscope) {
     if (property == vpiLineNo) {
       return ((scope*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiLineNo) {
       return ((task*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiLineNo) {
       return ((function*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiLineNo) {
       return ((modport*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiLineNo) {
       return ((interface_tf_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiAccessType) {
       return ((interface_tf_decl*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiLineNo) {
       return ((interface*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiType) {
       return ((interface*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiLineNo) {
       return ((interface_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmcont_assign) {
     if (property == vpiLineNo) {
       return ((cont_assign*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiLineNo) {
       return ((port*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiLineNo) {
       return ((module_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprimitive) {
     if (property == vpiLineNo) {
       return ((primitive*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprimitive_array) {
     if (property == vpiLineNo) {
       return ((primitive_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmod_path) {
     if (property == vpiLineNo) {
       return ((mod_path*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtchk) {
     if (property == vpiLineNo) {
       return ((tchk*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmdef_param) {
     if (property == vpiLineNo) {
       return ((def_param*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiLineNo) {
       return ((io_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmalias_stmt) {
     if (property == vpiLineNo) {
       return ((alias_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiLineNo) {
       return ((clocking_block*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminstance_array) {
     if (property == vpiLineNo) {
       return ((instance_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiLineNo) {
       return ((module*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiType) {
       return ((module*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTopModule) {
       return ((module*)(obj))->get_vpiTopModule();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefDecayTime) {
       return ((module*)(obj))->get_vpiDefDecayTime();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiLineNo) {
       return ((program*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiType) {
       return ((program*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiArrayMember) {
       return ((instance*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiCellInstance) {
       return ((instance*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefNetType) {
       return ((instance*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefDelayMode) {
       return ((instance*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiProtected) {
       return ((instance*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTimePrecision) {
       return ((instance*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTimeUnit) {
       return ((instance*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiUnconnDrive) {
       return ((instance*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiAutomatic) {
       return ((instance*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTop) {
       return ((instance*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiLineNo) {
       return ((package*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiType) {
       return ((package*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiUnit) {
       return ((package*)(obj))->get_vpiUnit();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiArrayMember) {
       return ((package*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiCellInstance) {
       return ((package*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefNetType) {
       return ((package*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefDelayMode) {
       return ((package*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiProtected) {
       return ((package*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTimePrecision) {
       return ((package*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTimeUnit) {
       return ((package*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiUnconnDrive) {
       return ((package*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiAutomatic) {
       return ((package*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTop) {
       return ((package*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == vpiLineNo) {
       return ((design*)(obj))->get_vpiLineNo();
     } 
}

  return 0;
}

PLI_INT64 vpi_get64 (PLI_INT32 property,
                     vpiHandle   object) {
  if (!object) {
      std::cout << "VPI ERROR: Bad usage of vpi_get64" << std::endl;    
    return 0;
  }
  uhdm_handle* handle = (uhdm_handle*) object;
  BaseClass*  obj = (BaseClass*) handle->object;
  
 if (handle->type == uhdmprocess) {
     if (property == vpiLineNo) {
       return ((process*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmscope) {
     if (property == vpiLineNo) {
       return ((scope*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiLineNo) {
       return ((task*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiLineNo) {
       return ((function*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiLineNo) {
       return ((modport*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiLineNo) {
       return ((interface_tf_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiAccessType) {
       return ((interface_tf_decl*)(obj))->get_vpiAccessType();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiLineNo) {
       return ((interface*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiType) {
       return ((interface*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiLineNo) {
       return ((interface_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmcont_assign) {
     if (property == vpiLineNo) {
       return ((cont_assign*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiLineNo) {
       return ((port*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiLineNo) {
       return ((module_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprimitive) {
     if (property == vpiLineNo) {
       return ((primitive*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprimitive_array) {
     if (property == vpiLineNo) {
       return ((primitive_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmod_path) {
     if (property == vpiLineNo) {
       return ((mod_path*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmtchk) {
     if (property == vpiLineNo) {
       return ((tchk*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmdef_param) {
     if (property == vpiLineNo) {
       return ((def_param*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiLineNo) {
       return ((io_decl*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmalias_stmt) {
     if (property == vpiLineNo) {
       return ((alias_stmt*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiLineNo) {
       return ((clocking_block*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdminstance_array) {
     if (property == vpiLineNo) {
       return ((instance_array*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiLineNo) {
       return ((module*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiType) {
       return ((module*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiTopModule) {
       return ((module*)(obj))->get_vpiTopModule();
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiDefDecayTime) {
       return ((module*)(obj))->get_vpiDefDecayTime();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiLineNo) {
       return ((program*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiType) {
       return ((program*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiArrayMember) {
       return ((instance*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiCellInstance) {
       return ((instance*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefNetType) {
       return ((instance*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefDelayMode) {
       return ((instance*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiProtected) {
       return ((instance*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTimePrecision) {
       return ((instance*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTimeUnit) {
       return ((instance*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiUnconnDrive) {
       return ((instance*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiAutomatic) {
       return ((instance*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiTop) {
       return ((instance*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiLineNo) {
       return ((package*)(obj))->get_vpiLineNo();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiType) {
       return ((package*)(obj))->get_vpiType();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiUnit) {
       return ((package*)(obj))->get_vpiUnit();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiArrayMember) {
       return ((package*)(obj))->get_vpiArrayMember();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiCellInstance) {
       return ((package*)(obj))->get_vpiCellInstance();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefNetType) {
       return ((package*)(obj))->get_vpiDefNetType();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefDelayMode) {
       return ((package*)(obj))->get_vpiDefDelayMode();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiProtected) {
       return ((package*)(obj))->get_vpiProtected();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTimePrecision) {
       return ((package*)(obj))->get_vpiTimePrecision();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTimeUnit) {
       return ((package*)(obj))->get_vpiTimeUnit();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiUnconnDrive) {
       return ((package*)(obj))->get_vpiUnconnDrive();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiAutomatic) {
       return ((package*)(obj))->get_vpiAutomatic();
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiTop) {
       return ((package*)(obj))->get_vpiTop();
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == vpiLineNo) {
       return ((design*)(obj))->get_vpiLineNo();
     } 
}

  return 0;
}

PLI_BYTE8 *vpi_get_str (PLI_INT32 property,
                        vpiHandle   object) {
  if (!object) {
    std::cout << "VPI ERROR: Bad usage of vpi_get_str" << std::endl;    
    return 0;
  }
  uhdm_handle* handle = (uhdm_handle*) object;
  BaseClass*  obj = (BaseClass*) handle->object;
  
 if (handle->type == uhdmprocess) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((process*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmscope) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((scope*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmtask) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((task*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmfunction) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((function*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((modport*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmodport) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((modport*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminterface_tf_decl) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((interface_tf_decl*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdminterface) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((interface*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdminterface_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((interface_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmcont_assign) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((cont_assign*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmport) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((port*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmodule_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((module_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmprimitive) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((primitive*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmprimitive_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((primitive_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmod_path) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((mod_path*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmtchk) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((tchk*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmdef_param) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((def_param*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmio_decl) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((io_decl*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmalias_stmt) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((alias_stmt*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmclocking_block) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((clocking_block*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdminstance_array) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((instance_array*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmmodule) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((module*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmprogram) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((program*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefName) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiDefName().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiDefFile) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiDefFile().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiLibrary) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiLibrary().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiCell) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiCell().c_str());
     } 
}

 if (handle->type == uhdminstance) {
     if (property == vpiConfig) {
       return (PLI_BYTE8*) strdup(((instance*)(obj))->get_vpiConfig().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiName().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiFullName) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiFullName().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefName) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiDefName().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiDefFile) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiDefFile().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiLibrary) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiLibrary().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiCell) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiCell().c_str());
     } 
}

 if (handle->type == uhdmpackage) {
     if (property == vpiConfig) {
       return (PLI_BYTE8*) strdup(((package*)(obj))->get_vpiConfig().c_str());
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == vpiFile) {
       return (PLI_BYTE8*) strdup(((design*)(obj))->get_vpiFile().c_str());
     } 
}

 if (handle->type == uhdmdesign) {
     if (property == vpiName) {
       return (PLI_BYTE8*) strdup(((design*)(obj))->get_vpiName().c_str());
     } 
}

  return 0;
}


/* delay processing */

void vpi_get_delays (vpiHandle object,
                     p_vpi_delay delay_p) {
}

void vpi_put_delays (vpiHandle object,
                     p_vpi_delay delay_p) {
}

/* value processing */

void vpi_get_value (vpiHandle expr,
                    p_vpi_value value_p) {
}

vpiHandle vpi_put_value (vpiHandle object,
                         p_vpi_value value_p,
                         p_vpi_time time_p,
                         PLI_INT32 flags) {
  return 0;
}

void vpi_get_value_array (vpiHandle object,
                          p_vpi_arrayvalue arrayvalue_p,
                          PLI_INT32 *index_p,
                          PLI_UINT32 num) {
}

void vpi_put_value_array (vpiHandle object,
                          p_vpi_arrayvalue arrayvalue_p,
                          PLI_INT32 *index_p,
                          PLI_UINT32 num) {
}

/* time processing */

void vpi_get_time(vpiHandle object,
                  p_vpi_time time_p) {
}


PLI_INT32 vpi_get_data (PLI_INT32 id,
                        PLI_BYTE8 *dataLoc,
			PLI_INT32 numOfBytes) {
  return 0;
}

PLI_INT32 vpi_put_data (PLI_INT32 id,
                        PLI_BYTE8 *dataLoc,
			PLI_INT32 numOfBytes) {
  return 0;
}

void *vpi_get_userdata (vpiHandle obj) {
  return 0;
}

PLI_INT32 vpi_put_userdata (vpiHandle obj,
                            void *userdata) {
  return 0;
}

vpiHandle vpi_handle_by_multi_index (vpiHandle obj,
                                     PLI_INT32 num_index,
                                     PLI_INT32 *index_array) {
  return 0;
}

