// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: UHDM.capnp

#ifndef CAPNP_INCLUDED_fff7299129556877_
#define CAPNP_INCLUDED_fff7299129556877_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b66216fa2045535b);
CAPNP_DECLARE_SCHEMA(b2bce98887da19bc);
CAPNP_DECLARE_SCHEMA(c4de5d61fdda1fc2);
CAPNP_DECLARE_SCHEMA(e4d908a186cb8c2b);
CAPNP_DECLARE_SCHEMA(b61d98ea52110eb2);
CAPNP_DECLARE_SCHEMA(86086f8cd3c871da);
CAPNP_DECLARE_SCHEMA(b8f78b9bbf575136);
CAPNP_DECLARE_SCHEMA(9a56f7b93f159d0f);
CAPNP_DECLARE_SCHEMA(9f591135f29e5892);
CAPNP_DECLARE_SCHEMA(d0a8f41c104ebf1c);
CAPNP_DECLARE_SCHEMA(b4eea6df5a3cb40c);
CAPNP_DECLARE_SCHEMA(a1c6ed39e4545f74);
CAPNP_DECLARE_SCHEMA(9227d3f15c9cc33f);
CAPNP_DECLARE_SCHEMA(f71f31bc84a287dc);
CAPNP_DECLARE_SCHEMA(ca2c53a62aa79635);
CAPNP_DECLARE_SCHEMA(b0574b7e87c89580);
CAPNP_DECLARE_SCHEMA(f4c7c9090f7f65ff);
CAPNP_DECLARE_SCHEMA(fadf6fefcc8670a1);
CAPNP_DECLARE_SCHEMA(838f7452c487badf);
CAPNP_DECLARE_SCHEMA(f171f28f75e452e6);
CAPNP_DECLARE_SCHEMA(cfa270b7ddc80a04);
CAPNP_DECLARE_SCHEMA(dec7ca006033920c);
CAPNP_DECLARE_SCHEMA(ba539a52fdf9f899);
CAPNP_DECLARE_SCHEMA(a0c61698af16b048);
CAPNP_DECLARE_SCHEMA(86cab2b3c72285d7);
CAPNP_DECLARE_SCHEMA(e5223805a4f89b66);
CAPNP_DECLARE_SCHEMA(b0c8c9d578e9c276);
CAPNP_DECLARE_SCHEMA(ef2cfce5497fccde);
CAPNP_DECLARE_SCHEMA(9aa2ba2db6cf5907);
CAPNP_DECLARE_SCHEMA(a991beecec5a8d2a);
CAPNP_DECLARE_SCHEMA(cbf93d1c1593b642);
CAPNP_DECLARE_SCHEMA(bff7f934572426f6);
CAPNP_DECLARE_SCHEMA(91c045e5ff30dd47);
CAPNP_DECLARE_SCHEMA(8f1c0a47c6ecb7dd);
CAPNP_DECLARE_SCHEMA(9f755d38de26a019);
CAPNP_DECLARE_SCHEMA(ba336cb57cb68222);
CAPNP_DECLARE_SCHEMA(f204710c1a739934);
CAPNP_DECLARE_SCHEMA(b8a08b2787e1997f);
CAPNP_DECLARE_SCHEMA(dfd588e26996d1a6);
CAPNP_DECLARE_SCHEMA(ff343c185370b513);
CAPNP_DECLARE_SCHEMA(bcba8efb52090304);

}  // namespace schemas
}  // namespace capnp


struct ObjIndexType {
  ObjIndexType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b66216fa2045535b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct UhdmRoot {
  UhdmRoot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2bce98887da19bc, 0, 41)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Process {
  Process() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4de5d61fdda1fc2, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Begin {
  Begin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4d908a186cb8c2b, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Namedbegin {
  Namedbegin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b61d98ea52110eb2, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Distribution {
  Distribution() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86086f8cd3c871da, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Operation {
  Operation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8f78b9bbf575136, 7, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Refobj {
  Refobj() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a56f7b93f159d0f, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Task {
  Task() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f591135f29e5892, 13, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Function {
  Function() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0a8f41c104ebf1c, 15, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Modport {
  Modport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4eea6df5a3cb40c, 6, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Interfacetfdecl {
  Interfacetfdecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1c6ed39e4545f74, 5, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Contassign {
  Contassign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9227d3f15c9cc33f, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Port {
  Port() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f71f31bc84a287dc, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Primitive {
  Primitive() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca2c53a62aa79635, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Modpath {
  Modpath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0574b7e87c89580, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Tchk {
  Tchk() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4c7c9090f7f65ff, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Defparam {
  Defparam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fadf6fefcc8670a1, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Iodecl {
  Iodecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(838f7452c487badf, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Aliasstmt {
  Aliasstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f171f28f75e452e6, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Clockingblock {
  Clockingblock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfa270b7ddc80a04, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Range {
  Range() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dec7ca006033920c, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Paramassign {
  Paramassign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba539a52fdf9f899, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Interfacearray {
  Interfacearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0c61698af16b048, 8, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Programarray {
  Programarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86cab2b3c72285d7, 8, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Modulearray {
  Modulearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5223805a4f89b66, 8, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Gatearray {
  Gatearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0c8c9d578e9c276, 8, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Switcharray {
  Switcharray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef2cfce5497fccde, 8, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Udparray {
  Udparray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9aa2ba2db6cf5907, 8, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Arraynet {
  Arraynet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a991beecec5a8d2a, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Logicvar {
  Logicvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbf93d1c1593b642, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Arrayvar {
  Arrayvar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bff7f934572426f6, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Namedevent {
  Namedevent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91c045e5ff30dd47, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Namedeventarray {
  Namedeventarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f1c0a47c6ecb7dd, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Specparam {
  Specparam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f755d38de26a019, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Classdefn {
  Classdefn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba336cb57cb68222, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Interface {
  Interface() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f204710c1a739934, 20, 26)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Program {
  Program() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8a08b2787e1997f, 19, 24)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Package {
  Package() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfd588e26996d1a6, 17, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Module {
  Module() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff343c185370b513, 22, 35)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Design {
  Design() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcba8efb52090304, 5, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ObjIndexType::Reader {
public:
  typedef ObjIndexType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex() const;

  inline  ::uint32_t getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObjIndexType::Builder {
public:
  typedef ObjIndexType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex();
  inline void setIndex( ::uint64_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObjIndexType::Pipeline {
public:
  typedef ObjIndexType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UhdmRoot::Reader {
public:
  typedef UhdmRoot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDesigns() const;
  inline  ::capnp::List< ::Design>::Reader getDesigns() const;

  inline bool hasSymbols() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getSymbols() const;

  inline bool hasFactoryProcess() const;
  inline  ::capnp::List< ::Process>::Reader getFactoryProcess() const;

  inline bool hasFactoryBegin() const;
  inline  ::capnp::List< ::Begin>::Reader getFactoryBegin() const;

  inline bool hasFactoryNamedbegin() const;
  inline  ::capnp::List< ::Namedbegin>::Reader getFactoryNamedbegin() const;

  inline bool hasFactoryDistribution() const;
  inline  ::capnp::List< ::Distribution>::Reader getFactoryDistribution() const;

  inline bool hasFactoryOperation() const;
  inline  ::capnp::List< ::Operation>::Reader getFactoryOperation() const;

  inline bool hasFactoryRefobj() const;
  inline  ::capnp::List< ::Refobj>::Reader getFactoryRefobj() const;

  inline bool hasFactoryTask() const;
  inline  ::capnp::List< ::Task>::Reader getFactoryTask() const;

  inline bool hasFactoryFunction() const;
  inline  ::capnp::List< ::Function>::Reader getFactoryFunction() const;

  inline bool hasFactoryModport() const;
  inline  ::capnp::List< ::Modport>::Reader getFactoryModport() const;

  inline bool hasFactoryInterfacetfdecl() const;
  inline  ::capnp::List< ::Interfacetfdecl>::Reader getFactoryInterfacetfdecl() const;

  inline bool hasFactoryContassign() const;
  inline  ::capnp::List< ::Contassign>::Reader getFactoryContassign() const;

  inline bool hasFactoryPort() const;
  inline  ::capnp::List< ::Port>::Reader getFactoryPort() const;

  inline bool hasFactoryPrimitive() const;
  inline  ::capnp::List< ::Primitive>::Reader getFactoryPrimitive() const;

  inline bool hasFactoryModpath() const;
  inline  ::capnp::List< ::Modpath>::Reader getFactoryModpath() const;

  inline bool hasFactoryTchk() const;
  inline  ::capnp::List< ::Tchk>::Reader getFactoryTchk() const;

  inline bool hasFactoryDefparam() const;
  inline  ::capnp::List< ::Defparam>::Reader getFactoryDefparam() const;

  inline bool hasFactoryIodecl() const;
  inline  ::capnp::List< ::Iodecl>::Reader getFactoryIodecl() const;

  inline bool hasFactoryAliasstmt() const;
  inline  ::capnp::List< ::Aliasstmt>::Reader getFactoryAliasstmt() const;

  inline bool hasFactoryClockingblock() const;
  inline  ::capnp::List< ::Clockingblock>::Reader getFactoryClockingblock() const;

  inline bool hasFactoryRange() const;
  inline  ::capnp::List< ::Range>::Reader getFactoryRange() const;

  inline bool hasFactoryParamassign() const;
  inline  ::capnp::List< ::Paramassign>::Reader getFactoryParamassign() const;

  inline bool hasFactoryInterfacearray() const;
  inline  ::capnp::List< ::Interfacearray>::Reader getFactoryInterfacearray() const;

  inline bool hasFactoryProgramarray() const;
  inline  ::capnp::List< ::Programarray>::Reader getFactoryProgramarray() const;

  inline bool hasFactoryModulearray() const;
  inline  ::capnp::List< ::Modulearray>::Reader getFactoryModulearray() const;

  inline bool hasFactoryGatearray() const;
  inline  ::capnp::List< ::Gatearray>::Reader getFactoryGatearray() const;

  inline bool hasFactorySwitcharray() const;
  inline  ::capnp::List< ::Switcharray>::Reader getFactorySwitcharray() const;

  inline bool hasFactoryUdparray() const;
  inline  ::capnp::List< ::Udparray>::Reader getFactoryUdparray() const;

  inline bool hasFactoryArraynet() const;
  inline  ::capnp::List< ::Arraynet>::Reader getFactoryArraynet() const;

  inline bool hasFactoryLogicvar() const;
  inline  ::capnp::List< ::Logicvar>::Reader getFactoryLogicvar() const;

  inline bool hasFactoryArrayvar() const;
  inline  ::capnp::List< ::Arrayvar>::Reader getFactoryArrayvar() const;

  inline bool hasFactoryNamedevent() const;
  inline  ::capnp::List< ::Namedevent>::Reader getFactoryNamedevent() const;

  inline bool hasFactoryNamedeventarray() const;
  inline  ::capnp::List< ::Namedeventarray>::Reader getFactoryNamedeventarray() const;

  inline bool hasFactorySpecparam() const;
  inline  ::capnp::List< ::Specparam>::Reader getFactorySpecparam() const;

  inline bool hasFactoryClassdefn() const;
  inline  ::capnp::List< ::Classdefn>::Reader getFactoryClassdefn() const;

  inline bool hasFactoryInterface() const;
  inline  ::capnp::List< ::Interface>::Reader getFactoryInterface() const;

  inline bool hasFactoryProgram() const;
  inline  ::capnp::List< ::Program>::Reader getFactoryProgram() const;

  inline bool hasFactoryPackage() const;
  inline  ::capnp::List< ::Package>::Reader getFactoryPackage() const;

  inline bool hasFactoryModule() const;
  inline  ::capnp::List< ::Module>::Reader getFactoryModule() const;

  inline bool hasFactoryDesign() const;
  inline  ::capnp::List< ::Design>::Reader getFactoryDesign() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UhdmRoot::Builder {
public:
  typedef UhdmRoot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDesigns();
  inline  ::capnp::List< ::Design>::Builder getDesigns();
  inline void setDesigns( ::capnp::List< ::Design>::Reader value);
  inline  ::capnp::List< ::Design>::Builder initDesigns(unsigned int size);
  inline void adoptDesigns(::capnp::Orphan< ::capnp::List< ::Design>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Design>> disownDesigns();

  inline bool hasSymbols();
  inline  ::capnp::List< ::capnp::Text>::Builder getSymbols();
  inline void setSymbols( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initSymbols(unsigned int size);
  inline void adoptSymbols(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownSymbols();

  inline bool hasFactoryProcess();
  inline  ::capnp::List< ::Process>::Builder getFactoryProcess();
  inline void setFactoryProcess( ::capnp::List< ::Process>::Reader value);
  inline  ::capnp::List< ::Process>::Builder initFactoryProcess(unsigned int size);
  inline void adoptFactoryProcess(::capnp::Orphan< ::capnp::List< ::Process>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Process>> disownFactoryProcess();

  inline bool hasFactoryBegin();
  inline  ::capnp::List< ::Begin>::Builder getFactoryBegin();
  inline void setFactoryBegin( ::capnp::List< ::Begin>::Reader value);
  inline  ::capnp::List< ::Begin>::Builder initFactoryBegin(unsigned int size);
  inline void adoptFactoryBegin(::capnp::Orphan< ::capnp::List< ::Begin>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Begin>> disownFactoryBegin();

  inline bool hasFactoryNamedbegin();
  inline  ::capnp::List< ::Namedbegin>::Builder getFactoryNamedbegin();
  inline void setFactoryNamedbegin( ::capnp::List< ::Namedbegin>::Reader value);
  inline  ::capnp::List< ::Namedbegin>::Builder initFactoryNamedbegin(unsigned int size);
  inline void adoptFactoryNamedbegin(::capnp::Orphan< ::capnp::List< ::Namedbegin>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedbegin>> disownFactoryNamedbegin();

  inline bool hasFactoryDistribution();
  inline  ::capnp::List< ::Distribution>::Builder getFactoryDistribution();
  inline void setFactoryDistribution( ::capnp::List< ::Distribution>::Reader value);
  inline  ::capnp::List< ::Distribution>::Builder initFactoryDistribution(unsigned int size);
  inline void adoptFactoryDistribution(::capnp::Orphan< ::capnp::List< ::Distribution>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Distribution>> disownFactoryDistribution();

  inline bool hasFactoryOperation();
  inline  ::capnp::List< ::Operation>::Builder getFactoryOperation();
  inline void setFactoryOperation( ::capnp::List< ::Operation>::Reader value);
  inline  ::capnp::List< ::Operation>::Builder initFactoryOperation(unsigned int size);
  inline void adoptFactoryOperation(::capnp::Orphan< ::capnp::List< ::Operation>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Operation>> disownFactoryOperation();

  inline bool hasFactoryRefobj();
  inline  ::capnp::List< ::Refobj>::Builder getFactoryRefobj();
  inline void setFactoryRefobj( ::capnp::List< ::Refobj>::Reader value);
  inline  ::capnp::List< ::Refobj>::Builder initFactoryRefobj(unsigned int size);
  inline void adoptFactoryRefobj(::capnp::Orphan< ::capnp::List< ::Refobj>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Refobj>> disownFactoryRefobj();

  inline bool hasFactoryTask();
  inline  ::capnp::List< ::Task>::Builder getFactoryTask();
  inline void setFactoryTask( ::capnp::List< ::Task>::Reader value);
  inline  ::capnp::List< ::Task>::Builder initFactoryTask(unsigned int size);
  inline void adoptFactoryTask(::capnp::Orphan< ::capnp::List< ::Task>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Task>> disownFactoryTask();

  inline bool hasFactoryFunction();
  inline  ::capnp::List< ::Function>::Builder getFactoryFunction();
  inline void setFactoryFunction( ::capnp::List< ::Function>::Reader value);
  inline  ::capnp::List< ::Function>::Builder initFactoryFunction(unsigned int size);
  inline void adoptFactoryFunction(::capnp::Orphan< ::capnp::List< ::Function>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Function>> disownFactoryFunction();

  inline bool hasFactoryModport();
  inline  ::capnp::List< ::Modport>::Builder getFactoryModport();
  inline void setFactoryModport( ::capnp::List< ::Modport>::Reader value);
  inline  ::capnp::List< ::Modport>::Builder initFactoryModport(unsigned int size);
  inline void adoptFactoryModport(::capnp::Orphan< ::capnp::List< ::Modport>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modport>> disownFactoryModport();

  inline bool hasFactoryInterfacetfdecl();
  inline  ::capnp::List< ::Interfacetfdecl>::Builder getFactoryInterfacetfdecl();
  inline void setFactoryInterfacetfdecl( ::capnp::List< ::Interfacetfdecl>::Reader value);
  inline  ::capnp::List< ::Interfacetfdecl>::Builder initFactoryInterfacetfdecl(unsigned int size);
  inline void adoptFactoryInterfacetfdecl(::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>> disownFactoryInterfacetfdecl();

  inline bool hasFactoryContassign();
  inline  ::capnp::List< ::Contassign>::Builder getFactoryContassign();
  inline void setFactoryContassign( ::capnp::List< ::Contassign>::Reader value);
  inline  ::capnp::List< ::Contassign>::Builder initFactoryContassign(unsigned int size);
  inline void adoptFactoryContassign(::capnp::Orphan< ::capnp::List< ::Contassign>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Contassign>> disownFactoryContassign();

  inline bool hasFactoryPort();
  inline  ::capnp::List< ::Port>::Builder getFactoryPort();
  inline void setFactoryPort( ::capnp::List< ::Port>::Reader value);
  inline  ::capnp::List< ::Port>::Builder initFactoryPort(unsigned int size);
  inline void adoptFactoryPort(::capnp::Orphan< ::capnp::List< ::Port>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Port>> disownFactoryPort();

  inline bool hasFactoryPrimitive();
  inline  ::capnp::List< ::Primitive>::Builder getFactoryPrimitive();
  inline void setFactoryPrimitive( ::capnp::List< ::Primitive>::Reader value);
  inline  ::capnp::List< ::Primitive>::Builder initFactoryPrimitive(unsigned int size);
  inline void adoptFactoryPrimitive(::capnp::Orphan< ::capnp::List< ::Primitive>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Primitive>> disownFactoryPrimitive();

  inline bool hasFactoryModpath();
  inline  ::capnp::List< ::Modpath>::Builder getFactoryModpath();
  inline void setFactoryModpath( ::capnp::List< ::Modpath>::Reader value);
  inline  ::capnp::List< ::Modpath>::Builder initFactoryModpath(unsigned int size);
  inline void adoptFactoryModpath(::capnp::Orphan< ::capnp::List< ::Modpath>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modpath>> disownFactoryModpath();

  inline bool hasFactoryTchk();
  inline  ::capnp::List< ::Tchk>::Builder getFactoryTchk();
  inline void setFactoryTchk( ::capnp::List< ::Tchk>::Reader value);
  inline  ::capnp::List< ::Tchk>::Builder initFactoryTchk(unsigned int size);
  inline void adoptFactoryTchk(::capnp::Orphan< ::capnp::List< ::Tchk>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Tchk>> disownFactoryTchk();

  inline bool hasFactoryDefparam();
  inline  ::capnp::List< ::Defparam>::Builder getFactoryDefparam();
  inline void setFactoryDefparam( ::capnp::List< ::Defparam>::Reader value);
  inline  ::capnp::List< ::Defparam>::Builder initFactoryDefparam(unsigned int size);
  inline void adoptFactoryDefparam(::capnp::Orphan< ::capnp::List< ::Defparam>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Defparam>> disownFactoryDefparam();

  inline bool hasFactoryIodecl();
  inline  ::capnp::List< ::Iodecl>::Builder getFactoryIodecl();
  inline void setFactoryIodecl( ::capnp::List< ::Iodecl>::Reader value);
  inline  ::capnp::List< ::Iodecl>::Builder initFactoryIodecl(unsigned int size);
  inline void adoptFactoryIodecl(::capnp::Orphan< ::capnp::List< ::Iodecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Iodecl>> disownFactoryIodecl();

  inline bool hasFactoryAliasstmt();
  inline  ::capnp::List< ::Aliasstmt>::Builder getFactoryAliasstmt();
  inline void setFactoryAliasstmt( ::capnp::List< ::Aliasstmt>::Reader value);
  inline  ::capnp::List< ::Aliasstmt>::Builder initFactoryAliasstmt(unsigned int size);
  inline void adoptFactoryAliasstmt(::capnp::Orphan< ::capnp::List< ::Aliasstmt>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Aliasstmt>> disownFactoryAliasstmt();

  inline bool hasFactoryClockingblock();
  inline  ::capnp::List< ::Clockingblock>::Builder getFactoryClockingblock();
  inline void setFactoryClockingblock( ::capnp::List< ::Clockingblock>::Reader value);
  inline  ::capnp::List< ::Clockingblock>::Builder initFactoryClockingblock(unsigned int size);
  inline void adoptFactoryClockingblock(::capnp::Orphan< ::capnp::List< ::Clockingblock>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Clockingblock>> disownFactoryClockingblock();

  inline bool hasFactoryRange();
  inline  ::capnp::List< ::Range>::Builder getFactoryRange();
  inline void setFactoryRange( ::capnp::List< ::Range>::Reader value);
  inline  ::capnp::List< ::Range>::Builder initFactoryRange(unsigned int size);
  inline void adoptFactoryRange(::capnp::Orphan< ::capnp::List< ::Range>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Range>> disownFactoryRange();

  inline bool hasFactoryParamassign();
  inline  ::capnp::List< ::Paramassign>::Builder getFactoryParamassign();
  inline void setFactoryParamassign( ::capnp::List< ::Paramassign>::Reader value);
  inline  ::capnp::List< ::Paramassign>::Builder initFactoryParamassign(unsigned int size);
  inline void adoptFactoryParamassign(::capnp::Orphan< ::capnp::List< ::Paramassign>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Paramassign>> disownFactoryParamassign();

  inline bool hasFactoryInterfacearray();
  inline  ::capnp::List< ::Interfacearray>::Builder getFactoryInterfacearray();
  inline void setFactoryInterfacearray( ::capnp::List< ::Interfacearray>::Reader value);
  inline  ::capnp::List< ::Interfacearray>::Builder initFactoryInterfacearray(unsigned int size);
  inline void adoptFactoryInterfacearray(::capnp::Orphan< ::capnp::List< ::Interfacearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacearray>> disownFactoryInterfacearray();

  inline bool hasFactoryProgramarray();
  inline  ::capnp::List< ::Programarray>::Builder getFactoryProgramarray();
  inline void setFactoryProgramarray( ::capnp::List< ::Programarray>::Reader value);
  inline  ::capnp::List< ::Programarray>::Builder initFactoryProgramarray(unsigned int size);
  inline void adoptFactoryProgramarray(::capnp::Orphan< ::capnp::List< ::Programarray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Programarray>> disownFactoryProgramarray();

  inline bool hasFactoryModulearray();
  inline  ::capnp::List< ::Modulearray>::Builder getFactoryModulearray();
  inline void setFactoryModulearray( ::capnp::List< ::Modulearray>::Reader value);
  inline  ::capnp::List< ::Modulearray>::Builder initFactoryModulearray(unsigned int size);
  inline void adoptFactoryModulearray(::capnp::Orphan< ::capnp::List< ::Modulearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modulearray>> disownFactoryModulearray();

  inline bool hasFactoryGatearray();
  inline  ::capnp::List< ::Gatearray>::Builder getFactoryGatearray();
  inline void setFactoryGatearray( ::capnp::List< ::Gatearray>::Reader value);
  inline  ::capnp::List< ::Gatearray>::Builder initFactoryGatearray(unsigned int size);
  inline void adoptFactoryGatearray(::capnp::Orphan< ::capnp::List< ::Gatearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Gatearray>> disownFactoryGatearray();

  inline bool hasFactorySwitcharray();
  inline  ::capnp::List< ::Switcharray>::Builder getFactorySwitcharray();
  inline void setFactorySwitcharray( ::capnp::List< ::Switcharray>::Reader value);
  inline  ::capnp::List< ::Switcharray>::Builder initFactorySwitcharray(unsigned int size);
  inline void adoptFactorySwitcharray(::capnp::Orphan< ::capnp::List< ::Switcharray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Switcharray>> disownFactorySwitcharray();

  inline bool hasFactoryUdparray();
  inline  ::capnp::List< ::Udparray>::Builder getFactoryUdparray();
  inline void setFactoryUdparray( ::capnp::List< ::Udparray>::Reader value);
  inline  ::capnp::List< ::Udparray>::Builder initFactoryUdparray(unsigned int size);
  inline void adoptFactoryUdparray(::capnp::Orphan< ::capnp::List< ::Udparray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Udparray>> disownFactoryUdparray();

  inline bool hasFactoryArraynet();
  inline  ::capnp::List< ::Arraynet>::Builder getFactoryArraynet();
  inline void setFactoryArraynet( ::capnp::List< ::Arraynet>::Reader value);
  inline  ::capnp::List< ::Arraynet>::Builder initFactoryArraynet(unsigned int size);
  inline void adoptFactoryArraynet(::capnp::Orphan< ::capnp::List< ::Arraynet>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Arraynet>> disownFactoryArraynet();

  inline bool hasFactoryLogicvar();
  inline  ::capnp::List< ::Logicvar>::Builder getFactoryLogicvar();
  inline void setFactoryLogicvar( ::capnp::List< ::Logicvar>::Reader value);
  inline  ::capnp::List< ::Logicvar>::Builder initFactoryLogicvar(unsigned int size);
  inline void adoptFactoryLogicvar(::capnp::Orphan< ::capnp::List< ::Logicvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Logicvar>> disownFactoryLogicvar();

  inline bool hasFactoryArrayvar();
  inline  ::capnp::List< ::Arrayvar>::Builder getFactoryArrayvar();
  inline void setFactoryArrayvar( ::capnp::List< ::Arrayvar>::Reader value);
  inline  ::capnp::List< ::Arrayvar>::Builder initFactoryArrayvar(unsigned int size);
  inline void adoptFactoryArrayvar(::capnp::Orphan< ::capnp::List< ::Arrayvar>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Arrayvar>> disownFactoryArrayvar();

  inline bool hasFactoryNamedevent();
  inline  ::capnp::List< ::Namedevent>::Builder getFactoryNamedevent();
  inline void setFactoryNamedevent( ::capnp::List< ::Namedevent>::Reader value);
  inline  ::capnp::List< ::Namedevent>::Builder initFactoryNamedevent(unsigned int size);
  inline void adoptFactoryNamedevent(::capnp::Orphan< ::capnp::List< ::Namedevent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedevent>> disownFactoryNamedevent();

  inline bool hasFactoryNamedeventarray();
  inline  ::capnp::List< ::Namedeventarray>::Builder getFactoryNamedeventarray();
  inline void setFactoryNamedeventarray( ::capnp::List< ::Namedeventarray>::Reader value);
  inline  ::capnp::List< ::Namedeventarray>::Builder initFactoryNamedeventarray(unsigned int size);
  inline void adoptFactoryNamedeventarray(::capnp::Orphan< ::capnp::List< ::Namedeventarray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Namedeventarray>> disownFactoryNamedeventarray();

  inline bool hasFactorySpecparam();
  inline  ::capnp::List< ::Specparam>::Builder getFactorySpecparam();
  inline void setFactorySpecparam( ::capnp::List< ::Specparam>::Reader value);
  inline  ::capnp::List< ::Specparam>::Builder initFactorySpecparam(unsigned int size);
  inline void adoptFactorySpecparam(::capnp::Orphan< ::capnp::List< ::Specparam>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Specparam>> disownFactorySpecparam();

  inline bool hasFactoryClassdefn();
  inline  ::capnp::List< ::Classdefn>::Builder getFactoryClassdefn();
  inline void setFactoryClassdefn( ::capnp::List< ::Classdefn>::Reader value);
  inline  ::capnp::List< ::Classdefn>::Builder initFactoryClassdefn(unsigned int size);
  inline void adoptFactoryClassdefn(::capnp::Orphan< ::capnp::List< ::Classdefn>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Classdefn>> disownFactoryClassdefn();

  inline bool hasFactoryInterface();
  inline  ::capnp::List< ::Interface>::Builder getFactoryInterface();
  inline void setFactoryInterface( ::capnp::List< ::Interface>::Reader value);
  inline  ::capnp::List< ::Interface>::Builder initFactoryInterface(unsigned int size);
  inline void adoptFactoryInterface(::capnp::Orphan< ::capnp::List< ::Interface>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interface>> disownFactoryInterface();

  inline bool hasFactoryProgram();
  inline  ::capnp::List< ::Program>::Builder getFactoryProgram();
  inline void setFactoryProgram( ::capnp::List< ::Program>::Reader value);
  inline  ::capnp::List< ::Program>::Builder initFactoryProgram(unsigned int size);
  inline void adoptFactoryProgram(::capnp::Orphan< ::capnp::List< ::Program>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Program>> disownFactoryProgram();

  inline bool hasFactoryPackage();
  inline  ::capnp::List< ::Package>::Builder getFactoryPackage();
  inline void setFactoryPackage( ::capnp::List< ::Package>::Reader value);
  inline  ::capnp::List< ::Package>::Builder initFactoryPackage(unsigned int size);
  inline void adoptFactoryPackage(::capnp::Orphan< ::capnp::List< ::Package>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Package>> disownFactoryPackage();

  inline bool hasFactoryModule();
  inline  ::capnp::List< ::Module>::Builder getFactoryModule();
  inline void setFactoryModule( ::capnp::List< ::Module>::Reader value);
  inline  ::capnp::List< ::Module>::Builder initFactoryModule(unsigned int size);
  inline void adoptFactoryModule(::capnp::Orphan< ::capnp::List< ::Module>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Module>> disownFactoryModule();

  inline bool hasFactoryDesign();
  inline  ::capnp::List< ::Design>::Builder getFactoryDesign();
  inline void setFactoryDesign( ::capnp::List< ::Design>::Reader value);
  inline  ::capnp::List< ::Design>::Builder initFactoryDesign(unsigned int size);
  inline void adoptFactoryDesign(::capnp::Orphan< ::capnp::List< ::Design>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Design>> disownFactoryDesign();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UhdmRoot::Pipeline {
public:
  typedef UhdmRoot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Process::Reader {
public:
  typedef Process Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Process::Builder {
public:
  typedef Process Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Process::Pipeline {
public:
  typedef Process Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Begin::Reader {
public:
  typedef Begin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Begin::Builder {
public:
  typedef Begin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Begin::Pipeline {
public:
  typedef Begin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedbegin::Reader {
public:
  typedef Namedbegin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedbegin::Builder {
public:
  typedef Namedbegin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedbegin::Pipeline {
public:
  typedef Namedbegin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Distribution::Reader {
public:
  typedef Distribution Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Distribution::Builder {
public:
  typedef Distribution Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Distribution::Pipeline {
public:
  typedef Distribution Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Operation::Reader {
public:
  typedef Operation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::int64_t getVpiOpType() const;

  inline bool hasOperands() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getOperands() const;

  inline  ::uint64_t getVpiDecompile() const;

  inline  ::int64_t getVpiSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Operation::Builder {
public:
  typedef Operation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::int64_t getVpiOpType();
  inline void setVpiOpType( ::int64_t value);

  inline bool hasOperands();
  inline  ::capnp::List< ::ObjIndexType>::Builder getOperands();
  inline void setOperands( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initOperands(unsigned int size);
  inline void adoptOperands(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownOperands();

  inline  ::uint64_t getVpiDecompile();
  inline void setVpiDecompile( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Operation::Pipeline {
public:
  typedef Operation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Refobj::Reader {
public:
  typedef Refobj Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Refobj::Builder {
public:
  typedef Refobj Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Refobj::Pipeline {
public:
  typedef Refobj Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Task::Reader {
public:
  typedef Task Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiMethod() const;

  inline  ::int64_t getVpiAccessType() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVirtual() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiDPIContext() const;

  inline  ::int64_t getVpiDPICStr() const;

  inline  ::uint64_t getVpiDPICIdentifier() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasVariables() const;
  inline  ::ObjIndexType::Reader getVariables() const;

  inline  ::uint64_t getClassdefn() const;

  inline  ::uint64_t getRefobj() const;

  inline  ::uint64_t getIodecl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Task::Builder {
public:
  typedef Task Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiMethod();
  inline void setVpiMethod(bool value);

  inline  ::int64_t getVpiAccessType();
  inline void setVpiAccessType( ::int64_t value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVirtual();
  inline void setVpiVirtual(bool value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiDPIContext();
  inline void setVpiDPIContext(bool value);

  inline  ::int64_t getVpiDPICStr();
  inline void setVpiDPICStr( ::int64_t value);

  inline  ::uint64_t getVpiDPICIdentifier();
  inline void setVpiDPICIdentifier( ::uint64_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasVariables();
  inline  ::ObjIndexType::Builder getVariables();
  inline void setVariables( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVariables();
  inline void adoptVariables(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVariables();

  inline  ::uint64_t getClassdefn();
  inline void setClassdefn( ::uint64_t value);

  inline  ::uint64_t getRefobj();
  inline void setRefobj( ::uint64_t value);

  inline  ::uint64_t getIodecl();
  inline void setIodecl( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Task::Pipeline {
public:
  typedef Task Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getVariables();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Function::Reader {
public:
  typedef Function Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiSigned() const;

  inline  ::int64_t getVpiSize() const;

  inline  ::int64_t getVpiFuncType() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline bool getVpiMethod() const;

  inline  ::int64_t getVpiAccessType() const;

  inline  ::int64_t getVpiVisibility() const;

  inline bool getVpiVirtual() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiDPIContext() const;

  inline  ::int64_t getVpiDPICStr() const;

  inline  ::uint64_t getVpiDPICIdentifier() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasVariables() const;
  inline  ::ObjIndexType::Reader getVariables() const;

  inline  ::uint64_t getClassdefn() const;

  inline  ::uint64_t getRefobj() const;

  inline  ::uint64_t getIodecl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Function::Builder {
public:
  typedef Function Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiSigned();
  inline void setVpiSigned(bool value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline  ::int64_t getVpiFuncType();
  inline void setVpiFuncType( ::int64_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline bool getVpiMethod();
  inline void setVpiMethod(bool value);

  inline  ::int64_t getVpiAccessType();
  inline void setVpiAccessType( ::int64_t value);

  inline  ::int64_t getVpiVisibility();
  inline void setVpiVisibility( ::int64_t value);

  inline bool getVpiVirtual();
  inline void setVpiVirtual(bool value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiDPIContext();
  inline void setVpiDPIContext(bool value);

  inline  ::int64_t getVpiDPICStr();
  inline void setVpiDPICStr( ::int64_t value);

  inline  ::uint64_t getVpiDPICIdentifier();
  inline void setVpiDPICIdentifier( ::uint64_t value);

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasVariables();
  inline  ::ObjIndexType::Builder getVariables();
  inline void setVariables( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initVariables();
  inline void adoptVariables(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownVariables();

  inline  ::uint64_t getClassdefn();
  inline void setClassdefn( ::uint64_t value);

  inline  ::uint64_t getRefobj();
  inline void setRefobj( ::uint64_t value);

  inline  ::uint64_t getIodecl();
  inline void setIodecl( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Function::Pipeline {
public:
  typedef Function Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
  inline  ::ObjIndexType::Pipeline getVariables();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modport::Reader {
public:
  typedef Modport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getIodecls() const;

  inline  ::uint64_t getInterface() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modport::Builder {
public:
  typedef Modport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownIodecls();

  inline  ::uint64_t getInterface();
  inline void setInterface( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modport::Pipeline {
public:
  typedef Modport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacetfdecl::Reader {
public:
  typedef Interfacetfdecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiAccessType() const;

  inline bool hasTasks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTasks() const;

  inline bool hasFunctions() const;
  inline  ::capnp::List< ::uint64_t>::Reader getFunctions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacetfdecl::Builder {
public:
  typedef Interfacetfdecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiAccessType();
  inline void setVpiAccessType( ::uint64_t value);

  inline bool hasTasks();
  inline  ::capnp::List< ::uint64_t>::Builder getTasks();
  inline void setTasks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTasks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTasks(unsigned int size);
  inline void adoptTasks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTasks();

  inline bool hasFunctions();
  inline  ::capnp::List< ::uint64_t>::Builder getFunctions();
  inline void setFunctions( ::capnp::List< ::uint64_t>::Reader value);
  inline void setFunctions(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initFunctions(unsigned int size);
  inline void adoptFunctions(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownFunctions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacetfdecl::Pipeline {
public:
  typedef Interfacetfdecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Contassign::Reader {
public:
  typedef Contassign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Contassign::Builder {
public:
  typedef Contassign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Contassign::Pipeline {
public:
  typedef Contassign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Port::Reader {
public:
  typedef Port Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Port::Builder {
public:
  typedef Port Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Port::Pipeline {
public:
  typedef Port Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Primitive::Reader {
public:
  typedef Primitive Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Primitive::Builder {
public:
  typedef Primitive Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Primitive::Pipeline {
public:
  typedef Primitive Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modpath::Reader {
public:
  typedef Modpath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modpath::Builder {
public:
  typedef Modpath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modpath::Pipeline {
public:
  typedef Modpath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tchk::Reader {
public:
  typedef Tchk Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tchk::Builder {
public:
  typedef Tchk Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tchk::Pipeline {
public:
  typedef Tchk Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Defparam::Reader {
public:
  typedef Defparam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Defparam::Builder {
public:
  typedef Defparam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Defparam::Pipeline {
public:
  typedef Defparam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Iodecl::Reader {
public:
  typedef Iodecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Iodecl::Builder {
public:
  typedef Iodecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Iodecl::Pipeline {
public:
  typedef Iodecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Aliasstmt::Reader {
public:
  typedef Aliasstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Aliasstmt::Builder {
public:
  typedef Aliasstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Aliasstmt::Pipeline {
public:
  typedef Aliasstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clockingblock::Reader {
public:
  typedef Clockingblock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clockingblock::Builder {
public:
  typedef Clockingblock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clockingblock::Pipeline {
public:
  typedef Clockingblock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Range::Reader {
public:
  typedef Range Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Range::Builder {
public:
  typedef Range Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Range::Pipeline {
public:
  typedef Range Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Paramassign::Reader {
public:
  typedef Paramassign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Paramassign::Builder {
public:
  typedef Paramassign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Paramassign::Pipeline {
public:
  typedef Paramassign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacearray::Reader {
public:
  typedef Interfacearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getParamassigns() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline  ::uint64_t getRange() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacearray::Builder {
public:
  typedef Interfacearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownParamassigns();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline  ::uint64_t getRange();
  inline void setRange( ::uint64_t value);

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacearray::Pipeline {
public:
  typedef Interfacearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Programarray::Reader {
public:
  typedef Programarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline  ::uint64_t getRange() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Programarray::Builder {
public:
  typedef Programarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline  ::uint64_t getRange();
  inline void setRange( ::uint64_t value);

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Programarray::Pipeline {
public:
  typedef Programarray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modulearray::Reader {
public:
  typedef Modulearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasParamassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getParamassigns() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline  ::uint64_t getRange() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modulearray::Builder {
public:
  typedef Modulearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasParamassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getParamassigns();
  inline void setParamassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initParamassigns(unsigned int size);
  inline void adoptParamassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownParamassigns();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline  ::uint64_t getRange();
  inline void setRange( ::uint64_t value);

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modulearray::Pipeline {
public:
  typedef Modulearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gatearray::Reader {
public:
  typedef Gatearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitives() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline  ::uint64_t getRange() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gatearray::Builder {
public:
  typedef Gatearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitives();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline  ::uint64_t getRange();
  inline void setRange( ::uint64_t value);

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gatearray::Pipeline {
public:
  typedef Gatearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Switcharray::Reader {
public:
  typedef Switcharray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitives() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline  ::uint64_t getRange() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Switcharray::Builder {
public:
  typedef Switcharray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitives();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline  ::uint64_t getRange();
  inline void setRange( ::uint64_t value);

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Switcharray::Pipeline {
public:
  typedef Switcharray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Udparray::Reader {
public:
  typedef Udparray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasDelay() const;
  inline  ::ObjIndexType::Reader getDelay() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitives() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::int64_t getVpiSize() const;

  inline bool hasExpr() const;
  inline  ::ObjIndexType::Reader getExpr() const;

  inline bool hasLeftexpr() const;
  inline  ::ObjIndexType::Reader getLeftexpr() const;

  inline bool hasRightexpr() const;
  inline  ::ObjIndexType::Reader getRightexpr() const;

  inline bool hasInstances() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getInstances() const;

  inline  ::uint64_t getRange() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Udparray::Builder {
public:
  typedef Udparray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasDelay();
  inline  ::ObjIndexType::Builder getDelay();
  inline void setDelay( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownDelay();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitives();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::int64_t getVpiSize();
  inline void setVpiSize( ::int64_t value);

  inline bool hasExpr();
  inline  ::ObjIndexType::Builder getExpr();
  inline void setExpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExpr();
  inline void adoptExpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExpr();

  inline bool hasLeftexpr();
  inline  ::ObjIndexType::Builder getLeftexpr();
  inline void setLeftexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initLeftexpr();
  inline void adoptLeftexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownLeftexpr();

  inline bool hasRightexpr();
  inline  ::ObjIndexType::Builder getRightexpr();
  inline void setRightexpr( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initRightexpr();
  inline void adoptRightexpr(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownRightexpr();

  inline bool hasInstances();
  inline  ::capnp::List< ::ObjIndexType>::Builder getInstances();
  inline void setInstances( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initInstances(unsigned int size);
  inline void adoptInstances(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownInstances();

  inline  ::uint64_t getRange();
  inline void setRange( ::uint64_t value);

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Udparray::Pipeline {
public:
  typedef Udparray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getDelay();
  inline  ::ObjIndexType::Pipeline getExpr();
  inline  ::ObjIndexType::Pipeline getLeftexpr();
  inline  ::ObjIndexType::Pipeline getRightexpr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arraynet::Reader {
public:
  typedef Arraynet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arraynet::Builder {
public:
  typedef Arraynet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arraynet::Pipeline {
public:
  typedef Arraynet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Logicvar::Reader {
public:
  typedef Logicvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Logicvar::Builder {
public:
  typedef Logicvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Logicvar::Pipeline {
public:
  typedef Logicvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arrayvar::Reader {
public:
  typedef Arrayvar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arrayvar::Builder {
public:
  typedef Arrayvar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arrayvar::Pipeline {
public:
  typedef Arrayvar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedevent::Reader {
public:
  typedef Namedevent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedevent::Builder {
public:
  typedef Namedevent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedevent::Pipeline {
public:
  typedef Namedevent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Namedeventarray::Reader {
public:
  typedef Namedeventarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Namedeventarray::Builder {
public:
  typedef Namedeventarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Namedeventarray::Pipeline {
public:
  typedef Namedeventarray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Specparam::Reader {
public:
  typedef Specparam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Specparam::Builder {
public:
  typedef Specparam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Specparam::Pipeline {
public:
  typedef Specparam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classdefn::Reader {
public:
  typedef Classdefn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classdefn::Builder {
public:
  typedef Classdefn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classdefn::Pipeline {
public:
  typedef Classdefn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interface::Reader {
public:
  typedef Interface Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiIndex() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getProcess() const;

  inline bool hasInterfacetfdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacetfdecls() const;

  inline bool hasModports() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModports() const;

  inline  ::uint64_t getGlobalclocking() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasModpaths() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModpaths() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasTaskfunc() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTaskfunc() const;

  inline bool hasNet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNet() const;

  inline bool hasArraynet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getArraynet() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasAssertion() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getAssertion() const;

  inline bool hasTypespec() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespec() const;

  inline bool hasClassdefn() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getClassdefn() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProgramarrays() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasNamedevent() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevent() const;

  inline bool hasNamedeventarray() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarray() const;

  inline bool hasSpecparam() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSpecparam() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interface::Builder {
public:
  typedef Interface Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiIndex();
  inline void setVpiIndex( ::uint64_t value);

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownProcess();

  inline bool hasInterfacetfdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacetfdecls();
  inline void setInterfacetfdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacetfdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacetfdecls(unsigned int size);
  inline void adoptInterfacetfdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacetfdecls();

  inline bool hasModports();
  inline  ::capnp::List< ::uint64_t>::Builder getModports();
  inline void setModports( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModports(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModports(unsigned int size);
  inline void adoptModports(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModports();

  inline  ::uint64_t getGlobalclocking();
  inline void setGlobalclocking( ::uint64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasModpaths();
  inline  ::capnp::List< ::uint64_t>::Builder getModpaths();
  inline void setModpaths( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModpaths(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModpaths(unsigned int size);
  inline void adoptModpaths(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModpaths();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasTaskfunc();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTaskfunc();
  inline void setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTaskfunc(unsigned int size);
  inline void adoptTaskfunc(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTaskfunc();

  inline bool hasNet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNet();
  inline void setNet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNet(unsigned int size);
  inline void adoptNet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNet();

  inline bool hasArraynet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getArraynet();
  inline void setArraynet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initArraynet(unsigned int size);
  inline void adoptArraynet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownArraynet();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasAssertion();
  inline  ::capnp::List< ::ObjIndexType>::Builder getAssertion();
  inline void setAssertion( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initAssertion(unsigned int size);
  inline void adoptAssertion(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownAssertion();

  inline bool hasTypespec();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespec();
  inline void setTypespec( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespec(unsigned int size);
  inline void adoptTypespec(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespec();

  inline bool hasClassdefn();
  inline  ::capnp::List< ::ObjIndexType>::Builder getClassdefn();
  inline void setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initClassdefn(unsigned int size);
  inline void adoptClassdefn(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownClassdefn();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProgramarrays();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasNamedevent();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevent();
  inline void setNamedevent( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevent(unsigned int size);
  inline void adoptNamedevent(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevent();

  inline bool hasNamedeventarray();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarray();
  inline void setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarray(unsigned int size);
  inline void adoptNamedeventarray(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarray();

  inline bool hasSpecparam();
  inline  ::capnp::List< ::uint64_t>::Builder getSpecparam();
  inline void setSpecparam( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSpecparam(unsigned int size);
  inline void adoptSpecparam(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSpecparam();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interface::Pipeline {
public:
  typedef Interface Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExprdist();
  inline  ::ObjIndexType::Pipeline getInstancearray();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Program::Reader {
public:
  typedef Program Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiIndex() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getProcess() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getClockingblocks() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasTaskfunc() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTaskfunc() const;

  inline bool hasNet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNet() const;

  inline bool hasArraynet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getArraynet() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasAssertion() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getAssertion() const;

  inline bool hasTypespec() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespec() const;

  inline bool hasClassdefn() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getClassdefn() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProgramarrays() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasNamedevent() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevent() const;

  inline bool hasNamedeventarray() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarray() const;

  inline bool hasSpecparam() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSpecparam() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Program::Builder {
public:
  typedef Program Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiIndex();
  inline void setVpiIndex( ::uint64_t value);

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownProcess();

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownClockingblocks();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasTaskfunc();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTaskfunc();
  inline void setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTaskfunc(unsigned int size);
  inline void adoptTaskfunc(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTaskfunc();

  inline bool hasNet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNet();
  inline void setNet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNet(unsigned int size);
  inline void adoptNet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNet();

  inline bool hasArraynet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getArraynet();
  inline void setArraynet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initArraynet(unsigned int size);
  inline void adoptArraynet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownArraynet();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasAssertion();
  inline  ::capnp::List< ::ObjIndexType>::Builder getAssertion();
  inline void setAssertion( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initAssertion(unsigned int size);
  inline void adoptAssertion(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownAssertion();

  inline bool hasTypespec();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespec();
  inline void setTypespec( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespec(unsigned int size);
  inline void adoptTypespec(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespec();

  inline bool hasClassdefn();
  inline  ::capnp::List< ::ObjIndexType>::Builder getClassdefn();
  inline void setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initClassdefn(unsigned int size);
  inline void adoptClassdefn(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownClassdefn();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProgramarrays();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasNamedevent();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevent();
  inline void setNamedevent( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevent(unsigned int size);
  inline void adoptNamedevent(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevent();

  inline bool hasNamedeventarray();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarray();
  inline void setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarray(unsigned int size);
  inline void adoptNamedeventarray(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarray();

  inline bool hasSpecparam();
  inline  ::capnp::List< ::uint64_t>::Builder getSpecparam();
  inline void setSpecparam( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSpecparam(unsigned int size);
  inline void adoptSpecparam(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSpecparam();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Program::Pipeline {
public:
  typedef Program Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getInstancearray();
  inline  ::ObjIndexType::Pipeline getExprdist();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Package::Reader {
public:
  typedef Package Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool getVpiUnit() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasTaskfunc() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTaskfunc() const;

  inline bool hasNet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNet() const;

  inline bool hasArraynet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getArraynet() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasAssertion() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getAssertion() const;

  inline bool hasTypespec() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespec() const;

  inline bool hasClassdefn() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getClassdefn() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProgramarrays() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasNamedevent() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevent() const;

  inline bool hasNamedeventarray() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarray() const;

  inline bool hasSpecparam() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSpecparam() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Package::Builder {
public:
  typedef Package Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool getVpiUnit();
  inline void setVpiUnit(bool value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasTaskfunc();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTaskfunc();
  inline void setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTaskfunc(unsigned int size);
  inline void adoptTaskfunc(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTaskfunc();

  inline bool hasNet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNet();
  inline void setNet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNet(unsigned int size);
  inline void adoptNet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNet();

  inline bool hasArraynet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getArraynet();
  inline void setArraynet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initArraynet(unsigned int size);
  inline void adoptArraynet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownArraynet();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasAssertion();
  inline  ::capnp::List< ::ObjIndexType>::Builder getAssertion();
  inline void setAssertion( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initAssertion(unsigned int size);
  inline void adoptAssertion(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownAssertion();

  inline bool hasTypespec();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespec();
  inline void setTypespec( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespec(unsigned int size);
  inline void adoptTypespec(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespec();

  inline bool hasClassdefn();
  inline  ::capnp::List< ::ObjIndexType>::Builder getClassdefn();
  inline void setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initClassdefn(unsigned int size);
  inline void adoptClassdefn(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownClassdefn();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProgramarrays();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasNamedevent();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevent();
  inline void setNamedevent( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevent(unsigned int size);
  inline void adoptNamedevent(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevent();

  inline bool hasNamedeventarray();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarray();
  inline void setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarray(unsigned int size);
  inline void adoptNamedeventarray(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarray();

  inline bool hasSpecparam();
  inline  ::capnp::List< ::uint64_t>::Builder getSpecparam();
  inline void setSpecparam( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSpecparam(unsigned int size);
  inline void adoptSpecparam(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSpecparam();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Package::Pipeline {
public:
  typedef Package Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Module::Reader {
public:
  typedef Module Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiIndex() const;

  inline bool getVpiTopModule() const;

  inline  ::int64_t getVpiDefDecayTime() const;

  inline bool hasExprdist() const;
  inline  ::ObjIndexType::Reader getExprdist() const;

  inline bool hasInstancearray() const;
  inline  ::ObjIndexType::Reader getInstancearray() const;

  inline bool hasScope() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getScope() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getProcess() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitives() const;

  inline bool hasPrimitivearrays() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getPrimitivearrays() const;

  inline  ::uint64_t getGlobalclocking() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline  ::uint64_t getModulearray() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPorts() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

  inline bool hasModulearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModulearrays() const;

  inline bool hasModpaths() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModpaths() const;

  inline bool hasTchks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchks() const;

  inline bool hasDefparams() const;
  inline  ::capnp::List< ::uint64_t>::Reader getDefparams() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getIodecls() const;

  inline bool hasAliasstmts() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAliasstmts() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getClockingblocks() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getVpiFullName() const;

  inline  ::uint64_t getVpiDefName() const;

  inline bool getVpiArrayMember() const;

  inline bool getVpiCellInstance() const;

  inline  ::int64_t getVpiDefNetType() const;

  inline  ::uint64_t getVpiDefFile() const;

  inline  ::int64_t getVpiDefDelayMode() const;

  inline bool getVpiProtected() const;

  inline  ::int64_t getVpiTimePrecision() const;

  inline  ::int64_t getVpiTimeUnit() const;

  inline  ::int64_t getVpiUnconnDrive() const;

  inline  ::uint64_t getVpiLibrary() const;

  inline  ::uint64_t getVpiCell() const;

  inline  ::uint64_t getVpiConfig() const;

  inline bool getVpiAutomatic() const;

  inline bool getVpiTop() const;

  inline bool hasTaskfunc() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTaskfunc() const;

  inline bool hasNet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getNet() const;

  inline bool hasArraynet() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getArraynet() const;

  inline bool hasVariables() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getVariables() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getParameters() const;

  inline bool hasAssertion() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getAssertion() const;

  inline bool hasTypespec() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getTypespec() const;

  inline bool hasClassdefn() const;
  inline  ::capnp::List< ::ObjIndexType>::Reader getClassdefn() const;

  inline bool hasInstance() const;
  inline  ::ObjIndexType::Reader getInstance() const;

  inline bool hasPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrograms() const;

  inline bool hasProgramarrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProgramarrays() const;

  inline bool hasLogicvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getLogicvar() const;

  inline bool hasArrayvar() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvar() const;

  inline bool hasArrayvarmem() const;
  inline  ::capnp::List< ::uint64_t>::Reader getArrayvarmem() const;

  inline bool hasNamedevent() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedevent() const;

  inline bool hasNamedeventarray() const;
  inline  ::capnp::List< ::uint64_t>::Reader getNamedeventarray() const;

  inline bool hasSpecparam() const;
  inline  ::capnp::List< ::uint64_t>::Reader getSpecparam() const;

  inline  ::uint64_t getModule() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Module::Builder {
public:
  typedef Module Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiIndex();
  inline void setVpiIndex( ::uint64_t value);

  inline bool getVpiTopModule();
  inline void setVpiTopModule(bool value);

  inline  ::int64_t getVpiDefDecayTime();
  inline void setVpiDefDecayTime( ::int64_t value);

  inline bool hasExprdist();
  inline  ::ObjIndexType::Builder getExprdist();
  inline void setExprdist( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initExprdist();
  inline void adoptExprdist(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownExprdist();

  inline bool hasInstancearray();
  inline  ::ObjIndexType::Builder getInstancearray();
  inline void setInstancearray( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstancearray();
  inline void adoptInstancearray(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstancearray();

  inline bool hasScope();
  inline  ::capnp::List< ::ObjIndexType>::Builder getScope();
  inline void setScope( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initScope(unsigned int size);
  inline void adoptScope(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownScope();

  inline bool hasProcess();
  inline  ::capnp::List< ::ObjIndexType>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownProcess();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitives();

  inline bool hasPrimitivearrays();
  inline  ::capnp::List< ::ObjIndexType>::Builder getPrimitivearrays();
  inline void setPrimitivearrays( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initPrimitivearrays(unsigned int size);
  inline void adoptPrimitivearrays(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownPrimitivearrays();

  inline  ::uint64_t getGlobalclocking();
  inline void setGlobalclocking( ::uint64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline  ::uint64_t getModulearray();
  inline void setModulearray( ::uint64_t value);

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPorts();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

  inline bool hasModulearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getModulearrays();
  inline void setModulearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModulearrays(unsigned int size);
  inline void adoptModulearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModulearrays();

  inline bool hasModpaths();
  inline  ::capnp::List< ::uint64_t>::Builder getModpaths();
  inline void setModpaths( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModpaths(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModpaths(unsigned int size);
  inline void adoptModpaths(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModpaths();

  inline bool hasTchks();
  inline  ::capnp::List< ::uint64_t>::Builder getTchks();
  inline void setTchks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchks(unsigned int size);
  inline void adoptTchks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchks();

  inline bool hasDefparams();
  inline  ::capnp::List< ::uint64_t>::Builder getDefparams();
  inline void setDefparams( ::capnp::List< ::uint64_t>::Reader value);
  inline void setDefparams(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initDefparams(unsigned int size);
  inline void adoptDefparams(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownDefparams();

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownIodecls();

  inline bool hasAliasstmts();
  inline  ::capnp::List< ::uint64_t>::Builder getAliasstmts();
  inline void setAliasstmts( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAliasstmts(unsigned int size);
  inline void adoptAliasstmts(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAliasstmts();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownClockingblocks();

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getVpiFullName();
  inline void setVpiFullName( ::uint64_t value);

  inline  ::uint64_t getVpiDefName();
  inline void setVpiDefName( ::uint64_t value);

  inline bool getVpiArrayMember();
  inline void setVpiArrayMember(bool value);

  inline bool getVpiCellInstance();
  inline void setVpiCellInstance(bool value);

  inline  ::int64_t getVpiDefNetType();
  inline void setVpiDefNetType( ::int64_t value);

  inline  ::uint64_t getVpiDefFile();
  inline void setVpiDefFile( ::uint64_t value);

  inline  ::int64_t getVpiDefDelayMode();
  inline void setVpiDefDelayMode( ::int64_t value);

  inline bool getVpiProtected();
  inline void setVpiProtected(bool value);

  inline  ::int64_t getVpiTimePrecision();
  inline void setVpiTimePrecision( ::int64_t value);

  inline  ::int64_t getVpiTimeUnit();
  inline void setVpiTimeUnit( ::int64_t value);

  inline  ::int64_t getVpiUnconnDrive();
  inline void setVpiUnconnDrive( ::int64_t value);

  inline  ::uint64_t getVpiLibrary();
  inline void setVpiLibrary( ::uint64_t value);

  inline  ::uint64_t getVpiCell();
  inline void setVpiCell( ::uint64_t value);

  inline  ::uint64_t getVpiConfig();
  inline void setVpiConfig( ::uint64_t value);

  inline bool getVpiAutomatic();
  inline void setVpiAutomatic(bool value);

  inline bool getVpiTop();
  inline void setVpiTop(bool value);

  inline bool hasTaskfunc();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTaskfunc();
  inline void setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTaskfunc(unsigned int size);
  inline void adoptTaskfunc(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTaskfunc();

  inline bool hasNet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getNet();
  inline void setNet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initNet(unsigned int size);
  inline void adoptNet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownNet();

  inline bool hasArraynet();
  inline  ::capnp::List< ::ObjIndexType>::Builder getArraynet();
  inline void setArraynet( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initArraynet(unsigned int size);
  inline void adoptArraynet(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownArraynet();

  inline bool hasVariables();
  inline  ::capnp::List< ::ObjIndexType>::Builder getVariables();
  inline void setVariables( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initVariables(unsigned int size);
  inline void adoptVariables(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownVariables();

  inline bool hasParameters();
  inline  ::capnp::List< ::ObjIndexType>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownParameters();

  inline bool hasAssertion();
  inline  ::capnp::List< ::ObjIndexType>::Builder getAssertion();
  inline void setAssertion( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initAssertion(unsigned int size);
  inline void adoptAssertion(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownAssertion();

  inline bool hasTypespec();
  inline  ::capnp::List< ::ObjIndexType>::Builder getTypespec();
  inline void setTypespec( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initTypespec(unsigned int size);
  inline void adoptTypespec(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownTypespec();

  inline bool hasClassdefn();
  inline  ::capnp::List< ::ObjIndexType>::Builder getClassdefn();
  inline void setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value);
  inline  ::capnp::List< ::ObjIndexType>::Builder initClassdefn(unsigned int size);
  inline void adoptClassdefn(::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> disownClassdefn();

  inline bool hasInstance();
  inline  ::ObjIndexType::Builder getInstance();
  inline void setInstance( ::ObjIndexType::Reader value);
  inline  ::ObjIndexType::Builder initInstance();
  inline void adoptInstance(::capnp::Orphan< ::ObjIndexType>&& value);
  inline ::capnp::Orphan< ::ObjIndexType> disownInstance();

  inline bool hasPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getPrograms();
  inline void setPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrograms(unsigned int size);
  inline void adoptPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrograms();

  inline bool hasProgramarrays();
  inline  ::capnp::List< ::uint64_t>::Builder getProgramarrays();
  inline void setProgramarrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProgramarrays(unsigned int size);
  inline void adoptProgramarrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProgramarrays();

  inline bool hasLogicvar();
  inline  ::capnp::List< ::uint64_t>::Builder getLogicvar();
  inline void setLogicvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initLogicvar(unsigned int size);
  inline void adoptLogicvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownLogicvar();

  inline bool hasArrayvar();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvar();
  inline void setArrayvar( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvar(unsigned int size);
  inline void adoptArrayvar(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvar();

  inline bool hasArrayvarmem();
  inline  ::capnp::List< ::uint64_t>::Builder getArrayvarmem();
  inline void setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value);
  inline void setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initArrayvarmem(unsigned int size);
  inline void adoptArrayvarmem(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownArrayvarmem();

  inline bool hasNamedevent();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedevent();
  inline void setNamedevent( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedevent(unsigned int size);
  inline void adoptNamedevent(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedevent();

  inline bool hasNamedeventarray();
  inline  ::capnp::List< ::uint64_t>::Builder getNamedeventarray();
  inline void setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value);
  inline void setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initNamedeventarray(unsigned int size);
  inline void adoptNamedeventarray(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownNamedeventarray();

  inline bool hasSpecparam();
  inline  ::capnp::List< ::uint64_t>::Builder getSpecparam();
  inline void setSpecparam( ::capnp::List< ::uint64_t>::Reader value);
  inline void setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initSpecparam(unsigned int size);
  inline void adoptSpecparam(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownSpecparam();

  inline  ::uint64_t getModule();
  inline void setModule( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Module::Pipeline {
public:
  typedef Module Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ObjIndexType::Pipeline getExprdist();
  inline  ::ObjIndexType::Pipeline getInstancearray();
  inline  ::ObjIndexType::Pipeline getInstance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Design::Reader {
public:
  typedef Design Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasAllModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAllModules() const;

  inline bool hasTopModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTopModules() const;

  inline bool hasAllPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAllPrograms() const;

  inline bool hasAllPackages() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAllPackages() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Design::Builder {
public:
  typedef Design Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasAllModules();
  inline  ::capnp::List< ::uint64_t>::Builder getAllModules();
  inline void setAllModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAllModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAllModules(unsigned int size);
  inline void adoptAllModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAllModules();

  inline bool hasTopModules();
  inline  ::capnp::List< ::uint64_t>::Builder getTopModules();
  inline void setTopModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTopModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTopModules(unsigned int size);
  inline void adoptTopModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTopModules();

  inline bool hasAllPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getAllPrograms();
  inline void setAllPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAllPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAllPrograms(unsigned int size);
  inline void adoptAllPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAllPrograms();

  inline bool hasAllPackages();
  inline  ::capnp::List< ::uint64_t>::Builder getAllPackages();
  inline void setAllPackages( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAllPackages(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAllPackages(unsigned int size);
  inline void adoptAllPackages(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAllPackages();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Design::Pipeline {
public:
  typedef Design Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t ObjIndexType::Reader::getIndex() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t ObjIndexType::Builder::getIndex() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ObjIndexType::Builder::setIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ObjIndexType::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t ObjIndexType::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void ObjIndexType::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool UhdmRoot::Reader::hasDesigns() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasDesigns() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Design>::Reader UhdmRoot::Reader::getDesigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::getDesigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setDesigns( ::capnp::List< ::Design>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::initDesigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptDesigns(
    ::capnp::Orphan< ::capnp::List< ::Design>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Design>> UhdmRoot::Builder::disownDesigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasSymbols() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasSymbols() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader UhdmRoot::Reader::getSymbols() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder UhdmRoot::Builder::getSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setSymbols( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void UhdmRoot::Builder::setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder UhdmRoot::Builder::initSymbols(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptSymbols(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> UhdmRoot::Builder::disownSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProcess() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProcess() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Process>::Reader UhdmRoot::Reader::getFactoryProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Process>::Builder UhdmRoot::Builder::getFactoryProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProcess( ::capnp::List< ::Process>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Process>::Builder UhdmRoot::Builder::initFactoryProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProcess(
    ::capnp::Orphan< ::capnp::List< ::Process>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Process>> UhdmRoot::Builder::disownFactoryProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryBegin() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryBegin() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Begin>::Reader UhdmRoot::Reader::getFactoryBegin() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Begin>::Builder UhdmRoot::Builder::getFactoryBegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryBegin( ::capnp::List< ::Begin>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Begin>::Builder UhdmRoot::Builder::initFactoryBegin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryBegin(
    ::capnp::Orphan< ::capnp::List< ::Begin>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Begin>> UhdmRoot::Builder::disownFactoryBegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Begin>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedbegin() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedbegin() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedbegin>::Reader UhdmRoot::Reader::getFactoryNamedbegin() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedbegin>::Builder UhdmRoot::Builder::getFactoryNamedbegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedbegin( ::capnp::List< ::Namedbegin>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedbegin>::Builder UhdmRoot::Builder::initFactoryNamedbegin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedbegin(
    ::capnp::Orphan< ::capnp::List< ::Namedbegin>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedbegin>> UhdmRoot::Builder::disownFactoryNamedbegin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedbegin>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDistribution() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDistribution() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Distribution>::Reader UhdmRoot::Reader::getFactoryDistribution() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Distribution>::Builder UhdmRoot::Builder::getFactoryDistribution() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDistribution( ::capnp::List< ::Distribution>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Distribution>::Builder UhdmRoot::Builder::initFactoryDistribution(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDistribution(
    ::capnp::Orphan< ::capnp::List< ::Distribution>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Distribution>> UhdmRoot::Builder::disownFactoryDistribution() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Distribution>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryOperation() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryOperation() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Operation>::Reader UhdmRoot::Reader::getFactoryOperation() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Operation>::Builder UhdmRoot::Builder::getFactoryOperation() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryOperation( ::capnp::List< ::Operation>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Operation>::Builder UhdmRoot::Builder::initFactoryOperation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryOperation(
    ::capnp::Orphan< ::capnp::List< ::Operation>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Operation>> UhdmRoot::Builder::disownFactoryOperation() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Operation>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRefobj() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRefobj() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Refobj>::Reader UhdmRoot::Reader::getFactoryRefobj() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Refobj>::Builder UhdmRoot::Builder::getFactoryRefobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRefobj( ::capnp::List< ::Refobj>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Refobj>::Builder UhdmRoot::Builder::initFactoryRefobj(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRefobj(
    ::capnp::Orphan< ::capnp::List< ::Refobj>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Refobj>> UhdmRoot::Builder::disownFactoryRefobj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Refobj>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTask() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTask() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Task>::Reader UhdmRoot::Reader::getFactoryTask() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Task>::Builder UhdmRoot::Builder::getFactoryTask() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTask( ::capnp::List< ::Task>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Task>::Builder UhdmRoot::Builder::initFactoryTask(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTask(
    ::capnp::Orphan< ::capnp::List< ::Task>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Task>> UhdmRoot::Builder::disownFactoryTask() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryFunction() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryFunction() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Function>::Reader UhdmRoot::Reader::getFactoryFunction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Function>::Builder UhdmRoot::Builder::getFactoryFunction() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryFunction( ::capnp::List< ::Function>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Function>::Builder UhdmRoot::Builder::initFactoryFunction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryFunction(
    ::capnp::Orphan< ::capnp::List< ::Function>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Function>> UhdmRoot::Builder::disownFactoryFunction() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModport() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModport() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modport>::Reader UhdmRoot::Reader::getFactoryModport() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modport>::Builder UhdmRoot::Builder::getFactoryModport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModport( ::capnp::List< ::Modport>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modport>::Builder UhdmRoot::Builder::initFactoryModport(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModport(
    ::capnp::Orphan< ::capnp::List< ::Modport>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modport>> UhdmRoot::Builder::disownFactoryModport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacetfdecl() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacetfdecl() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacetfdecl>::Reader UhdmRoot::Reader::getFactoryInterfacetfdecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacetfdecl>::Builder UhdmRoot::Builder::getFactoryInterfacetfdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacetfdecl( ::capnp::List< ::Interfacetfdecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacetfdecl>::Builder UhdmRoot::Builder::initFactoryInterfacetfdecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacetfdecl(
    ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>> UhdmRoot::Builder::disownFactoryInterfacetfdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryContassign() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryContassign() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Contassign>::Reader UhdmRoot::Reader::getFactoryContassign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Contassign>::Builder UhdmRoot::Builder::getFactoryContassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryContassign( ::capnp::List< ::Contassign>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Contassign>::Builder UhdmRoot::Builder::initFactoryContassign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryContassign(
    ::capnp::Orphan< ::capnp::List< ::Contassign>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Contassign>> UhdmRoot::Builder::disownFactoryContassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPort() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPort() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Port>::Reader UhdmRoot::Reader::getFactoryPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Port>::Builder UhdmRoot::Builder::getFactoryPort() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPort( ::capnp::List< ::Port>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Port>::Builder UhdmRoot::Builder::initFactoryPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPort(
    ::capnp::Orphan< ::capnp::List< ::Port>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Port>> UhdmRoot::Builder::disownFactoryPort() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPrimitive() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPrimitive() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Primitive>::Reader UhdmRoot::Reader::getFactoryPrimitive() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Primitive>::Builder UhdmRoot::Builder::getFactoryPrimitive() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPrimitive( ::capnp::List< ::Primitive>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Primitive>::Builder UhdmRoot::Builder::initFactoryPrimitive(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPrimitive(
    ::capnp::Orphan< ::capnp::List< ::Primitive>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Primitive>> UhdmRoot::Builder::disownFactoryPrimitive() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModpath() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModpath() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modpath>::Reader UhdmRoot::Reader::getFactoryModpath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modpath>::Builder UhdmRoot::Builder::getFactoryModpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModpath( ::capnp::List< ::Modpath>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modpath>::Builder UhdmRoot::Builder::initFactoryModpath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModpath(
    ::capnp::Orphan< ::capnp::List< ::Modpath>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modpath>> UhdmRoot::Builder::disownFactoryModpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTchk() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTchk() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Tchk>::Reader UhdmRoot::Reader::getFactoryTchk() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Tchk>::Builder UhdmRoot::Builder::getFactoryTchk() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTchk( ::capnp::List< ::Tchk>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Tchk>::Builder UhdmRoot::Builder::initFactoryTchk(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTchk(
    ::capnp::Orphan< ::capnp::List< ::Tchk>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Tchk>> UhdmRoot::Builder::disownFactoryTchk() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDefparam() const {
  return !_reader.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDefparam() {
  return !_builder.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Defparam>::Reader UhdmRoot::Reader::getFactoryDefparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::get(
      _reader.getPointerField(17 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Defparam>::Builder UhdmRoot::Builder::getFactoryDefparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::get(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDefparam( ::capnp::List< ::Defparam>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Defparam>::Builder UhdmRoot::Builder::initFactoryDefparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::init(
      _builder.getPointerField(17 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDefparam(
    ::capnp::Orphan< ::capnp::List< ::Defparam>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::adopt(
      _builder.getPointerField(17 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Defparam>> UhdmRoot::Builder::disownFactoryDefparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::disown(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIodecl() const {
  return !_reader.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIodecl() {
  return !_builder.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Iodecl>::Reader UhdmRoot::Reader::getFactoryIodecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::get(
      _reader.getPointerField(18 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Iodecl>::Builder UhdmRoot::Builder::getFactoryIodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::get(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIodecl( ::capnp::List< ::Iodecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Iodecl>::Builder UhdmRoot::Builder::initFactoryIodecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::init(
      _builder.getPointerField(18 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIodecl(
    ::capnp::Orphan< ::capnp::List< ::Iodecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::adopt(
      _builder.getPointerField(18 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Iodecl>> UhdmRoot::Builder::disownFactoryIodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::disown(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAliasstmt() const {
  return !_reader.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAliasstmt() {
  return !_builder.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Aliasstmt>::Reader UhdmRoot::Reader::getFactoryAliasstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::get(
      _reader.getPointerField(19 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Aliasstmt>::Builder UhdmRoot::Builder::getFactoryAliasstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::get(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAliasstmt( ::capnp::List< ::Aliasstmt>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Aliasstmt>::Builder UhdmRoot::Builder::initFactoryAliasstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::init(
      _builder.getPointerField(19 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAliasstmt(
    ::capnp::Orphan< ::capnp::List< ::Aliasstmt>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::adopt(
      _builder.getPointerField(19 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Aliasstmt>> UhdmRoot::Builder::disownFactoryAliasstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::disown(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClockingblock() const {
  return !_reader.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClockingblock() {
  return !_builder.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Clockingblock>::Reader UhdmRoot::Reader::getFactoryClockingblock() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::get(
      _reader.getPointerField(20 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Clockingblock>::Builder UhdmRoot::Builder::getFactoryClockingblock() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::get(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClockingblock( ::capnp::List< ::Clockingblock>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::set(
      _builder.getPointerField(20 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Clockingblock>::Builder UhdmRoot::Builder::initFactoryClockingblock(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::init(
      _builder.getPointerField(20 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClockingblock(
    ::capnp::Orphan< ::capnp::List< ::Clockingblock>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::adopt(
      _builder.getPointerField(20 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Clockingblock>> UhdmRoot::Builder::disownFactoryClockingblock() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::disown(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryRange() const {
  return !_reader.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryRange() {
  return !_builder.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Range>::Reader UhdmRoot::Reader::getFactoryRange() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::get(
      _reader.getPointerField(21 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Range>::Builder UhdmRoot::Builder::getFactoryRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::get(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryRange( ::capnp::List< ::Range>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::set(
      _builder.getPointerField(21 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Range>::Builder UhdmRoot::Builder::initFactoryRange(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::init(
      _builder.getPointerField(21 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryRange(
    ::capnp::Orphan< ::capnp::List< ::Range>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::adopt(
      _builder.getPointerField(21 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Range>> UhdmRoot::Builder::disownFactoryRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Range>>::disown(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryParamassign() const {
  return !_reader.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryParamassign() {
  return !_builder.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Paramassign>::Reader UhdmRoot::Reader::getFactoryParamassign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::get(
      _reader.getPointerField(22 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Paramassign>::Builder UhdmRoot::Builder::getFactoryParamassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::get(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryParamassign( ::capnp::List< ::Paramassign>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::set(
      _builder.getPointerField(22 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Paramassign>::Builder UhdmRoot::Builder::initFactoryParamassign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::init(
      _builder.getPointerField(22 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryParamassign(
    ::capnp::Orphan< ::capnp::List< ::Paramassign>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::adopt(
      _builder.getPointerField(22 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Paramassign>> UhdmRoot::Builder::disownFactoryParamassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Paramassign>>::disown(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacearray() const {
  return !_reader.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacearray() {
  return !_builder.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacearray>::Reader UhdmRoot::Reader::getFactoryInterfacearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::get(
      _reader.getPointerField(23 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacearray>::Builder UhdmRoot::Builder::getFactoryInterfacearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::get(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacearray( ::capnp::List< ::Interfacearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::set(
      _builder.getPointerField(23 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacearray>::Builder UhdmRoot::Builder::initFactoryInterfacearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::init(
      _builder.getPointerField(23 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacearray(
    ::capnp::Orphan< ::capnp::List< ::Interfacearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::adopt(
      _builder.getPointerField(23 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacearray>> UhdmRoot::Builder::disownFactoryInterfacearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::disown(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProgramarray() const {
  return !_reader.getPointerField(24 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProgramarray() {
  return !_builder.getPointerField(24 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Programarray>::Reader UhdmRoot::Reader::getFactoryProgramarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::get(
      _reader.getPointerField(24 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Programarray>::Builder UhdmRoot::Builder::getFactoryProgramarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::get(
      _builder.getPointerField(24 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProgramarray( ::capnp::List< ::Programarray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::set(
      _builder.getPointerField(24 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Programarray>::Builder UhdmRoot::Builder::initFactoryProgramarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::init(
      _builder.getPointerField(24 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProgramarray(
    ::capnp::Orphan< ::capnp::List< ::Programarray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::adopt(
      _builder.getPointerField(24 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Programarray>> UhdmRoot::Builder::disownFactoryProgramarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Programarray>>::disown(
      _builder.getPointerField(24 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModulearray() const {
  return !_reader.getPointerField(25 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModulearray() {
  return !_builder.getPointerField(25 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modulearray>::Reader UhdmRoot::Reader::getFactoryModulearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::get(
      _reader.getPointerField(25 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modulearray>::Builder UhdmRoot::Builder::getFactoryModulearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::get(
      _builder.getPointerField(25 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModulearray( ::capnp::List< ::Modulearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::set(
      _builder.getPointerField(25 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modulearray>::Builder UhdmRoot::Builder::initFactoryModulearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::init(
      _builder.getPointerField(25 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModulearray(
    ::capnp::Orphan< ::capnp::List< ::Modulearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::adopt(
      _builder.getPointerField(25 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modulearray>> UhdmRoot::Builder::disownFactoryModulearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::disown(
      _builder.getPointerField(25 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryGatearray() const {
  return !_reader.getPointerField(26 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryGatearray() {
  return !_builder.getPointerField(26 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Gatearray>::Reader UhdmRoot::Reader::getFactoryGatearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::get(
      _reader.getPointerField(26 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Gatearray>::Builder UhdmRoot::Builder::getFactoryGatearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::get(
      _builder.getPointerField(26 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryGatearray( ::capnp::List< ::Gatearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::set(
      _builder.getPointerField(26 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Gatearray>::Builder UhdmRoot::Builder::initFactoryGatearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::init(
      _builder.getPointerField(26 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryGatearray(
    ::capnp::Orphan< ::capnp::List< ::Gatearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::adopt(
      _builder.getPointerField(26 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Gatearray>> UhdmRoot::Builder::disownFactoryGatearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Gatearray>>::disown(
      _builder.getPointerField(26 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySwitcharray() const {
  return !_reader.getPointerField(27 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySwitcharray() {
  return !_builder.getPointerField(27 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Switcharray>::Reader UhdmRoot::Reader::getFactorySwitcharray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::get(
      _reader.getPointerField(27 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Switcharray>::Builder UhdmRoot::Builder::getFactorySwitcharray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::get(
      _builder.getPointerField(27 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySwitcharray( ::capnp::List< ::Switcharray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::set(
      _builder.getPointerField(27 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Switcharray>::Builder UhdmRoot::Builder::initFactorySwitcharray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::init(
      _builder.getPointerField(27 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySwitcharray(
    ::capnp::Orphan< ::capnp::List< ::Switcharray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::adopt(
      _builder.getPointerField(27 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Switcharray>> UhdmRoot::Builder::disownFactorySwitcharray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Switcharray>>::disown(
      _builder.getPointerField(27 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryUdparray() const {
  return !_reader.getPointerField(28 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryUdparray() {
  return !_builder.getPointerField(28 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Udparray>::Reader UhdmRoot::Reader::getFactoryUdparray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::get(
      _reader.getPointerField(28 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Udparray>::Builder UhdmRoot::Builder::getFactoryUdparray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::get(
      _builder.getPointerField(28 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryUdparray( ::capnp::List< ::Udparray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::set(
      _builder.getPointerField(28 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Udparray>::Builder UhdmRoot::Builder::initFactoryUdparray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::init(
      _builder.getPointerField(28 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryUdparray(
    ::capnp::Orphan< ::capnp::List< ::Udparray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::adopt(
      _builder.getPointerField(28 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Udparray>> UhdmRoot::Builder::disownFactoryUdparray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Udparray>>::disown(
      _builder.getPointerField(28 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryArraynet() const {
  return !_reader.getPointerField(29 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryArraynet() {
  return !_builder.getPointerField(29 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Arraynet>::Reader UhdmRoot::Reader::getFactoryArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::get(
      _reader.getPointerField(29 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Arraynet>::Builder UhdmRoot::Builder::getFactoryArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::get(
      _builder.getPointerField(29 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryArraynet( ::capnp::List< ::Arraynet>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::set(
      _builder.getPointerField(29 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Arraynet>::Builder UhdmRoot::Builder::initFactoryArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::init(
      _builder.getPointerField(29 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryArraynet(
    ::capnp::Orphan< ::capnp::List< ::Arraynet>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::adopt(
      _builder.getPointerField(29 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Arraynet>> UhdmRoot::Builder::disownFactoryArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arraynet>>::disown(
      _builder.getPointerField(29 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryLogicvar() const {
  return !_reader.getPointerField(30 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryLogicvar() {
  return !_builder.getPointerField(30 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Logicvar>::Reader UhdmRoot::Reader::getFactoryLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::get(
      _reader.getPointerField(30 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Logicvar>::Builder UhdmRoot::Builder::getFactoryLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::get(
      _builder.getPointerField(30 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryLogicvar( ::capnp::List< ::Logicvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::set(
      _builder.getPointerField(30 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Logicvar>::Builder UhdmRoot::Builder::initFactoryLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::init(
      _builder.getPointerField(30 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryLogicvar(
    ::capnp::Orphan< ::capnp::List< ::Logicvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::adopt(
      _builder.getPointerField(30 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Logicvar>> UhdmRoot::Builder::disownFactoryLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Logicvar>>::disown(
      _builder.getPointerField(30 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryArrayvar() const {
  return !_reader.getPointerField(31 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryArrayvar() {
  return !_builder.getPointerField(31 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Arrayvar>::Reader UhdmRoot::Reader::getFactoryArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::get(
      _reader.getPointerField(31 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Arrayvar>::Builder UhdmRoot::Builder::getFactoryArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::get(
      _builder.getPointerField(31 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryArrayvar( ::capnp::List< ::Arrayvar>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::set(
      _builder.getPointerField(31 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Arrayvar>::Builder UhdmRoot::Builder::initFactoryArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::init(
      _builder.getPointerField(31 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryArrayvar(
    ::capnp::Orphan< ::capnp::List< ::Arrayvar>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::adopt(
      _builder.getPointerField(31 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Arrayvar>> UhdmRoot::Builder::disownFactoryArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Arrayvar>>::disown(
      _builder.getPointerField(31 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedevent() const {
  return !_reader.getPointerField(32 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedevent() {
  return !_builder.getPointerField(32 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedevent>::Reader UhdmRoot::Reader::getFactoryNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::get(
      _reader.getPointerField(32 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedevent>::Builder UhdmRoot::Builder::getFactoryNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::get(
      _builder.getPointerField(32 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedevent( ::capnp::List< ::Namedevent>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::set(
      _builder.getPointerField(32 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedevent>::Builder UhdmRoot::Builder::initFactoryNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::init(
      _builder.getPointerField(32 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedevent(
    ::capnp::Orphan< ::capnp::List< ::Namedevent>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::adopt(
      _builder.getPointerField(32 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedevent>> UhdmRoot::Builder::disownFactoryNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedevent>>::disown(
      _builder.getPointerField(32 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryNamedeventarray() const {
  return !_reader.getPointerField(33 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryNamedeventarray() {
  return !_builder.getPointerField(33 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Namedeventarray>::Reader UhdmRoot::Reader::getFactoryNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::get(
      _reader.getPointerField(33 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Namedeventarray>::Builder UhdmRoot::Builder::getFactoryNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::get(
      _builder.getPointerField(33 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryNamedeventarray( ::capnp::List< ::Namedeventarray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::set(
      _builder.getPointerField(33 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Namedeventarray>::Builder UhdmRoot::Builder::initFactoryNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::init(
      _builder.getPointerField(33 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::Namedeventarray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::adopt(
      _builder.getPointerField(33 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Namedeventarray>> UhdmRoot::Builder::disownFactoryNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Namedeventarray>>::disown(
      _builder.getPointerField(33 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactorySpecparam() const {
  return !_reader.getPointerField(34 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactorySpecparam() {
  return !_builder.getPointerField(34 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Specparam>::Reader UhdmRoot::Reader::getFactorySpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::get(
      _reader.getPointerField(34 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Specparam>::Builder UhdmRoot::Builder::getFactorySpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::get(
      _builder.getPointerField(34 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactorySpecparam( ::capnp::List< ::Specparam>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::set(
      _builder.getPointerField(34 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Specparam>::Builder UhdmRoot::Builder::initFactorySpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::init(
      _builder.getPointerField(34 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactorySpecparam(
    ::capnp::Orphan< ::capnp::List< ::Specparam>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::adopt(
      _builder.getPointerField(34 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Specparam>> UhdmRoot::Builder::disownFactorySpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Specparam>>::disown(
      _builder.getPointerField(34 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClassdefn() const {
  return !_reader.getPointerField(35 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClassdefn() {
  return !_builder.getPointerField(35 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Classdefn>::Reader UhdmRoot::Reader::getFactoryClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::get(
      _reader.getPointerField(35 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Classdefn>::Builder UhdmRoot::Builder::getFactoryClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::get(
      _builder.getPointerField(35 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClassdefn( ::capnp::List< ::Classdefn>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::set(
      _builder.getPointerField(35 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Classdefn>::Builder UhdmRoot::Builder::initFactoryClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::init(
      _builder.getPointerField(35 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClassdefn(
    ::capnp::Orphan< ::capnp::List< ::Classdefn>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::adopt(
      _builder.getPointerField(35 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Classdefn>> UhdmRoot::Builder::disownFactoryClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Classdefn>>::disown(
      _builder.getPointerField(35 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterface() const {
  return !_reader.getPointerField(36 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterface() {
  return !_builder.getPointerField(36 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interface>::Reader UhdmRoot::Reader::getFactoryInterface() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::get(
      _reader.getPointerField(36 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interface>::Builder UhdmRoot::Builder::getFactoryInterface() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::get(
      _builder.getPointerField(36 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterface( ::capnp::List< ::Interface>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::set(
      _builder.getPointerField(36 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interface>::Builder UhdmRoot::Builder::initFactoryInterface(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::init(
      _builder.getPointerField(36 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterface(
    ::capnp::Orphan< ::capnp::List< ::Interface>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::adopt(
      _builder.getPointerField(36 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interface>> UhdmRoot::Builder::disownFactoryInterface() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::disown(
      _builder.getPointerField(36 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProgram() const {
  return !_reader.getPointerField(37 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProgram() {
  return !_builder.getPointerField(37 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Program>::Reader UhdmRoot::Reader::getFactoryProgram() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::get(
      _reader.getPointerField(37 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Program>::Builder UhdmRoot::Builder::getFactoryProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::get(
      _builder.getPointerField(37 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProgram( ::capnp::List< ::Program>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::set(
      _builder.getPointerField(37 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Program>::Builder UhdmRoot::Builder::initFactoryProgram(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::init(
      _builder.getPointerField(37 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProgram(
    ::capnp::Orphan< ::capnp::List< ::Program>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::adopt(
      _builder.getPointerField(37 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Program>> UhdmRoot::Builder::disownFactoryProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::disown(
      _builder.getPointerField(37 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPackage() const {
  return !_reader.getPointerField(38 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPackage() {
  return !_builder.getPointerField(38 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Package>::Reader UhdmRoot::Reader::getFactoryPackage() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::get(
      _reader.getPointerField(38 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Package>::Builder UhdmRoot::Builder::getFactoryPackage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::get(
      _builder.getPointerField(38 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPackage( ::capnp::List< ::Package>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::set(
      _builder.getPointerField(38 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Package>::Builder UhdmRoot::Builder::initFactoryPackage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::init(
      _builder.getPointerField(38 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPackage(
    ::capnp::Orphan< ::capnp::List< ::Package>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::adopt(
      _builder.getPointerField(38 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Package>> UhdmRoot::Builder::disownFactoryPackage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Package>>::disown(
      _builder.getPointerField(38 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModule() const {
  return !_reader.getPointerField(39 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModule() {
  return !_builder.getPointerField(39 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Module>::Reader UhdmRoot::Reader::getFactoryModule() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::get(
      _reader.getPointerField(39 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Module>::Builder UhdmRoot::Builder::getFactoryModule() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::get(
      _builder.getPointerField(39 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModule( ::capnp::List< ::Module>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::set(
      _builder.getPointerField(39 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Module>::Builder UhdmRoot::Builder::initFactoryModule(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::init(
      _builder.getPointerField(39 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModule(
    ::capnp::Orphan< ::capnp::List< ::Module>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::adopt(
      _builder.getPointerField(39 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Module>> UhdmRoot::Builder::disownFactoryModule() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::disown(
      _builder.getPointerField(39 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDesign() const {
  return !_reader.getPointerField(40 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDesign() {
  return !_builder.getPointerField(40 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Design>::Reader UhdmRoot::Reader::getFactoryDesign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(
      _reader.getPointerField(40 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::getFactoryDesign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(
      _builder.getPointerField(40 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDesign( ::capnp::List< ::Design>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::set(
      _builder.getPointerField(40 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::initFactoryDesign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::init(
      _builder.getPointerField(40 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDesign(
    ::capnp::Orphan< ::capnp::List< ::Design>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::adopt(
      _builder.getPointerField(40 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Design>> UhdmRoot::Builder::disownFactoryDesign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::disown(
      _builder.getPointerField(40 * ::capnp::POINTERS));
}

inline  ::uint64_t Process::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Process::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Process::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Process::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Process::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Process::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Begin::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Begin::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Begin::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Begin::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Begin::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedbegin::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedbegin::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedbegin::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Namedbegin::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Namedbegin::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedbegin::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedbegin::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedbegin::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Namedbegin::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Distribution::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Distribution::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Distribution::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Distribution::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Distribution::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Distribution::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Distribution::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Distribution::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Distribution::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Operation::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Operation::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Operation::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Operation::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Operation::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Operation::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Operation::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Operation::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Operation::Reader::getVpiOpType() const {
  return _reader.getDataField< ::int64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int64_t Operation::Builder::getVpiOpType() {
  return _builder.getDataField< ::int64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiOpType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Operation::Reader::hasOperands() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Operation::Builder::hasOperands() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Operation::Reader::getOperands() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Operation::Builder::getOperands() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Operation::Builder::setOperands( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Operation::Builder::initOperands(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Operation::Builder::adoptOperands(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Operation::Builder::disownOperands() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Operation::Reader::getVpiDecompile() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Operation::Builder::getVpiDecompile() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiDecompile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Operation::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t Operation::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Operation::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Refobj::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Refobj::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Refobj::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Refobj::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Refobj::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Task::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Task::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getVpiMethod() const {
  return _reader.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getVpiMethod() {
  return _builder.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiMethod(bool value) {
  _builder.setDataField<bool>(
      224 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Task::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t Task::Builder::getVpiAccessType() {
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiAccessType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Task::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::int64_t Task::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getVpiVirtual() const {
  return _reader.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getVpiVirtual() {
  return _builder.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiVirtual(bool value) {
  _builder.setDataField<bool>(
      225 * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      226 * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getVpiDPIContext() const {
  return _reader.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getVpiDPIContext() {
  return _builder.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiDPIContext(bool value) {
  _builder.setDataField<bool>(
      227 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Task::Reader::getVpiDPICStr() const {
  return _reader.getDataField< ::int64_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::int64_t Task::Builder::getVpiDPICStr() {
  return _builder.getDataField< ::int64_t>(
      8 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiDPICStr( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiDPICIdentifier() const {
  return _reader.getDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiDPICIdentifier() {
  return _builder.getDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiDPICIdentifier( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasLeftexpr() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Task::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Task::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Task::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Task::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Task::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Task::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Task::Reader::hasRightexpr() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasRightexpr() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Task::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Task::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Task::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Task::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Task::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Task::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Task::Reader::hasVariables() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasVariables() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Task::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Task::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Task::Pipeline::getVariables() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setVariables( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Task::Builder::initVariables() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Task::Builder::adoptVariables(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Task::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint64_t Task::Reader::getClassdefn() const {
  return _reader.getDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getClassdefn() {
  return _builder.getDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setClassdefn( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getRefobj() const {
  return _reader.getDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getRefobj() {
  return _builder.getDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setRefobj( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getIodecl() const {
  return _reader.getDataField< ::uint64_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getIodecl() {
  return _builder.getDataField< ::uint64_t>(
      12 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setIodecl( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Function::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Function::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiSigned() const {
  return _reader.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiSigned() {
  return _builder.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiSigned(bool value) {
  _builder.setDataField<bool>(
      224 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiFuncType() const {
  return _reader.getDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiFuncType() {
  return _builder.getDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiFuncType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiMethod() const {
  return _reader.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiMethod() {
  return _builder.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiMethod(bool value) {
  _builder.setDataField<bool>(
      225 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::int64_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiAccessType() {
  return _builder.getDataField< ::int64_t>(
      8 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiAccessType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiVisibility() const {
  return _reader.getDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiVisibility() {
  return _builder.getDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiVisibility( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiVirtual() const {
  return _reader.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiVirtual() {
  return _builder.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiVirtual(bool value) {
  _builder.setDataField<bool>(
      226 * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      227 * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::getVpiDPIContext() const {
  return _reader.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}

inline bool Function::Builder::getVpiDPIContext() {
  return _builder.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiDPIContext(bool value) {
  _builder.setDataField<bool>(
      228 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Function::Reader::getVpiDPICStr() const {
  return _reader.getDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::int64_t Function::Builder::getVpiDPICStr() {
  return _builder.getDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiDPICStr( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiDPICIdentifier() const {
  return _reader.getDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiDPICIdentifier() {
  return _builder.getDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiDPICIdentifier( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline bool Function::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasLeftexpr() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Function::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Function::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Function::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Function::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Function::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Function::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Function::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Function::Reader::hasRightexpr() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasRightexpr() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Function::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Function::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Function::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Function::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Function::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Function::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Function::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Function::Reader::hasVariables() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Function::Builder::hasVariables() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Function::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Function::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Function::Pipeline::getVariables() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Function::Builder::setVariables( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Function::Builder::initVariables() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Function::Builder::adoptVariables(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Function::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint64_t Function::Reader::getClassdefn() const {
  return _reader.getDataField< ::uint64_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getClassdefn() {
  return _builder.getDataField< ::uint64_t>(
      12 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setClassdefn( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getRefobj() const {
  return _reader.getDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getRefobj() {
  return _builder.getDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setRefobj( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getIodecl() const {
  return _reader.getDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getIodecl() {
  return _builder.getDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setIodecl( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modport::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modport::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Modport::Reader::hasIodecls() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Modport::Builder::hasIodecls() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Modport::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Modport::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Modport::Builder::setIodecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Modport::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Modport::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Modport::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Modport::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Modport::Reader::getInterface() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getInterface() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setInterface( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interfacetfdecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interfacetfdecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiAccessType() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiAccessType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Interfacetfdecl::Reader::hasTasks() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasTasks() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacetfdecl::Reader::getTasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::getTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::setTasks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Interfacetfdecl::Builder::setTasks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::initTasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Interfacetfdecl::Builder::adoptTasks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacetfdecl::Builder::disownTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Interfacetfdecl::Reader::hasFunctions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasFunctions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacetfdecl::Reader::getFunctions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::getFunctions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::setFunctions( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Interfacetfdecl::Builder::setFunctions(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::initFunctions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Interfacetfdecl::Builder::adoptFunctions(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacetfdecl::Builder::disownFunctions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t Contassign::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassign::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassign::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Contassign::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Contassign::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Port::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Port::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Port::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Primitive::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Primitive::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modpath::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modpath::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Tchk::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Tchk::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Defparam::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Defparam::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Iodecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Iodecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Aliasstmt::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Aliasstmt::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Aliasstmt::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Aliasstmt::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Aliasstmt::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Clockingblock::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Clockingblock::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Range::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Range::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Range::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Range::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Range::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Range::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Range::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Range::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Range::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Range::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Range::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Range::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Paramassign::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Paramassign::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Paramassign::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Paramassign::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Paramassign::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Paramassign::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Paramassign::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Paramassign::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Paramassign::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interfacearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interfacearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Interfacearray::Reader::hasParamassigns() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasParamassigns() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacearray::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::setParamassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Interfacearray::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Interfacearray::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacearray::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Interfacearray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interfacearray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t Interfacearray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Interfacearray::Reader::hasExpr() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasExpr() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interfacearray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interfacearray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Interfacearray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interfacearray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interfacearray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interfacearray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Interfacearray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interfacearray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasRightexpr() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interfacearray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interfacearray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Interfacearray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interfacearray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interfacearray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Interfacearray::Reader::hasInstances() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasInstances() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interfacearray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interfacearray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interfacearray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Interfacearray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interfacearray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::uint64_t Interfacearray::Reader::getRange() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getRange() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setRange( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool Interfacearray::Reader::hasModules() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Interfacearray::Builder::hasModules() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacearray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Interfacearray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Interfacearray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacearray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Interfacearray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacearray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::uint64_t Programarray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Programarray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Programarray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Programarray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Programarray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Programarray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Programarray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Programarray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t Programarray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Programarray::Reader::hasExpr() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasExpr() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Programarray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Programarray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Programarray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Programarray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Programarray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Programarray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Programarray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Programarray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Programarray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Programarray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Programarray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Programarray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Programarray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Programarray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasRightexpr() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Programarray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Programarray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Programarray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Programarray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Programarray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Programarray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Programarray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Programarray::Reader::hasInstances() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasInstances() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Programarray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Programarray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Programarray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Programarray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Programarray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Programarray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::uint64_t Programarray::Reader::getRange() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Programarray::Builder::getRange() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Programarray::Builder::setRange( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool Programarray::Reader::hasModules() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Programarray::Builder::hasModules() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Programarray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Programarray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Programarray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void Programarray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Programarray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Programarray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Programarray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::uint64_t Modulearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modulearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modulearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Modulearray::Reader::hasParamassigns() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasParamassigns() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Modulearray::Reader::getParamassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::getParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Modulearray::Builder::setParamassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Modulearray::Builder::setParamassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::initParamassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Modulearray::Builder::adoptParamassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Modulearray::Builder::disownParamassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Modulearray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Modulearray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t Modulearray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Modulearray::Reader::hasExpr() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasExpr() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Modulearray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Modulearray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Modulearray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Modulearray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Modulearray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Modulearray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Modulearray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Modulearray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Modulearray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Modulearray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Modulearray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Modulearray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Modulearray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Modulearray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasRightexpr() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Modulearray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Modulearray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Modulearray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Modulearray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Modulearray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Modulearray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Modulearray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Modulearray::Reader::hasInstances() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasInstances() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Modulearray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Modulearray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Modulearray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Modulearray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Modulearray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Modulearray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::uint64_t Modulearray::Reader::getRange() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getRange() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setRange( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool Modulearray::Reader::hasModules() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Modulearray::Builder::hasModules() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Modulearray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Modulearray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Modulearray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Modulearray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Modulearray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Modulearray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::uint64_t Gatearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Gatearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Gatearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Gatearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Gatearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Gatearray::Reader::hasDelay() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasDelay() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gatearray::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gatearray::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gatearray::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gatearray::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gatearray::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasPrimitives() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasPrimitives() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Gatearray::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Gatearray::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Gatearray::Builder::setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Gatearray::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Gatearray::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Gatearray::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t Gatearray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Gatearray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Gatearray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t Gatearray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Gatearray::Reader::hasExpr() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasExpr() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gatearray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gatearray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gatearray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gatearray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gatearray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gatearray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gatearray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gatearray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gatearray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gatearray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasRightexpr() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Gatearray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Gatearray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Gatearray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Gatearray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Gatearray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Gatearray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Gatearray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Gatearray::Reader::hasInstances() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasInstances() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Gatearray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Gatearray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Gatearray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Gatearray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Gatearray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Gatearray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::uint64_t Gatearray::Reader::getRange() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gatearray::Builder::getRange() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Gatearray::Builder::setRange( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool Gatearray::Reader::hasModules() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Gatearray::Builder::hasModules() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Gatearray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Gatearray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Gatearray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Gatearray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Gatearray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Gatearray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Gatearray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline  ::uint64_t Switcharray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Switcharray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Switcharray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Switcharray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Switcharray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Switcharray::Reader::hasDelay() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasDelay() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Switcharray::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Switcharray::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Switcharray::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Switcharray::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Switcharray::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasPrimitives() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasPrimitives() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Switcharray::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Switcharray::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Switcharray::Builder::setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Switcharray::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Switcharray::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Switcharray::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t Switcharray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Switcharray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Switcharray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t Switcharray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Switcharray::Reader::hasExpr() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasExpr() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Switcharray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Switcharray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Switcharray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Switcharray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Switcharray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Switcharray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Switcharray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Switcharray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Switcharray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Switcharray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasRightexpr() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Switcharray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Switcharray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Switcharray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Switcharray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Switcharray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Switcharray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Switcharray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Switcharray::Reader::hasInstances() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasInstances() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Switcharray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Switcharray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Switcharray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Switcharray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Switcharray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Switcharray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::uint64_t Switcharray::Reader::getRange() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Switcharray::Builder::getRange() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Switcharray::Builder::setRange( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool Switcharray::Reader::hasModules() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Switcharray::Builder::hasModules() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Switcharray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Switcharray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Switcharray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Switcharray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Switcharray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Switcharray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Switcharray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline  ::uint64_t Udparray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udparray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udparray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Udparray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Udparray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Udparray::Reader::hasDelay() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasDelay() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Udparray::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Udparray::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Udparray::Pipeline::getDelay() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setDelay( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Udparray::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptDelay(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Udparray::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasPrimitives() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasPrimitives() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Udparray::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Udparray::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Udparray::Builder::setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Udparray::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Udparray::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Udparray::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t Udparray::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Udparray::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Udparray::Reader::getVpiSize() const {
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t Udparray::Builder::getVpiSize() {
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setVpiSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Udparray::Reader::hasExpr() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasExpr() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Udparray::Reader::getExpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Udparray::Builder::getExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Udparray::Pipeline::getExpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setExpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Udparray::Builder::initExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptExpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Udparray::Builder::disownExpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasLeftexpr() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasLeftexpr() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Udparray::Reader::getLeftexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Udparray::Builder::getLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Udparray::Pipeline::getLeftexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setLeftexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Udparray::Builder::initLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptLeftexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Udparray::Builder::disownLeftexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasRightexpr() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasRightexpr() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Udparray::Reader::getRightexpr() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Udparray::Builder::getRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Udparray::Pipeline::getRightexpr() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Udparray::Builder::setRightexpr( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Udparray::Builder::initRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Udparray::Builder::adoptRightexpr(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Udparray::Builder::disownRightexpr() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Udparray::Reader::hasInstances() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasInstances() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Udparray::Reader::getInstances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Udparray::Builder::getInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Udparray::Builder::setInstances( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Udparray::Builder::initInstances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Udparray::Builder::adoptInstances(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Udparray::Builder::disownInstances() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::uint64_t Udparray::Reader::getRange() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Udparray::Builder::getRange() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Udparray::Builder::setRange( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline bool Udparray::Reader::hasModules() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Udparray::Builder::hasModules() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Udparray::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Udparray::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Udparray::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Udparray::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Udparray::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Udparray::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Udparray::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline  ::uint64_t Arraynet::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arraynet::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arraynet::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Arraynet::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Arraynet::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Arraynet::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Logicvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Logicvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Logicvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Logicvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Logicvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrayvar::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrayvar::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Arrayvar::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Arrayvar::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Arrayvar::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedevent::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedevent::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedevent::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedevent::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Namedevent::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Namedevent::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Namedevent::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedeventarray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedeventarray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Namedeventarray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedeventarray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedeventarray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Namedeventarray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Namedeventarray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Namedeventarray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Namedeventarray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Namedeventarray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Namedeventarray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Namedeventarray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Specparam::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Specparam::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Specparam::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Specparam::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Specparam::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Specparam::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Specparam::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Specparam::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Specparam::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Specparam::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Specparam::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Specparam::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Classdefn::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Classdefn::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Classdefn::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Classdefn::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Classdefn::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interface::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interface::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiIndex() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiIndex() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasExprdist() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasExprdist() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interface::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interface::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interface::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Interface::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interface::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Interface::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interface::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInstancearray() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInstancearray() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interface::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interface::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interface::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Interface::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interface::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Interface::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interface::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasProcess() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasProcess() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Interface::Builder::setProcess( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfacetfdecls() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfacetfdecls() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfacetfdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfacetfdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfacetfdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfacetfdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfacetfdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfacetfdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfacetfdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasModports() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasModports() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getModports() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getModports() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Interface::Builder::setModports( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setModports(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initModports(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptModports(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownModports() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getGlobalclocking() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getGlobalclocking() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setGlobalclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasModpaths() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasModpaths() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getModpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Interface::Builder::setModpaths( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setModpaths(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initModpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptModpaths(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasContassigns() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasContassigns() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Interface::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfaces() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfaces() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      224 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      225 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      226 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      13 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Interface::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      15 * ::capnp::ELEMENTS);
}

inline  ::int64_t Interface::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      15 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      15 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      17 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      227 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}

inline bool Interface::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      228 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasTaskfunc() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void Interface::Builder::setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initTaskfunc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasNet() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasNet() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getNet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void Interface::Builder::setNet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initNet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptNet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasArraynet() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasArraynet() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void Interface::Builder::setArraynet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptArraynet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasVariables() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasVariables() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void Interface::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasParameters() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasParameters() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void Interface::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasAssertion() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasAssertion() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getAssertion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void Interface::Builder::setAssertion( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initAssertion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptAssertion(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasTypespec() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasTypespec() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void Interface::Builder::setTypespec( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initTypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptTypespec(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasClassdefn() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasClassdefn() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Interface::Reader::getClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::getClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}
inline void Interface::Builder::setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Interface::Builder::initClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptClassdefn(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Interface::Builder::disownClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInstance() const {
  return !_reader.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInstance() {
  return !_builder.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Interface::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(17 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Interface::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Interface::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(17));
}
#endif  // !CAPNP_LITE
inline void Interface::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Interface::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}
inline void Interface::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(17 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Interface::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasPrograms() const {
  return !_reader.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasPrograms() {
  return !_builder.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(18 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}
inline void Interface::Builder::setPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(18 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(18 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasProgramarrays() {
  return !_builder.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(19 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}
inline void Interface::Builder::setProgramarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(19 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(19 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasLogicvar() const {
  return !_reader.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasLogicvar() {
  return !_builder.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(20 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}
inline void Interface::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(20 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(20 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(20 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(20 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasArrayvar() const {
  return !_reader.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasArrayvar() {
  return !_builder.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(21 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}
inline void Interface::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(21 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(21 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(21 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(21 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(22 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}
inline void Interface::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(22 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(22 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(22 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(22 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasNamedevent() const {
  return !_reader.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasNamedevent() {
  return !_builder.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(23 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}
inline void Interface::Builder::setNamedevent( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(23 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(23 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(23 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptNamedevent(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(23 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasNamedeventarray() const {
  return !_reader.getPointerField(24 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasNamedeventarray() {
  return !_builder.getPointerField(24 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(24 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(24 * ::capnp::POINTERS));
}
inline void Interface::Builder::setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(24 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(24 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(24 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(24 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(24 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasSpecparam() const {
  return !_reader.getPointerField(25 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasSpecparam() {
  return !_builder.getPointerField(25 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getSpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(25 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(25 * ::capnp::POINTERS));
}
inline void Interface::Builder::setSpecparam( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(25 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(25 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initSpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(25 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptSpecparam(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(25 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(25 * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      19 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      19 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      19 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Program::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Program::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiIndex() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiIndex() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasInstancearray() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInstancearray() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Program::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Program::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Program::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Program::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Program::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Program::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasExprdist() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasExprdist() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Program::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Program::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Program::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Program::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Program::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Program::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasProcess() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasProcess() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Program::Builder::setProcess( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasInterfaces() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInterfaces() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Program::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Program::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasContassigns() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasContassigns() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Program::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasClockingblocks() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Program::Builder::setClockingblocks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      224 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      225 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      11 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      226 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      13 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Program::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS);
}

inline  ::int64_t Program::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      17 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      227 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}

inline bool Program::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      228 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasTaskfunc() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Program::Builder::setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initTaskfunc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasNet() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasNet() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getNet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Program::Builder::setNet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initNet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptNet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasArraynet() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasArraynet() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void Program::Builder::setArraynet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptArraynet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasVariables() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasVariables() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void Program::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasParameters() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasParameters() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void Program::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasAssertion() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasAssertion() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getAssertion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void Program::Builder::setAssertion( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initAssertion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptAssertion(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasTypespec() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasTypespec() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void Program::Builder::setTypespec( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initTypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptTypespec(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasClassdefn() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasClassdefn() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Program::Reader::getClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::getClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void Program::Builder::setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Program::Builder::initClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptClassdefn(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Program::Builder::disownClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasInstance() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInstance() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Program::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Program::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Program::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void Program::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Program::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void Program::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Program::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasPrograms() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasPrograms() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}
inline void Program::Builder::setPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasProgramarrays() {
  return !_builder.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(17 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}
inline void Program::Builder::setProgramarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(17 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(17 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasLogicvar() const {
  return !_reader.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasLogicvar() {
  return !_builder.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(18 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}
inline void Program::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(18 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(18 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasArrayvar() const {
  return !_reader.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasArrayvar() {
  return !_builder.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(19 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}
inline void Program::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(19 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(19 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(20 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}
inline void Program::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(20 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(20 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(20 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(20 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasNamedevent() const {
  return !_reader.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasNamedevent() {
  return !_builder.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(21 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}
inline void Program::Builder::setNamedevent( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(21 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(21 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(21 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptNamedevent(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(21 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasNamedeventarray() const {
  return !_reader.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasNamedeventarray() {
  return !_builder.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(22 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}
inline void Program::Builder::setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(22 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(22 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(22 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(22 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasSpecparam() const {
  return !_reader.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasSpecparam() {
  return !_builder.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getSpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(23 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}
inline void Program::Builder::setSpecparam( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(23 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(23 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initSpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(23 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptSpecparam(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(23 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Package::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Package::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiUnit() const {
  return _reader.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiUnit() {
  return _builder.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiUnit(bool value) {
  _builder.setDataField<bool>(
      224 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      225 * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      226 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      227 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      11 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Package::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::int64_t Package::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      14 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Package::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      15 * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      228 * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      229 * ::capnp::ELEMENTS);
}

inline bool Package::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      229 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      229 * ::capnp::ELEMENTS, value);
}

inline bool Package::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasTaskfunc() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Package::Builder::setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initTaskfunc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasNet() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasNet() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getNet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Package::Builder::setNet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initNet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptNet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasArraynet() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasArraynet() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Package::Builder::setArraynet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptArraynet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasVariables() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasVariables() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Package::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasParameters() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasParameters() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Package::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasAssertion() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasAssertion() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getAssertion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Package::Builder::setAssertion( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initAssertion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptAssertion(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasTypespec() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasTypespec() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Package::Builder::setTypespec( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initTypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptTypespec(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasClassdefn() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasClassdefn() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Package::Reader::getClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::getClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Package::Builder::setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Package::Builder::initClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptClassdefn(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Package::Builder::disownClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasInstance() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasInstance() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Package::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Package::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Package::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Package::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Package::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Package::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Package::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasPrograms() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasPrograms() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void Package::Builder::setPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void Package::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasProgramarrays() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void Package::Builder::setProgramarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline void Package::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasLogicvar() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasLogicvar() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void Package::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline void Package::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasArrayvar() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasArrayvar() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void Package::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline void Package::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void Package::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline void Package::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasNamedevent() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasNamedevent() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void Package::Builder::setNamedevent( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline void Package::Builder::setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptNamedevent(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasNamedeventarray() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasNamedeventarray() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void Package::Builder::setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline void Package::Builder::setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool Package::Reader::hasSpecparam() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool Package::Builder::hasSpecparam() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Package::Reader::getSpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::getSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}
inline void Package::Builder::setSpecparam( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline void Package::Builder::setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Package::Builder::initSpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void Package::Builder::adoptSpecparam(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Package::Builder::disownSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline  ::uint64_t Package::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Package::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS);
}
inline void Package::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Module::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Module::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiIndex() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiIndex() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiTopModule() const {
  return _reader.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiTopModule() {
  return _builder.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTopModule(bool value) {
  _builder.setDataField<bool>(
      224 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiDefDecayTime() const {
  return _reader.getDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiDefDecayTime() {
  return _builder.getDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefDecayTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasExprdist() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasExprdist() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Module::Reader::getExprdist() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Module::Builder::getExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Module::Pipeline::getExprdist() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Module::Builder::setExprdist( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Module::Builder::initExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Module::Builder::adoptExprdist(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Module::Builder::disownExprdist() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInstancearray() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInstancearray() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Module::Reader::getInstancearray() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Module::Builder::getInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Module::Pipeline::getInstancearray() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Module::Builder::setInstancearray( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Module::Builder::initInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Module::Builder::adoptInstancearray(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Module::Builder::disownInstancearray() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasScope() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasScope() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Module::Builder::setScope( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initScope(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptScope(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasProcess() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasProcess() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Module::Builder::setProcess( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPrimitives() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPrimitives() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Module::Builder::setPrimitives( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPrimitivearrays() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPrimitivearrays() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getPrimitivearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Module::Builder::setPrimitivearrays( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initPrimitivearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPrimitivearrays(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::uint64_t Module::Reader::getGlobalclocking() const {
  return _reader.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getGlobalclocking() {
  return _builder.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setGlobalclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getModulearray() const {
  return _reader.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getModulearray() {
  return _builder.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setModulearray( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasPorts() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPorts() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Module::Builder::setPorts( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInterfaces() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInterfaces() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Module::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Module::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasContassigns() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasContassigns() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void Module::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModules() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModules() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void Module::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModulearrays() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModulearrays() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModulearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void Module::Builder::setModulearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModulearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModulearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModpaths() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModpaths() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void Module::Builder::setModpaths( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModpaths(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModpaths(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasTchks() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasTchks() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getTchks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getTchks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void Module::Builder::setTchks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setTchks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initTchks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptTchks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownTchks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasDefparams() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasDefparams() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getDefparams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void Module::Builder::setDefparams( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setDefparams(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initDefparams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptDefparams(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasIodecls() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasIodecls() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void Module::Builder::setIodecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasAliasstmts() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasAliasstmts() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getAliasstmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}
inline void Module::Builder::setAliasstmts( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initAliasstmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptAliasstmts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasClockingblocks() {
  return !_builder.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(17 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}
inline void Module::Builder::setClockingblocks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(17 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(17 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}

inline  ::uint64_t Module::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiFullName() const {
  return _reader.getDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiFullName() {
  return _builder.getDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiFullName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiDefName() const {
  return _reader.getDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiDefName() {
  return _builder.getDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiArrayMember() const {
  return _reader.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiArrayMember() {
  return _builder.getDataField<bool>(
      225 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiArrayMember(bool value) {
  _builder.setDataField<bool>(
      225 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiCellInstance() const {
  return _reader.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiCellInstance() {
  return _builder.getDataField<bool>(
      226 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiCellInstance(bool value) {
  _builder.setDataField<bool>(
      226 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiDefNetType() const {
  return _reader.getDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiDefNetType() {
  return _builder.getDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefNetType( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiDefFile() const {
  return _reader.getDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiDefFile() {
  return _builder.getDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiDefDelayMode() const {
  return _reader.getDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiDefDelayMode() {
  return _builder.getDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefDelayMode( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      14 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiProtected() const {
  return _reader.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiProtected() {
  return _builder.getDataField<bool>(
      227 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiProtected(bool value) {
  _builder.setDataField<bool>(
      227 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiTimePrecision() const {
  return _reader.getDataField< ::int64_t>(
      15 * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiTimePrecision() {
  return _builder.getDataField< ::int64_t>(
      15 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTimePrecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      15 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiTimeUnit() const {
  return _reader.getDataField< ::int64_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiTimeUnit() {
  return _builder.getDataField< ::int64_t>(
      16 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTimeUnit( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiUnconnDrive() const {
  return _reader.getDataField< ::int64_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiUnconnDrive() {
  return _builder.getDataField< ::int64_t>(
      17 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiUnconnDrive( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiLibrary() const {
  return _reader.getDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiLibrary() {
  return _builder.getDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiLibrary( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      18 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiCell() const {
  return _reader.getDataField< ::uint64_t>(
      19 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiCell() {
  return _builder.getDataField< ::uint64_t>(
      19 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiCell( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      19 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiConfig() const {
  return _reader.getDataField< ::uint64_t>(
      20 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiConfig() {
  return _builder.getDataField< ::uint64_t>(
      20 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiConfig( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      20 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiAutomatic() const {
  return _reader.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiAutomatic() {
  return _builder.getDataField<bool>(
      228 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiAutomatic(bool value) {
  _builder.setDataField<bool>(
      228 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiTop() const {
  return _reader.getDataField<bool>(
      229 * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiTop() {
  return _builder.getDataField<bool>(
      229 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTop(bool value) {
  _builder.setDataField<bool>(
      229 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasTaskfunc() const {
  return !_reader.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasTaskfunc() {
  return !_builder.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getTaskfunc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(18 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}
inline void Module::Builder::setTaskfunc( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initTaskfunc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(18 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptTaskfunc(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(18 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownTaskfunc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasNet() const {
  return !_reader.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasNet() {
  return !_builder.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getNet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(19 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}
inline void Module::Builder::setNet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initNet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(19 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptNet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(19 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownNet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasArraynet() const {
  return !_reader.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasArraynet() {
  return !_builder.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getArraynet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(20 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}
inline void Module::Builder::setArraynet( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(20 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initArraynet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(20 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptArraynet(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(20 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownArraynet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasVariables() const {
  return !_reader.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasVariables() {
  return !_builder.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getVariables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(21 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}
inline void Module::Builder::setVariables( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(21 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initVariables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(21 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptVariables(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(21 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownVariables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasParameters() const {
  return !_reader.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasParameters() {
  return !_builder.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(22 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}
inline void Module::Builder::setParameters( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(22 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(22 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(22 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasAssertion() const {
  return !_reader.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasAssertion() {
  return !_builder.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getAssertion() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(23 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}
inline void Module::Builder::setAssertion( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(23 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initAssertion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(23 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptAssertion(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(23 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownAssertion() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasTypespec() const {
  return !_reader.getPointerField(24 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasTypespec() {
  return !_builder.getPointerField(24 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getTypespec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(24 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getTypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(24 * ::capnp::POINTERS));
}
inline void Module::Builder::setTypespec( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(24 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initTypespec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(24 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptTypespec(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(24 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownTypespec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(24 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasClassdefn() const {
  return !_reader.getPointerField(25 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasClassdefn() {
  return !_builder.getPointerField(25 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ObjIndexType>::Reader Module::Reader::getClassdefn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _reader.getPointerField(25 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::getClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::get(
      _builder.getPointerField(25 * ::capnp::POINTERS));
}
inline void Module::Builder::setClassdefn( ::capnp::List< ::ObjIndexType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::set(
      _builder.getPointerField(25 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ObjIndexType>::Builder Module::Builder::initClassdefn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::init(
      _builder.getPointerField(25 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptClassdefn(
    ::capnp::Orphan< ::capnp::List< ::ObjIndexType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::adopt(
      _builder.getPointerField(25 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ObjIndexType>> Module::Builder::disownClassdefn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ObjIndexType>>::disown(
      _builder.getPointerField(25 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInstance() const {
  return !_reader.getPointerField(26 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInstance() {
  return !_builder.getPointerField(26 * ::capnp::POINTERS).isNull();
}
inline  ::ObjIndexType::Reader Module::Reader::getInstance() const {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _reader.getPointerField(26 * ::capnp::POINTERS));
}
inline  ::ObjIndexType::Builder Module::Builder::getInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::get(
      _builder.getPointerField(26 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ObjIndexType::Pipeline Module::Pipeline::getInstance() {
  return  ::ObjIndexType::Pipeline(_typeless.getPointerField(26));
}
#endif  // !CAPNP_LITE
inline void Module::Builder::setInstance( ::ObjIndexType::Reader value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::set(
      _builder.getPointerField(26 * ::capnp::POINTERS), value);
}
inline  ::ObjIndexType::Builder Module::Builder::initInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::init(
      _builder.getPointerField(26 * ::capnp::POINTERS));
}
inline void Module::Builder::adoptInstance(
    ::capnp::Orphan< ::ObjIndexType>&& value) {
  ::capnp::_::PointerHelpers< ::ObjIndexType>::adopt(
      _builder.getPointerField(26 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ObjIndexType> Module::Builder::disownInstance() {
  return ::capnp::_::PointerHelpers< ::ObjIndexType>::disown(
      _builder.getPointerField(26 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPrograms() const {
  return !_reader.getPointerField(27 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPrograms() {
  return !_builder.getPointerField(27 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(27 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(27 * ::capnp::POINTERS));
}
inline void Module::Builder::setPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(27 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(27 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(27 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(27 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(27 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasProgramarrays() const {
  return !_reader.getPointerField(28 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasProgramarrays() {
  return !_builder.getPointerField(28 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getProgramarrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(28 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(28 * ::capnp::POINTERS));
}
inline void Module::Builder::setProgramarrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(28 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setProgramarrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(28 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initProgramarrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(28 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptProgramarrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(28 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownProgramarrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(28 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasLogicvar() const {
  return !_reader.getPointerField(29 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasLogicvar() {
  return !_builder.getPointerField(29 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getLogicvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(29 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(29 * ::capnp::POINTERS));
}
inline void Module::Builder::setLogicvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(29 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setLogicvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(29 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initLogicvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(29 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptLogicvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(29 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownLogicvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(29 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasArrayvar() const {
  return !_reader.getPointerField(30 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasArrayvar() {
  return !_builder.getPointerField(30 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getArrayvar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(30 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(30 * ::capnp::POINTERS));
}
inline void Module::Builder::setArrayvar( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(30 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setArrayvar(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(30 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initArrayvar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(30 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptArrayvar(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(30 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownArrayvar() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(30 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasArrayvarmem() const {
  return !_reader.getPointerField(31 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasArrayvarmem() {
  return !_builder.getPointerField(31 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getArrayvarmem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(31 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(31 * ::capnp::POINTERS));
}
inline void Module::Builder::setArrayvarmem( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(31 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setArrayvarmem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(31 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initArrayvarmem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(31 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptArrayvarmem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(31 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownArrayvarmem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(31 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasNamedevent() const {
  return !_reader.getPointerField(32 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasNamedevent() {
  return !_builder.getPointerField(32 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getNamedevent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(32 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(32 * ::capnp::POINTERS));
}
inline void Module::Builder::setNamedevent( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(32 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setNamedevent(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(32 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initNamedevent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(32 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptNamedevent(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(32 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownNamedevent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(32 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasNamedeventarray() const {
  return !_reader.getPointerField(33 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasNamedeventarray() {
  return !_builder.getPointerField(33 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getNamedeventarray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(33 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(33 * ::capnp::POINTERS));
}
inline void Module::Builder::setNamedeventarray( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(33 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setNamedeventarray(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(33 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initNamedeventarray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(33 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptNamedeventarray(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(33 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownNamedeventarray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(33 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasSpecparam() const {
  return !_reader.getPointerField(34 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasSpecparam() {
  return !_builder.getPointerField(34 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getSpecparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(34 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(34 * ::capnp::POINTERS));
}
inline void Module::Builder::setSpecparam( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(34 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setSpecparam(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(34 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initSpecparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(34 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptSpecparam(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(34 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownSpecparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(34 * ::capnp::POINTERS));
}

inline  ::uint64_t Module::Reader::getModule() const {
  return _reader.getDataField< ::uint64_t>(
      21 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getModule() {
  return _builder.getDataField< ::uint64_t>(
      21 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setModule( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      21 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Design::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Design::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Design::Reader::hasAllModules() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllModules() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getAllModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getAllModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Design::Builder::setAllModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initAllModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownAllModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Design::Reader::hasTopModules() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasTopModules() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getTopModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getTopModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Design::Builder::setTopModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Design::Builder::setTopModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initTopModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptTopModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownTopModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllPrograms() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllPrograms() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getAllPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getAllPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Design::Builder::setAllPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initAllPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownAllPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllPackages() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllPackages() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getAllPackages() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getAllPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Design::Builder::setAllPackages( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllPackages(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initAllPackages(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllPackages(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownAllPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_fff7299129556877_
