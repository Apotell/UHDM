// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: UHDM.capnp

#ifndef CAPNP_INCLUDED_fff7299129556877_
#define CAPNP_INCLUDED_fff7299129556877_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b2bce98887da19bc);
CAPNP_DECLARE_SCHEMA(c4de5d61fdda1fc2);
CAPNP_DECLARE_SCHEMA(809d8aea310cd2d3);
CAPNP_DECLARE_SCHEMA(9f591135f29e5892);
CAPNP_DECLARE_SCHEMA(d0a8f41c104ebf1c);
CAPNP_DECLARE_SCHEMA(b4eea6df5a3cb40c);
CAPNP_DECLARE_SCHEMA(a1c6ed39e4545f74);
CAPNP_DECLARE_SCHEMA(f204710c1a739934);
CAPNP_DECLARE_SCHEMA(a0c61698af16b048);
CAPNP_DECLARE_SCHEMA(9227d3f15c9cc33f);
CAPNP_DECLARE_SCHEMA(f71f31bc84a287dc);
CAPNP_DECLARE_SCHEMA(e5223805a4f89b66);
CAPNP_DECLARE_SCHEMA(ca2c53a62aa79635);
CAPNP_DECLARE_SCHEMA(e63ecf2ed249ea72);
CAPNP_DECLARE_SCHEMA(b0574b7e87c89580);
CAPNP_DECLARE_SCHEMA(f4c7c9090f7f65ff);
CAPNP_DECLARE_SCHEMA(fadf6fefcc8670a1);
CAPNP_DECLARE_SCHEMA(838f7452c487badf);
CAPNP_DECLARE_SCHEMA(f171f28f75e452e6);
CAPNP_DECLARE_SCHEMA(cfa270b7ddc80a04);
CAPNP_DECLARE_SCHEMA(b56a367f43dc01de);
CAPNP_DECLARE_SCHEMA(ff343c185370b513);
CAPNP_DECLARE_SCHEMA(b8a08b2787e1997f);
CAPNP_DECLARE_SCHEMA(bcba8efb52090304);

}  // namespace schemas
}  // namespace capnp


struct UhdmRoot {
  UhdmRoot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2bce98887da19bc, 0, 25)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Process {
  Process() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4de5d61fdda1fc2, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Scope {
  Scope() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(809d8aea310cd2d3, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Task {
  Task() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f591135f29e5892, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Function {
  Function() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0a8f41c104ebf1c, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Modport {
  Modport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4eea6df5a3cb40c, 6, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Interfacetfdecl {
  Interfacetfdecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1c6ed39e4545f74, 5, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Interface {
  Interface() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f204710c1a739934, 6, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Interfacearray {
  Interfacearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0c61698af16b048, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Contassign {
  Contassign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9227d3f15c9cc33f, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Port {
  Port() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f71f31bc84a287dc, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Modulearray {
  Modulearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5223805a4f89b66, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Primitive {
  Primitive() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca2c53a62aa79635, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Primitivearray {
  Primitivearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e63ecf2ed249ea72, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Modpath {
  Modpath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0574b7e87c89580, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Tchk {
  Tchk() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4c7c9090f7f65ff, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Defparam {
  Defparam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fadf6fefcc8670a1, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Iodecl {
  Iodecl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(838f7452c487badf, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Aliasstmt {
  Aliasstmt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f171f28f75e452e6, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Clockingblock {
  Clockingblock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfa270b7ddc80a04, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Instancearray {
  Instancearray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b56a367f43dc01de, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Module {
  Module() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff343c185370b513, 9, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Program {
  Program() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8a08b2787e1997f, 7, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Design {
  Design() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcba8efb52090304, 5, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class UhdmRoot::Reader {
public:
  typedef UhdmRoot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDesigns() const;
  inline  ::capnp::List< ::Design>::Reader getDesigns() const;

  inline bool hasSymbols() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getSymbols() const;

  inline bool hasFactoryProcess() const;
  inline  ::capnp::List< ::Process>::Reader getFactoryProcess() const;

  inline bool hasFactoryScope() const;
  inline  ::capnp::List< ::Scope>::Reader getFactoryScope() const;

  inline bool hasFactoryTask() const;
  inline  ::capnp::List< ::Task>::Reader getFactoryTask() const;

  inline bool hasFactoryFunction() const;
  inline  ::capnp::List< ::Function>::Reader getFactoryFunction() const;

  inline bool hasFactoryModport() const;
  inline  ::capnp::List< ::Modport>::Reader getFactoryModport() const;

  inline bool hasFactoryInterfacetfdecl() const;
  inline  ::capnp::List< ::Interfacetfdecl>::Reader getFactoryInterfacetfdecl() const;

  inline bool hasFactoryInterface() const;
  inline  ::capnp::List< ::Interface>::Reader getFactoryInterface() const;

  inline bool hasFactoryInterfacearray() const;
  inline  ::capnp::List< ::Interfacearray>::Reader getFactoryInterfacearray() const;

  inline bool hasFactoryContassign() const;
  inline  ::capnp::List< ::Contassign>::Reader getFactoryContassign() const;

  inline bool hasFactoryPort() const;
  inline  ::capnp::List< ::Port>::Reader getFactoryPort() const;

  inline bool hasFactoryModulearray() const;
  inline  ::capnp::List< ::Modulearray>::Reader getFactoryModulearray() const;

  inline bool hasFactoryPrimitive() const;
  inline  ::capnp::List< ::Primitive>::Reader getFactoryPrimitive() const;

  inline bool hasFactoryPrimitivearray() const;
  inline  ::capnp::List< ::Primitivearray>::Reader getFactoryPrimitivearray() const;

  inline bool hasFactoryModpath() const;
  inline  ::capnp::List< ::Modpath>::Reader getFactoryModpath() const;

  inline bool hasFactoryTchk() const;
  inline  ::capnp::List< ::Tchk>::Reader getFactoryTchk() const;

  inline bool hasFactoryDefparam() const;
  inline  ::capnp::List< ::Defparam>::Reader getFactoryDefparam() const;

  inline bool hasFactoryIodecl() const;
  inline  ::capnp::List< ::Iodecl>::Reader getFactoryIodecl() const;

  inline bool hasFactoryAliasstmt() const;
  inline  ::capnp::List< ::Aliasstmt>::Reader getFactoryAliasstmt() const;

  inline bool hasFactoryClockingblock() const;
  inline  ::capnp::List< ::Clockingblock>::Reader getFactoryClockingblock() const;

  inline bool hasFactoryInstancearray() const;
  inline  ::capnp::List< ::Instancearray>::Reader getFactoryInstancearray() const;

  inline bool hasFactoryModule() const;
  inline  ::capnp::List< ::Module>::Reader getFactoryModule() const;

  inline bool hasFactoryProgram() const;
  inline  ::capnp::List< ::Program>::Reader getFactoryProgram() const;

  inline bool hasFactoryDesign() const;
  inline  ::capnp::List< ::Design>::Reader getFactoryDesign() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UhdmRoot::Builder {
public:
  typedef UhdmRoot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDesigns();
  inline  ::capnp::List< ::Design>::Builder getDesigns();
  inline void setDesigns( ::capnp::List< ::Design>::Reader value);
  inline  ::capnp::List< ::Design>::Builder initDesigns(unsigned int size);
  inline void adoptDesigns(::capnp::Orphan< ::capnp::List< ::Design>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Design>> disownDesigns();

  inline bool hasSymbols();
  inline  ::capnp::List< ::capnp::Text>::Builder getSymbols();
  inline void setSymbols( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initSymbols(unsigned int size);
  inline void adoptSymbols(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownSymbols();

  inline bool hasFactoryProcess();
  inline  ::capnp::List< ::Process>::Builder getFactoryProcess();
  inline void setFactoryProcess( ::capnp::List< ::Process>::Reader value);
  inline  ::capnp::List< ::Process>::Builder initFactoryProcess(unsigned int size);
  inline void adoptFactoryProcess(::capnp::Orphan< ::capnp::List< ::Process>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Process>> disownFactoryProcess();

  inline bool hasFactoryScope();
  inline  ::capnp::List< ::Scope>::Builder getFactoryScope();
  inline void setFactoryScope( ::capnp::List< ::Scope>::Reader value);
  inline  ::capnp::List< ::Scope>::Builder initFactoryScope(unsigned int size);
  inline void adoptFactoryScope(::capnp::Orphan< ::capnp::List< ::Scope>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Scope>> disownFactoryScope();

  inline bool hasFactoryTask();
  inline  ::capnp::List< ::Task>::Builder getFactoryTask();
  inline void setFactoryTask( ::capnp::List< ::Task>::Reader value);
  inline  ::capnp::List< ::Task>::Builder initFactoryTask(unsigned int size);
  inline void adoptFactoryTask(::capnp::Orphan< ::capnp::List< ::Task>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Task>> disownFactoryTask();

  inline bool hasFactoryFunction();
  inline  ::capnp::List< ::Function>::Builder getFactoryFunction();
  inline void setFactoryFunction( ::capnp::List< ::Function>::Reader value);
  inline  ::capnp::List< ::Function>::Builder initFactoryFunction(unsigned int size);
  inline void adoptFactoryFunction(::capnp::Orphan< ::capnp::List< ::Function>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Function>> disownFactoryFunction();

  inline bool hasFactoryModport();
  inline  ::capnp::List< ::Modport>::Builder getFactoryModport();
  inline void setFactoryModport( ::capnp::List< ::Modport>::Reader value);
  inline  ::capnp::List< ::Modport>::Builder initFactoryModport(unsigned int size);
  inline void adoptFactoryModport(::capnp::Orphan< ::capnp::List< ::Modport>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modport>> disownFactoryModport();

  inline bool hasFactoryInterfacetfdecl();
  inline  ::capnp::List< ::Interfacetfdecl>::Builder getFactoryInterfacetfdecl();
  inline void setFactoryInterfacetfdecl( ::capnp::List< ::Interfacetfdecl>::Reader value);
  inline  ::capnp::List< ::Interfacetfdecl>::Builder initFactoryInterfacetfdecl(unsigned int size);
  inline void adoptFactoryInterfacetfdecl(::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>> disownFactoryInterfacetfdecl();

  inline bool hasFactoryInterface();
  inline  ::capnp::List< ::Interface>::Builder getFactoryInterface();
  inline void setFactoryInterface( ::capnp::List< ::Interface>::Reader value);
  inline  ::capnp::List< ::Interface>::Builder initFactoryInterface(unsigned int size);
  inline void adoptFactoryInterface(::capnp::Orphan< ::capnp::List< ::Interface>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interface>> disownFactoryInterface();

  inline bool hasFactoryInterfacearray();
  inline  ::capnp::List< ::Interfacearray>::Builder getFactoryInterfacearray();
  inline void setFactoryInterfacearray( ::capnp::List< ::Interfacearray>::Reader value);
  inline  ::capnp::List< ::Interfacearray>::Builder initFactoryInterfacearray(unsigned int size);
  inline void adoptFactoryInterfacearray(::capnp::Orphan< ::capnp::List< ::Interfacearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Interfacearray>> disownFactoryInterfacearray();

  inline bool hasFactoryContassign();
  inline  ::capnp::List< ::Contassign>::Builder getFactoryContassign();
  inline void setFactoryContassign( ::capnp::List< ::Contassign>::Reader value);
  inline  ::capnp::List< ::Contassign>::Builder initFactoryContassign(unsigned int size);
  inline void adoptFactoryContassign(::capnp::Orphan< ::capnp::List< ::Contassign>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Contassign>> disownFactoryContassign();

  inline bool hasFactoryPort();
  inline  ::capnp::List< ::Port>::Builder getFactoryPort();
  inline void setFactoryPort( ::capnp::List< ::Port>::Reader value);
  inline  ::capnp::List< ::Port>::Builder initFactoryPort(unsigned int size);
  inline void adoptFactoryPort(::capnp::Orphan< ::capnp::List< ::Port>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Port>> disownFactoryPort();

  inline bool hasFactoryModulearray();
  inline  ::capnp::List< ::Modulearray>::Builder getFactoryModulearray();
  inline void setFactoryModulearray( ::capnp::List< ::Modulearray>::Reader value);
  inline  ::capnp::List< ::Modulearray>::Builder initFactoryModulearray(unsigned int size);
  inline void adoptFactoryModulearray(::capnp::Orphan< ::capnp::List< ::Modulearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modulearray>> disownFactoryModulearray();

  inline bool hasFactoryPrimitive();
  inline  ::capnp::List< ::Primitive>::Builder getFactoryPrimitive();
  inline void setFactoryPrimitive( ::capnp::List< ::Primitive>::Reader value);
  inline  ::capnp::List< ::Primitive>::Builder initFactoryPrimitive(unsigned int size);
  inline void adoptFactoryPrimitive(::capnp::Orphan< ::capnp::List< ::Primitive>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Primitive>> disownFactoryPrimitive();

  inline bool hasFactoryPrimitivearray();
  inline  ::capnp::List< ::Primitivearray>::Builder getFactoryPrimitivearray();
  inline void setFactoryPrimitivearray( ::capnp::List< ::Primitivearray>::Reader value);
  inline  ::capnp::List< ::Primitivearray>::Builder initFactoryPrimitivearray(unsigned int size);
  inline void adoptFactoryPrimitivearray(::capnp::Orphan< ::capnp::List< ::Primitivearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Primitivearray>> disownFactoryPrimitivearray();

  inline bool hasFactoryModpath();
  inline  ::capnp::List< ::Modpath>::Builder getFactoryModpath();
  inline void setFactoryModpath( ::capnp::List< ::Modpath>::Reader value);
  inline  ::capnp::List< ::Modpath>::Builder initFactoryModpath(unsigned int size);
  inline void adoptFactoryModpath(::capnp::Orphan< ::capnp::List< ::Modpath>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Modpath>> disownFactoryModpath();

  inline bool hasFactoryTchk();
  inline  ::capnp::List< ::Tchk>::Builder getFactoryTchk();
  inline void setFactoryTchk( ::capnp::List< ::Tchk>::Reader value);
  inline  ::capnp::List< ::Tchk>::Builder initFactoryTchk(unsigned int size);
  inline void adoptFactoryTchk(::capnp::Orphan< ::capnp::List< ::Tchk>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Tchk>> disownFactoryTchk();

  inline bool hasFactoryDefparam();
  inline  ::capnp::List< ::Defparam>::Builder getFactoryDefparam();
  inline void setFactoryDefparam( ::capnp::List< ::Defparam>::Reader value);
  inline  ::capnp::List< ::Defparam>::Builder initFactoryDefparam(unsigned int size);
  inline void adoptFactoryDefparam(::capnp::Orphan< ::capnp::List< ::Defparam>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Defparam>> disownFactoryDefparam();

  inline bool hasFactoryIodecl();
  inline  ::capnp::List< ::Iodecl>::Builder getFactoryIodecl();
  inline void setFactoryIodecl( ::capnp::List< ::Iodecl>::Reader value);
  inline  ::capnp::List< ::Iodecl>::Builder initFactoryIodecl(unsigned int size);
  inline void adoptFactoryIodecl(::capnp::Orphan< ::capnp::List< ::Iodecl>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Iodecl>> disownFactoryIodecl();

  inline bool hasFactoryAliasstmt();
  inline  ::capnp::List< ::Aliasstmt>::Builder getFactoryAliasstmt();
  inline void setFactoryAliasstmt( ::capnp::List< ::Aliasstmt>::Reader value);
  inline  ::capnp::List< ::Aliasstmt>::Builder initFactoryAliasstmt(unsigned int size);
  inline void adoptFactoryAliasstmt(::capnp::Orphan< ::capnp::List< ::Aliasstmt>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Aliasstmt>> disownFactoryAliasstmt();

  inline bool hasFactoryClockingblock();
  inline  ::capnp::List< ::Clockingblock>::Builder getFactoryClockingblock();
  inline void setFactoryClockingblock( ::capnp::List< ::Clockingblock>::Reader value);
  inline  ::capnp::List< ::Clockingblock>::Builder initFactoryClockingblock(unsigned int size);
  inline void adoptFactoryClockingblock(::capnp::Orphan< ::capnp::List< ::Clockingblock>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Clockingblock>> disownFactoryClockingblock();

  inline bool hasFactoryInstancearray();
  inline  ::capnp::List< ::Instancearray>::Builder getFactoryInstancearray();
  inline void setFactoryInstancearray( ::capnp::List< ::Instancearray>::Reader value);
  inline  ::capnp::List< ::Instancearray>::Builder initFactoryInstancearray(unsigned int size);
  inline void adoptFactoryInstancearray(::capnp::Orphan< ::capnp::List< ::Instancearray>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Instancearray>> disownFactoryInstancearray();

  inline bool hasFactoryModule();
  inline  ::capnp::List< ::Module>::Builder getFactoryModule();
  inline void setFactoryModule( ::capnp::List< ::Module>::Reader value);
  inline  ::capnp::List< ::Module>::Builder initFactoryModule(unsigned int size);
  inline void adoptFactoryModule(::capnp::Orphan< ::capnp::List< ::Module>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Module>> disownFactoryModule();

  inline bool hasFactoryProgram();
  inline  ::capnp::List< ::Program>::Builder getFactoryProgram();
  inline void setFactoryProgram( ::capnp::List< ::Program>::Reader value);
  inline  ::capnp::List< ::Program>::Builder initFactoryProgram(unsigned int size);
  inline void adoptFactoryProgram(::capnp::Orphan< ::capnp::List< ::Program>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Program>> disownFactoryProgram();

  inline bool hasFactoryDesign();
  inline  ::capnp::List< ::Design>::Builder getFactoryDesign();
  inline void setFactoryDesign( ::capnp::List< ::Design>::Reader value);
  inline  ::capnp::List< ::Design>::Builder initFactoryDesign(unsigned int size);
  inline void adoptFactoryDesign(::capnp::Orphan< ::capnp::List< ::Design>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Design>> disownFactoryDesign();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UhdmRoot::Pipeline {
public:
  typedef UhdmRoot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Process::Reader {
public:
  typedef Process Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Process::Builder {
public:
  typedef Process Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Process::Pipeline {
public:
  typedef Process Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Scope::Reader {
public:
  typedef Scope Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Scope::Builder {
public:
  typedef Scope Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Scope::Pipeline {
public:
  typedef Scope Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Task::Reader {
public:
  typedef Task Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Task::Builder {
public:
  typedef Task Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Task::Pipeline {
public:
  typedef Task Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Function::Reader {
public:
  typedef Function Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Function::Builder {
public:
  typedef Function Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Function::Pipeline {
public:
  typedef Function Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modport::Reader {
public:
  typedef Modport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getIodecls() const;

  inline  ::uint64_t getInterface() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modport::Builder {
public:
  typedef Modport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownIodecls();

  inline  ::uint64_t getInterface();
  inline void setInterface( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modport::Pipeline {
public:
  typedef Modport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacetfdecl::Reader {
public:
  typedef Interfacetfdecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiAccessType() const;

  inline bool hasTasks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTasks() const;

  inline bool hasFunctions() const;
  inline  ::capnp::List< ::uint64_t>::Reader getFunctions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacetfdecl::Builder {
public:
  typedef Interfacetfdecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiAccessType();
  inline void setVpiAccessType( ::uint64_t value);

  inline bool hasTasks();
  inline  ::capnp::List< ::uint64_t>::Builder getTasks();
  inline void setTasks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTasks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTasks(unsigned int size);
  inline void adoptTasks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTasks();

  inline bool hasFunctions();
  inline  ::capnp::List< ::uint64_t>::Builder getFunctions();
  inline void setFunctions( ::capnp::List< ::uint64_t>::Reader value);
  inline void setFunctions(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initFunctions(unsigned int size);
  inline void adoptFunctions(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownFunctions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacetfdecl::Pipeline {
public:
  typedef Interfacetfdecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interface::Reader {
public:
  typedef Interface Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProcess() const;

  inline bool hasInterfacetfdecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacetfdecls() const;

  inline bool hasModports() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModports() const;

  inline  ::uint64_t getGlobalclocking() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasModpaths() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModpaths() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interface::Builder {
public:
  typedef Interface Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline bool hasProcess();
  inline  ::capnp::List< ::uint64_t>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProcess(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProcess();

  inline bool hasInterfacetfdecls();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacetfdecls();
  inline void setInterfacetfdecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacetfdecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacetfdecls(unsigned int size);
  inline void adoptInterfacetfdecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacetfdecls();

  inline bool hasModports();
  inline  ::capnp::List< ::uint64_t>::Builder getModports();
  inline void setModports( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModports(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModports(unsigned int size);
  inline void adoptModports(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModports();

  inline  ::uint64_t getGlobalclocking();
  inline void setGlobalclocking( ::uint64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasModpaths();
  inline  ::capnp::List< ::uint64_t>::Builder getModpaths();
  inline void setModpaths( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModpaths(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModpaths(unsigned int size);
  inline void adoptModpaths(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModpaths();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interface::Pipeline {
public:
  typedef Interface Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Interfacearray::Reader {
public:
  typedef Interfacearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Interfacearray::Builder {
public:
  typedef Interfacearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Interfacearray::Pipeline {
public:
  typedef Interfacearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Contassign::Reader {
public:
  typedef Contassign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Contassign::Builder {
public:
  typedef Contassign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Contassign::Pipeline {
public:
  typedef Contassign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Port::Reader {
public:
  typedef Port Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Port::Builder {
public:
  typedef Port Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Port::Pipeline {
public:
  typedef Port Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modulearray::Reader {
public:
  typedef Modulearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modulearray::Builder {
public:
  typedef Modulearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modulearray::Pipeline {
public:
  typedef Modulearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Primitive::Reader {
public:
  typedef Primitive Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Primitive::Builder {
public:
  typedef Primitive Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Primitive::Pipeline {
public:
  typedef Primitive Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Primitivearray::Reader {
public:
  typedef Primitivearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Primitivearray::Builder {
public:
  typedef Primitivearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Primitivearray::Pipeline {
public:
  typedef Primitivearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Modpath::Reader {
public:
  typedef Modpath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Modpath::Builder {
public:
  typedef Modpath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Modpath::Pipeline {
public:
  typedef Modpath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tchk::Reader {
public:
  typedef Tchk Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tchk::Builder {
public:
  typedef Tchk Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tchk::Pipeline {
public:
  typedef Tchk Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Defparam::Reader {
public:
  typedef Defparam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Defparam::Builder {
public:
  typedef Defparam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Defparam::Pipeline {
public:
  typedef Defparam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Iodecl::Reader {
public:
  typedef Iodecl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Iodecl::Builder {
public:
  typedef Iodecl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Iodecl::Pipeline {
public:
  typedef Iodecl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Aliasstmt::Reader {
public:
  typedef Aliasstmt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Aliasstmt::Builder {
public:
  typedef Aliasstmt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Aliasstmt::Pipeline {
public:
  typedef Aliasstmt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clockingblock::Reader {
public:
  typedef Clockingblock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clockingblock::Builder {
public:
  typedef Clockingblock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clockingblock::Pipeline {
public:
  typedef Clockingblock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Instancearray::Reader {
public:
  typedef Instancearray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Instancearray::Builder {
public:
  typedef Instancearray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Instancearray::Pipeline {
public:
  typedef Instancearray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Module::Reader {
public:
  typedef Module Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline bool getVpiTopModule() const;

  inline  ::int64_t getVpiDefDecayTime() const;

  inline  ::uint64_t getInstancearray() const;

  inline bool hasScope() const;
  inline  ::capnp::List< ::uint64_t>::Reader getScope() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProcess() const;

  inline bool hasPrimitives() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimitives() const;

  inline bool hasPrimitivearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPrimitivearrays() const;

  inline  ::uint64_t getGlobalclocking() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasPorts() const;
  inline  ::capnp::List< ::uint64_t>::Reader getPorts() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModules() const;

  inline bool hasModulearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModulearrays() const;

  inline bool hasModpaths() const;
  inline  ::capnp::List< ::uint64_t>::Reader getModpaths() const;

  inline bool hasTchks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTchks() const;

  inline bool hasDefparams() const;
  inline  ::capnp::List< ::uint64_t>::Reader getDefparams() const;

  inline bool hasIodecls() const;
  inline  ::capnp::List< ::uint64_t>::Reader getIodecls() const;

  inline bool hasAliasstmts() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAliasstmts() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getClockingblocks() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Module::Builder {
public:
  typedef Module Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool getVpiTopModule();
  inline void setVpiTopModule(bool value);

  inline  ::int64_t getVpiDefDecayTime();
  inline void setVpiDefDecayTime( ::int64_t value);

  inline  ::uint64_t getInstancearray();
  inline void setInstancearray( ::uint64_t value);

  inline bool hasScope();
  inline  ::capnp::List< ::uint64_t>::Builder getScope();
  inline void setScope( ::capnp::List< ::uint64_t>::Reader value);
  inline void setScope(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initScope(unsigned int size);
  inline void adoptScope(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownScope();

  inline bool hasProcess();
  inline  ::capnp::List< ::uint64_t>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProcess(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProcess();

  inline bool hasPrimitives();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimitives();
  inline void setPrimitives( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimitives(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimitives(unsigned int size);
  inline void adoptPrimitives(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimitives();

  inline bool hasPrimitivearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getPrimitivearrays();
  inline void setPrimitivearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPrimitivearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPrimitivearrays(unsigned int size);
  inline void adoptPrimitivearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPrimitivearrays();

  inline  ::uint64_t getGlobalclocking();
  inline void setGlobalclocking( ::uint64_t value);

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasPorts();
  inline  ::capnp::List< ::uint64_t>::Builder getPorts();
  inline void setPorts( ::capnp::List< ::uint64_t>::Reader value);
  inline void setPorts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initPorts(unsigned int size);
  inline void adoptPorts(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownPorts();

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasModules();
  inline  ::capnp::List< ::uint64_t>::Builder getModules();
  inline void setModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModules(unsigned int size);
  inline void adoptModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModules();

  inline bool hasModulearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getModulearrays();
  inline void setModulearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModulearrays(unsigned int size);
  inline void adoptModulearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModulearrays();

  inline bool hasModpaths();
  inline  ::capnp::List< ::uint64_t>::Builder getModpaths();
  inline void setModpaths( ::capnp::List< ::uint64_t>::Reader value);
  inline void setModpaths(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initModpaths(unsigned int size);
  inline void adoptModpaths(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownModpaths();

  inline bool hasTchks();
  inline  ::capnp::List< ::uint64_t>::Builder getTchks();
  inline void setTchks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTchks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTchks(unsigned int size);
  inline void adoptTchks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTchks();

  inline bool hasDefparams();
  inline  ::capnp::List< ::uint64_t>::Builder getDefparams();
  inline void setDefparams( ::capnp::List< ::uint64_t>::Reader value);
  inline void setDefparams(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initDefparams(unsigned int size);
  inline void adoptDefparams(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownDefparams();

  inline bool hasIodecls();
  inline  ::capnp::List< ::uint64_t>::Builder getIodecls();
  inline void setIodecls( ::capnp::List< ::uint64_t>::Reader value);
  inline void setIodecls(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initIodecls(unsigned int size);
  inline void adoptIodecls(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownIodecls();

  inline bool hasAliasstmts();
  inline  ::capnp::List< ::uint64_t>::Builder getAliasstmts();
  inline void setAliasstmts( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAliasstmts(unsigned int size);
  inline void adoptAliasstmts(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAliasstmts();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownClockingblocks();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Module::Pipeline {
public:
  typedef Module Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Program::Reader {
public:
  typedef Program Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline  ::uint64_t getInstancearray() const;

  inline bool hasProcess() const;
  inline  ::capnp::List< ::uint64_t>::Reader getProcess() const;

  inline  ::uint64_t getDefaultclocking() const;

  inline bool hasInterfaces() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfaces() const;

  inline bool hasInterfacearrays() const;
  inline  ::capnp::List< ::uint64_t>::Reader getInterfacearrays() const;

  inline bool hasContassigns() const;
  inline  ::capnp::List< ::uint64_t>::Reader getContassigns() const;

  inline bool hasClockingblocks() const;
  inline  ::capnp::List< ::uint64_t>::Reader getClockingblocks() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Program::Builder {
public:
  typedef Program Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline  ::uint64_t getInstancearray();
  inline void setInstancearray( ::uint64_t value);

  inline bool hasProcess();
  inline  ::capnp::List< ::uint64_t>::Builder getProcess();
  inline void setProcess( ::capnp::List< ::uint64_t>::Reader value);
  inline void setProcess(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initProcess(unsigned int size);
  inline void adoptProcess(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownProcess();

  inline  ::uint64_t getDefaultclocking();
  inline void setDefaultclocking( ::uint64_t value);

  inline bool hasInterfaces();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfaces();
  inline void setInterfaces( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfaces(unsigned int size);
  inline void adoptInterfaces(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfaces();

  inline bool hasInterfacearrays();
  inline  ::capnp::List< ::uint64_t>::Builder getInterfacearrays();
  inline void setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value);
  inline void setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initInterfacearrays(unsigned int size);
  inline void adoptInterfacearrays(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownInterfacearrays();

  inline bool hasContassigns();
  inline  ::capnp::List< ::uint64_t>::Builder getContassigns();
  inline void setContassigns( ::capnp::List< ::uint64_t>::Reader value);
  inline void setContassigns(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initContassigns(unsigned int size);
  inline void adoptContassigns(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownContassigns();

  inline bool hasClockingblocks();
  inline  ::capnp::List< ::uint64_t>::Builder getClockingblocks();
  inline void setClockingblocks( ::capnp::List< ::uint64_t>::Reader value);
  inline void setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initClockingblocks(unsigned int size);
  inline void adoptClockingblocks(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownClockingblocks();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Program::Pipeline {
public:
  typedef Program Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Design::Reader {
public:
  typedef Design Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent() const;

  inline  ::uint64_t getUhdmParentType() const;

  inline  ::uint64_t getVpiFile() const;

  inline  ::uint32_t getVpiLineNo() const;

  inline  ::uint64_t getVpiName() const;

  inline bool hasAllModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAllModules() const;

  inline bool hasTopModules() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTopModules() const;

  inline bool hasAllPrograms() const;
  inline  ::capnp::List< ::uint64_t>::Reader getAllPrograms() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Design::Builder {
public:
  typedef Design Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getVpiParent();
  inline void setVpiParent( ::uint64_t value);

  inline  ::uint64_t getUhdmParentType();
  inline void setUhdmParentType( ::uint64_t value);

  inline  ::uint64_t getVpiFile();
  inline void setVpiFile( ::uint64_t value);

  inline  ::uint32_t getVpiLineNo();
  inline void setVpiLineNo( ::uint32_t value);

  inline  ::uint64_t getVpiName();
  inline void setVpiName( ::uint64_t value);

  inline bool hasAllModules();
  inline  ::capnp::List< ::uint64_t>::Builder getAllModules();
  inline void setAllModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAllModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAllModules(unsigned int size);
  inline void adoptAllModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAllModules();

  inline bool hasTopModules();
  inline  ::capnp::List< ::uint64_t>::Builder getTopModules();
  inline void setTopModules( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTopModules(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTopModules(unsigned int size);
  inline void adoptTopModules(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTopModules();

  inline bool hasAllPrograms();
  inline  ::capnp::List< ::uint64_t>::Builder getAllPrograms();
  inline void setAllPrograms( ::capnp::List< ::uint64_t>::Reader value);
  inline void setAllPrograms(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initAllPrograms(unsigned int size);
  inline void adoptAllPrograms(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownAllPrograms();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Design::Pipeline {
public:
  typedef Design Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool UhdmRoot::Reader::hasDesigns() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasDesigns() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Design>::Reader UhdmRoot::Reader::getDesigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::getDesigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setDesigns( ::capnp::List< ::Design>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::initDesigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptDesigns(
    ::capnp::Orphan< ::capnp::List< ::Design>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Design>> UhdmRoot::Builder::disownDesigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasSymbols() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasSymbols() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader UhdmRoot::Reader::getSymbols() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder UhdmRoot::Builder::getSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setSymbols( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void UhdmRoot::Builder::setSymbols(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder UhdmRoot::Builder::initSymbols(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptSymbols(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> UhdmRoot::Builder::disownSymbols() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProcess() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProcess() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Process>::Reader UhdmRoot::Reader::getFactoryProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Process>::Builder UhdmRoot::Builder::getFactoryProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProcess( ::capnp::List< ::Process>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Process>::Builder UhdmRoot::Builder::initFactoryProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProcess(
    ::capnp::Orphan< ::capnp::List< ::Process>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Process>> UhdmRoot::Builder::disownFactoryProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Process>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryScope() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryScope() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Scope>::Reader UhdmRoot::Reader::getFactoryScope() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Scope>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Scope>::Builder UhdmRoot::Builder::getFactoryScope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Scope>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryScope( ::capnp::List< ::Scope>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Scope>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Scope>::Builder UhdmRoot::Builder::initFactoryScope(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Scope>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryScope(
    ::capnp::Orphan< ::capnp::List< ::Scope>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Scope>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Scope>> UhdmRoot::Builder::disownFactoryScope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Scope>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTask() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTask() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Task>::Reader UhdmRoot::Reader::getFactoryTask() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Task>::Builder UhdmRoot::Builder::getFactoryTask() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTask( ::capnp::List< ::Task>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Task>::Builder UhdmRoot::Builder::initFactoryTask(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTask(
    ::capnp::Orphan< ::capnp::List< ::Task>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Task>> UhdmRoot::Builder::disownFactoryTask() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Task>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryFunction() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryFunction() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Function>::Reader UhdmRoot::Reader::getFactoryFunction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Function>::Builder UhdmRoot::Builder::getFactoryFunction() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryFunction( ::capnp::List< ::Function>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Function>::Builder UhdmRoot::Builder::initFactoryFunction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryFunction(
    ::capnp::Orphan< ::capnp::List< ::Function>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Function>> UhdmRoot::Builder::disownFactoryFunction() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Function>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModport() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModport() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modport>::Reader UhdmRoot::Reader::getFactoryModport() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modport>::Builder UhdmRoot::Builder::getFactoryModport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModport( ::capnp::List< ::Modport>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modport>::Builder UhdmRoot::Builder::initFactoryModport(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModport(
    ::capnp::Orphan< ::capnp::List< ::Modport>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modport>> UhdmRoot::Builder::disownFactoryModport() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modport>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacetfdecl() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacetfdecl() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacetfdecl>::Reader UhdmRoot::Reader::getFactoryInterfacetfdecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacetfdecl>::Builder UhdmRoot::Builder::getFactoryInterfacetfdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacetfdecl( ::capnp::List< ::Interfacetfdecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacetfdecl>::Builder UhdmRoot::Builder::initFactoryInterfacetfdecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacetfdecl(
    ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacetfdecl>> UhdmRoot::Builder::disownFactoryInterfacetfdecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacetfdecl>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterface() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterface() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interface>::Reader UhdmRoot::Reader::getFactoryInterface() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interface>::Builder UhdmRoot::Builder::getFactoryInterface() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterface( ::capnp::List< ::Interface>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interface>::Builder UhdmRoot::Builder::initFactoryInterface(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterface(
    ::capnp::Orphan< ::capnp::List< ::Interface>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interface>> UhdmRoot::Builder::disownFactoryInterface() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interface>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInterfacearray() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInterfacearray() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Interfacearray>::Reader UhdmRoot::Reader::getFactoryInterfacearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Interfacearray>::Builder UhdmRoot::Builder::getFactoryInterfacearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInterfacearray( ::capnp::List< ::Interfacearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Interfacearray>::Builder UhdmRoot::Builder::initFactoryInterfacearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInterfacearray(
    ::capnp::Orphan< ::capnp::List< ::Interfacearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Interfacearray>> UhdmRoot::Builder::disownFactoryInterfacearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Interfacearray>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryContassign() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryContassign() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Contassign>::Reader UhdmRoot::Reader::getFactoryContassign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Contassign>::Builder UhdmRoot::Builder::getFactoryContassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryContassign( ::capnp::List< ::Contassign>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Contassign>::Builder UhdmRoot::Builder::initFactoryContassign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryContassign(
    ::capnp::Orphan< ::capnp::List< ::Contassign>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Contassign>> UhdmRoot::Builder::disownFactoryContassign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Contassign>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPort() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPort() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Port>::Reader UhdmRoot::Reader::getFactoryPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Port>::Builder UhdmRoot::Builder::getFactoryPort() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPort( ::capnp::List< ::Port>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Port>::Builder UhdmRoot::Builder::initFactoryPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPort(
    ::capnp::Orphan< ::capnp::List< ::Port>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Port>> UhdmRoot::Builder::disownFactoryPort() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Port>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModulearray() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModulearray() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modulearray>::Reader UhdmRoot::Reader::getFactoryModulearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modulearray>::Builder UhdmRoot::Builder::getFactoryModulearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModulearray( ::capnp::List< ::Modulearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modulearray>::Builder UhdmRoot::Builder::initFactoryModulearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModulearray(
    ::capnp::Orphan< ::capnp::List< ::Modulearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modulearray>> UhdmRoot::Builder::disownFactoryModulearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modulearray>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPrimitive() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPrimitive() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Primitive>::Reader UhdmRoot::Reader::getFactoryPrimitive() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Primitive>::Builder UhdmRoot::Builder::getFactoryPrimitive() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPrimitive( ::capnp::List< ::Primitive>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Primitive>::Builder UhdmRoot::Builder::initFactoryPrimitive(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPrimitive(
    ::capnp::Orphan< ::capnp::List< ::Primitive>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Primitive>> UhdmRoot::Builder::disownFactoryPrimitive() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitive>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryPrimitivearray() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryPrimitivearray() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Primitivearray>::Reader UhdmRoot::Reader::getFactoryPrimitivearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitivearray>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Primitivearray>::Builder UhdmRoot::Builder::getFactoryPrimitivearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitivearray>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryPrimitivearray( ::capnp::List< ::Primitivearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primitivearray>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Primitivearray>::Builder UhdmRoot::Builder::initFactoryPrimitivearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitivearray>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryPrimitivearray(
    ::capnp::Orphan< ::capnp::List< ::Primitivearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Primitivearray>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Primitivearray>> UhdmRoot::Builder::disownFactoryPrimitivearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Primitivearray>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModpath() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModpath() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Modpath>::Reader UhdmRoot::Reader::getFactoryModpath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Modpath>::Builder UhdmRoot::Builder::getFactoryModpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModpath( ::capnp::List< ::Modpath>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Modpath>::Builder UhdmRoot::Builder::initFactoryModpath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModpath(
    ::capnp::Orphan< ::capnp::List< ::Modpath>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Modpath>> UhdmRoot::Builder::disownFactoryModpath() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Modpath>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryTchk() const {
  return !_reader.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryTchk() {
  return !_builder.getPointerField(16 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Tchk>::Reader UhdmRoot::Reader::getFactoryTchk() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::get(
      _reader.getPointerField(16 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Tchk>::Builder UhdmRoot::Builder::getFactoryTchk() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::get(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryTchk( ::capnp::List< ::Tchk>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::set(
      _builder.getPointerField(16 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Tchk>::Builder UhdmRoot::Builder::initFactoryTchk(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::init(
      _builder.getPointerField(16 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryTchk(
    ::capnp::Orphan< ::capnp::List< ::Tchk>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::adopt(
      _builder.getPointerField(16 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Tchk>> UhdmRoot::Builder::disownFactoryTchk() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tchk>>::disown(
      _builder.getPointerField(16 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDefparam() const {
  return !_reader.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDefparam() {
  return !_builder.getPointerField(17 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Defparam>::Reader UhdmRoot::Reader::getFactoryDefparam() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::get(
      _reader.getPointerField(17 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Defparam>::Builder UhdmRoot::Builder::getFactoryDefparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::get(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDefparam( ::capnp::List< ::Defparam>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::set(
      _builder.getPointerField(17 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Defparam>::Builder UhdmRoot::Builder::initFactoryDefparam(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::init(
      _builder.getPointerField(17 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDefparam(
    ::capnp::Orphan< ::capnp::List< ::Defparam>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::adopt(
      _builder.getPointerField(17 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Defparam>> UhdmRoot::Builder::disownFactoryDefparam() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Defparam>>::disown(
      _builder.getPointerField(17 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryIodecl() const {
  return !_reader.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryIodecl() {
  return !_builder.getPointerField(18 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Iodecl>::Reader UhdmRoot::Reader::getFactoryIodecl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::get(
      _reader.getPointerField(18 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Iodecl>::Builder UhdmRoot::Builder::getFactoryIodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::get(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryIodecl( ::capnp::List< ::Iodecl>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::set(
      _builder.getPointerField(18 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Iodecl>::Builder UhdmRoot::Builder::initFactoryIodecl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::init(
      _builder.getPointerField(18 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryIodecl(
    ::capnp::Orphan< ::capnp::List< ::Iodecl>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::adopt(
      _builder.getPointerField(18 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Iodecl>> UhdmRoot::Builder::disownFactoryIodecl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Iodecl>>::disown(
      _builder.getPointerField(18 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryAliasstmt() const {
  return !_reader.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryAliasstmt() {
  return !_builder.getPointerField(19 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Aliasstmt>::Reader UhdmRoot::Reader::getFactoryAliasstmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::get(
      _reader.getPointerField(19 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Aliasstmt>::Builder UhdmRoot::Builder::getFactoryAliasstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::get(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryAliasstmt( ::capnp::List< ::Aliasstmt>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::set(
      _builder.getPointerField(19 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Aliasstmt>::Builder UhdmRoot::Builder::initFactoryAliasstmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::init(
      _builder.getPointerField(19 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryAliasstmt(
    ::capnp::Orphan< ::capnp::List< ::Aliasstmt>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::adopt(
      _builder.getPointerField(19 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Aliasstmt>> UhdmRoot::Builder::disownFactoryAliasstmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Aliasstmt>>::disown(
      _builder.getPointerField(19 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryClockingblock() const {
  return !_reader.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryClockingblock() {
  return !_builder.getPointerField(20 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Clockingblock>::Reader UhdmRoot::Reader::getFactoryClockingblock() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::get(
      _reader.getPointerField(20 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Clockingblock>::Builder UhdmRoot::Builder::getFactoryClockingblock() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::get(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryClockingblock( ::capnp::List< ::Clockingblock>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::set(
      _builder.getPointerField(20 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Clockingblock>::Builder UhdmRoot::Builder::initFactoryClockingblock(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::init(
      _builder.getPointerField(20 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryClockingblock(
    ::capnp::Orphan< ::capnp::List< ::Clockingblock>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::adopt(
      _builder.getPointerField(20 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Clockingblock>> UhdmRoot::Builder::disownFactoryClockingblock() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Clockingblock>>::disown(
      _builder.getPointerField(20 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryInstancearray() const {
  return !_reader.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryInstancearray() {
  return !_builder.getPointerField(21 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Instancearray>::Reader UhdmRoot::Reader::getFactoryInstancearray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Instancearray>>::get(
      _reader.getPointerField(21 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Instancearray>::Builder UhdmRoot::Builder::getFactoryInstancearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Instancearray>>::get(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryInstancearray( ::capnp::List< ::Instancearray>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Instancearray>>::set(
      _builder.getPointerField(21 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Instancearray>::Builder UhdmRoot::Builder::initFactoryInstancearray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Instancearray>>::init(
      _builder.getPointerField(21 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryInstancearray(
    ::capnp::Orphan< ::capnp::List< ::Instancearray>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Instancearray>>::adopt(
      _builder.getPointerField(21 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Instancearray>> UhdmRoot::Builder::disownFactoryInstancearray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Instancearray>>::disown(
      _builder.getPointerField(21 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryModule() const {
  return !_reader.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryModule() {
  return !_builder.getPointerField(22 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Module>::Reader UhdmRoot::Reader::getFactoryModule() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::get(
      _reader.getPointerField(22 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Module>::Builder UhdmRoot::Builder::getFactoryModule() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::get(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryModule( ::capnp::List< ::Module>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::set(
      _builder.getPointerField(22 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Module>::Builder UhdmRoot::Builder::initFactoryModule(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::init(
      _builder.getPointerField(22 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryModule(
    ::capnp::Orphan< ::capnp::List< ::Module>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::adopt(
      _builder.getPointerField(22 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Module>> UhdmRoot::Builder::disownFactoryModule() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Module>>::disown(
      _builder.getPointerField(22 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryProgram() const {
  return !_reader.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryProgram() {
  return !_builder.getPointerField(23 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Program>::Reader UhdmRoot::Reader::getFactoryProgram() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::get(
      _reader.getPointerField(23 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Program>::Builder UhdmRoot::Builder::getFactoryProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::get(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryProgram( ::capnp::List< ::Program>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::set(
      _builder.getPointerField(23 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Program>::Builder UhdmRoot::Builder::initFactoryProgram(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::init(
      _builder.getPointerField(23 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryProgram(
    ::capnp::Orphan< ::capnp::List< ::Program>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::adopt(
      _builder.getPointerField(23 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Program>> UhdmRoot::Builder::disownFactoryProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Program>>::disown(
      _builder.getPointerField(23 * ::capnp::POINTERS));
}

inline bool UhdmRoot::Reader::hasFactoryDesign() const {
  return !_reader.getPointerField(24 * ::capnp::POINTERS).isNull();
}
inline bool UhdmRoot::Builder::hasFactoryDesign() {
  return !_builder.getPointerField(24 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Design>::Reader UhdmRoot::Reader::getFactoryDesign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(
      _reader.getPointerField(24 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::getFactoryDesign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::get(
      _builder.getPointerField(24 * ::capnp::POINTERS));
}
inline void UhdmRoot::Builder::setFactoryDesign( ::capnp::List< ::Design>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::set(
      _builder.getPointerField(24 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Design>::Builder UhdmRoot::Builder::initFactoryDesign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::init(
      _builder.getPointerField(24 * ::capnp::POINTERS), size);
}
inline void UhdmRoot::Builder::adoptFactoryDesign(
    ::capnp::Orphan< ::capnp::List< ::Design>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::adopt(
      _builder.getPointerField(24 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Design>> UhdmRoot::Builder::disownFactoryDesign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Design>>::disown(
      _builder.getPointerField(24 * ::capnp::POINTERS));
}

inline  ::uint64_t Process::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Process::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Process::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Process::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Process::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Process::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Process::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Process::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Scope::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Scope::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Scope::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Scope::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Scope::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Scope::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Scope::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Scope::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Scope::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Scope::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Scope::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Scope::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Task::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Task::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Task::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Function::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Function::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Function::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Function::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Function::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modport::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modport::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modport::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Modport::Reader::hasIodecls() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Modport::Builder::hasIodecls() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Modport::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Modport::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Modport::Builder::setIodecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Modport::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Modport::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Modport::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Modport::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Modport::Reader::getInterface() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modport::Builder::getInterface() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Modport::Builder::setInterface( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interfacetfdecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interfacetfdecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacetfdecl::Reader::getVpiAccessType() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacetfdecl::Builder::getVpiAccessType() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Interfacetfdecl::Builder::setVpiAccessType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Interfacetfdecl::Reader::hasTasks() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasTasks() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacetfdecl::Reader::getTasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::getTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::setTasks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Interfacetfdecl::Builder::setTasks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::initTasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Interfacetfdecl::Builder::adoptTasks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacetfdecl::Builder::disownTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Interfacetfdecl::Reader::hasFunctions() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Interfacetfdecl::Builder::hasFunctions() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interfacetfdecl::Reader::getFunctions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::getFunctions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Interfacetfdecl::Builder::setFunctions( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Interfacetfdecl::Builder::setFunctions(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interfacetfdecl::Builder::initFunctions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Interfacetfdecl::Builder::adoptFunctions(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interfacetfdecl::Builder::disownFunctions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interface::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interface::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasProcess() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasProcess() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Interface::Builder::setProcess( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setProcess(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfacetfdecls() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfacetfdecls() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfacetfdecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfacetfdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfacetfdecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfacetfdecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfacetfdecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfacetfdecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfacetfdecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasModports() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasModports() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getModports() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getModports() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Interface::Builder::setModports( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setModports(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initModports(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptModports(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownModports() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint64_t Interface::Reader::getGlobalclocking() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getGlobalclocking() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setGlobalclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interface::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interface::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Interface::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool Interface::Reader::hasModpaths() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasModpaths() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getModpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Interface::Builder::setModpaths( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setModpaths(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initModpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptModpaths(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasContassigns() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasContassigns() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Interface::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfaces() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfaces() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Interface::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Interface::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Interface::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Interface::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Interface::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Interface::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Interface::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Interface::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline  ::uint64_t Interfacearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Interfacearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Interfacearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Interfacearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Interfacearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Interfacearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassign::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassign::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Contassign::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Contassign::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Contassign::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Contassign::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Contassign::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Port::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Port::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Port::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Port::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Port::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Port::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modulearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modulearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modulearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modulearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Modulearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitive::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitive::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Primitive::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Primitive::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Primitive::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitivearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitivearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Primitivearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitivearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitivearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Primitivearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Primitivearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Primitivearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Primitivearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Primitivearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Primitivearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Primitivearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Modpath::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Modpath::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Modpath::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Modpath::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Modpath::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Tchk::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Tchk::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Tchk::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Tchk::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Tchk::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Defparam::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Defparam::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Defparam::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Defparam::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Defparam::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Iodecl::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Iodecl::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Iodecl::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Iodecl::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Iodecl::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Aliasstmt::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Aliasstmt::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Aliasstmt::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Aliasstmt::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Aliasstmt::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Aliasstmt::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Aliasstmt::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clockingblock::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clockingblock::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Clockingblock::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Clockingblock::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Clockingblock::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Instancearray::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instancearray::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Instancearray::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Instancearray::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instancearray::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Instancearray::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Instancearray::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Instancearray::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Instancearray::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Instancearray::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Instancearray::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Instancearray::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Module::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Module::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::getVpiTopModule() const {
  return _reader.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}

inline bool Module::Builder::getVpiTopModule() {
  return _builder.getDataField<bool>(
      224 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiTopModule(bool value) {
  _builder.setDataField<bool>(
      224 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Module::Reader::getVpiDefDecayTime() const {
  return _reader.getDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int64_t Module::Builder::getVpiDefDecayTime() {
  return _builder.getDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setVpiDefDecayTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getInstancearray() const {
  return _reader.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getInstancearray() {
  return _builder.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setInstancearray( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasScope() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasScope() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getScope() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getScope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Module::Builder::setScope( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setScope(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initScope(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptScope(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownScope() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasProcess() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasProcess() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Module::Builder::setProcess( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setProcess(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPrimitives() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPrimitives() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getPrimitives() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Module::Builder::setPrimitives( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setPrimitives(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initPrimitives(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPrimitives(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownPrimitives() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasPrimitivearrays() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPrimitivearrays() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getPrimitivearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Module::Builder::setPrimitivearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setPrimitivearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initPrimitivearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPrimitivearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownPrimitivearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::uint64_t Module::Reader::getGlobalclocking() const {
  return _reader.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getGlobalclocking() {
  return _builder.getDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setGlobalclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Module::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Module::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS);
}
inline void Module::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool Module::Reader::hasPorts() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasPorts() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getPorts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Module::Builder::setPorts( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setPorts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initPorts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptPorts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownPorts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInterfaces() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInterfaces() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Module::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Module::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasContassigns() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasContassigns() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Module::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModules() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModules() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Module::Builder::setModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModulearrays() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModulearrays() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModulearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void Module::Builder::setModulearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModulearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModulearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModulearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModulearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasModpaths() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasModpaths() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getModpaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void Module::Builder::setModpaths( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setModpaths(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initModpaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptModpaths(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownModpaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasTchks() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasTchks() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getTchks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getTchks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void Module::Builder::setTchks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setTchks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initTchks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptTchks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownTchks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasDefparams() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasDefparams() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getDefparams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void Module::Builder::setDefparams( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setDefparams(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initDefparams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptDefparams(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownDefparams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasIodecls() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasIodecls() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getIodecls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void Module::Builder::setIodecls( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setIodecls(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initIodecls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptIodecls(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownIodecls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasAliasstmts() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasAliasstmts() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getAliasstmts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void Module::Builder::setAliasstmts( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setAliasstmts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initAliasstmts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptAliasstmts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownAliasstmts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool Module::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool Module::Builder::hasClockingblocks() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Module::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void Module::Builder::setClockingblocks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline void Module::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Module::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void Module::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Module::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Program::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Program::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Program::Reader::getInstancearray() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getInstancearray() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setInstancearray( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasProcess() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasProcess() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getProcess() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Program::Builder::setProcess( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setProcess(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initProcess(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptProcess(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownProcess() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Program::Reader::getDefaultclocking() const {
  return _reader.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Program::Builder::getDefaultclocking() {
  return _builder.getDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Program::Builder::setDefaultclocking( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Program::Reader::hasInterfaces() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInterfaces() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getInterfaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Program::Builder::setInterfaces( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setInterfaces(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initInterfaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInterfaces(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownInterfaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasInterfacearrays() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasInterfacearrays() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getInterfacearrays() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Program::Builder::setInterfacearrays( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setInterfacearrays(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initInterfacearrays(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptInterfacearrays(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownInterfacearrays() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasContassigns() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasContassigns() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getContassigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Program::Builder::setContassigns( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setContassigns(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initContassigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptContassigns(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownContassigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Program::Reader::hasClockingblocks() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Program::Builder::hasClockingblocks() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Program::Reader::getClockingblocks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::getClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Program::Builder::setClockingblocks( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void Program::Builder::setClockingblocks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Program::Builder::initClockingblocks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Program::Builder::adoptClockingblocks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Program::Builder::disownClockingblocks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::uint64_t Design::Reader::getVpiParent() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiParent() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getUhdmParentType() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getUhdmParentType() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setUhdmParentType( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getVpiFile() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiFile() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Design::Reader::getVpiLineNo() const {
  return _reader.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Design::Builder::getVpiLineNo() {
  return _builder.getDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiLineNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Design::Reader::getVpiName() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Design::Builder::getVpiName() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Design::Builder::setVpiName( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Design::Reader::hasAllModules() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllModules() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getAllModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getAllModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Design::Builder::setAllModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initAllModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownAllModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Design::Reader::hasTopModules() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasTopModules() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getTopModules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getTopModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Design::Builder::setTopModules( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Design::Builder::setTopModules(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initTopModules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptTopModules(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownTopModules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Design::Reader::hasAllPrograms() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Design::Builder::hasAllPrograms() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader Design::Reader::getAllPrograms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::getAllPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Design::Builder::setAllPrograms( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Design::Builder::setAllPrograms(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder Design::Builder::initAllPrograms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Design::Builder::adoptAllPrograms(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> Design::Builder::disownAllPrograms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_fff7299129556877_
